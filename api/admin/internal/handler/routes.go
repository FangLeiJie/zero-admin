// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.2

package handler

import (
	"net/http"

	cmsprefrence_area "github.com/feihua/zero-admin/api/admin/internal/handler/cms/prefrence_area"
	cmssubject "github.com/feihua/zero-admin/api/admin/internal/handler/cms/subject"
	cmssubject_category "github.com/feihua/zero-admin/api/admin/internal/handler/cms/subject_category"
	omscompany_address "github.com/feihua/zero-admin/api/admin/internal/handler/oms/company_address"
	omsorder "github.com/feihua/zero-admin/api/admin/internal/handler/oms/order"
	omsorder_setting "github.com/feihua/zero-admin/api/admin/internal/handler/oms/order_setting"
	omsreturn_apply "github.com/feihua/zero-admin/api/admin/internal/handler/oms/return_apply"
	omsreturn_reason "github.com/feihua/zero-admin/api/admin/internal/handler/oms/return_reason"
	pmsproduct "github.com/feihua/zero-admin/api/admin/internal/handler/pms/product"
	pmsproduct_attribute "github.com/feihua/zero-admin/api/admin/internal/handler/pms/product_attribute"
	pmsproduct_attribute_category "github.com/feihua/zero-admin/api/admin/internal/handler/pms/product_attribute_category"
	pmsproduct_brand "github.com/feihua/zero-admin/api/admin/internal/handler/pms/product_brand"
	pmsproduct_category "github.com/feihua/zero-admin/api/admin/internal/handler/pms/product_category"
	pmsskustock "github.com/feihua/zero-admin/api/admin/internal/handler/pms/skustock"
	smscoupon "github.com/feihua/zero-admin/api/admin/internal/handler/sms/coupon"
	smscoupon_history "github.com/feihua/zero-admin/api/admin/internal/handler/sms/coupon_history"
	smsflash_promotion "github.com/feihua/zero-admin/api/admin/internal/handler/sms/flash_promotion"
	smsflash_promotion_log "github.com/feihua/zero-admin/api/admin/internal/handler/sms/flash_promotion_log"
	smsflash_promotion_product "github.com/feihua/zero-admin/api/admin/internal/handler/sms/flash_promotion_product"
	smsflash_promotion_session "github.com/feihua/zero-admin/api/admin/internal/handler/sms/flash_promotion_session"
	smshome_advertise "github.com/feihua/zero-admin/api/admin/internal/handler/sms/home_advertise"
	smshome_brand "github.com/feihua/zero-admin/api/admin/internal/handler/sms/home_brand"
	smshome_new_product "github.com/feihua/zero-admin/api/admin/internal/handler/sms/home_new_product"
	smshome_recommend_product "github.com/feihua/zero-admin/api/admin/internal/handler/sms/home_recommend_product"
	smshome_recommend_subject "github.com/feihua/zero-admin/api/admin/internal/handler/sms/home_recommend_subject"
	sysdept "github.com/feihua/zero-admin/api/admin/internal/handler/sys/dept"
	sysdict_item "github.com/feihua/zero-admin/api/admin/internal/handler/sys/dict_item"
	sysdict_type "github.com/feihua/zero-admin/api/admin/internal/handler/sys/dict_type"
	syslog "github.com/feihua/zero-admin/api/admin/internal/handler/sys/log"
	sysmenu "github.com/feihua/zero-admin/api/admin/internal/handler/sys/menu"
	syspost "github.com/feihua/zero-admin/api/admin/internal/handler/sys/post"
	sysrole "github.com/feihua/zero-admin/api/admin/internal/handler/sys/role"
	sysupload "github.com/feihua/zero-admin/api/admin/internal/handler/sys/upload"
	sysuser "github.com/feihua/zero-admin/api/admin/internal/handler/sys/user"
	umsmember "github.com/feihua/zero-admin/api/admin/internal/handler/ums/member"
	umsmember_address "github.com/feihua/zero-admin/api/admin/internal/handler/ums/member_address"
	umsmember_integration_setting "github.com/feihua/zero-admin/api/admin/internal/handler/ums/member_integration_setting"
	umsmember_level "github.com/feihua/zero-admin/api/admin/internal/handler/ums/member_level"
	umsmember_rule_setting "github.com/feihua/zero-admin/api/admin/internal/handler/ums/member_rule_setting"
	umsmember_statistics "github.com/feihua/zero-admin/api/admin/internal/handler/ums/member_statistics"
	umsmember_tag "github.com/feihua/zero-admin/api/admin/internal/handler/ums/member_tag"
	umsmember_task "github.com/feihua/zero-admin/api/admin/internal/handler/ums/member_task"
	"github.com/feihua/zero-admin/api/admin/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addPreferredArea",
					Handler: cmsprefrence_area.AddPreferredAreaHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deletePreferredArea",
					Handler: cmsprefrence_area.DeletePreferredAreaHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryPreferredAreaDetail",
					Handler: cmsprefrence_area.QueryPreferredAreaDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryPreferredAreaList",
					Handler: cmsprefrence_area.QueryPreferredAreaListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updatePreferredArea",
					Handler: cmsprefrence_area.UpdatePreferredAreaHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updatePreferredAreaStatus",
					Handler: cmsprefrence_area.UpdatePreferredAreaStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/cms/prefrenceArea"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addSubject",
					Handler: cmssubject.AddSubjectHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteSubject",
					Handler: cmssubject.DeleteSubjectHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/querySubjectDetail",
					Handler: cmssubject.QuerySubjectDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/querySubjectList",
					Handler: cmssubject.QuerySubjectListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateSubject",
					Handler: cmssubject.UpdateSubjectHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateSubjectStatus",
					Handler: cmssubject.UpdateSubjectStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/cms/subject"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addSubjectCategory",
					Handler: cmssubject_category.AddSubjectCategoryHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteSubjectCategory",
					Handler: cmssubject_category.DeleteSubjectCategoryHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/querySubjectCategoryDetail",
					Handler: cmssubject_category.QuerySubjectCategoryDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/querySubjectCategoryList",
					Handler: cmssubject_category.QuerySubjectCategoryListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateSubjectCategory",
					Handler: cmssubject_category.UpdateSubjectCategoryHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateSubjectCategoryStatus",
					Handler: cmssubject_category.UpdateSubjectCategoryStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/cms/subjectCategory"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addCompanyAddress",
					Handler: omscompany_address.AddCompanyAddressHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteCompanyAddress",
					Handler: omscompany_address.DeleteCompanyAddressHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryCompanyAddressDetail",
					Handler: omscompany_address.QueryCompanyAddressDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryCompanyAddressList",
					Handler: omscompany_address.QueryCompanyAddressListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateCompanyAddress",
					Handler: omscompany_address.UpdateCompanyAddressHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateCompanyAddressReceiveStatus",
					Handler: omscompany_address.UpdateCompanyAddressReceiveStatusHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateCompanyAddressSendStatus",
					Handler: omscompany_address.UpdateCompanyAddressSendStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/oms/companyAddress"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/closeOrder",
					Handler: omsorder.CloseOrderHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteOrder",
					Handler: omsorder.OrderDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delivery",
					Handler: omsorder.DeliveryHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/orderDetail",
					Handler: omsorder.OrderDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryOrderList",
					Handler: omsorder.OrderListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateMoneyInfo",
					Handler: omsorder.UpdateMoneyInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateNote",
					Handler: omsorder.UpdateNoteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateReceiverInfo",
					Handler: omsorder.UpdateReceiverInfoHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/oms/order"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addOrderSetting",
					Handler: omsorder_setting.AddOrderSettingHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteOrderSetting",
					Handler: omsorder_setting.DeleteOrderSettingHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryOrderSettingDetail",
					Handler: omsorder_setting.QueryOrderSettingDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryOrderSettingList",
					Handler: omsorder_setting.QueryOrderSettingListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateOrderSetting",
					Handler: omsorder_setting.UpdateOrderSettingHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateOrderSettingIsDefault",
					Handler: omsorder_setting.UpdateOrderSettingIsDefaultHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateOrderSettingStatus",
					Handler: omsorder_setting.UpdateOrderSettingStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/oms/setting"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/deleteOrderReturnApply",
					Handler: omsreturn_apply.DeleteOrderReturnApplyHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryOrderReturnApplyDetail",
					Handler: omsreturn_apply.QueryOrderReturnApplyDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryOrderReturnApplyList",
					Handler: omsreturn_apply.QueryOrderReturnApplyListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateOrderReturnApplyStatus",
					Handler: omsreturn_apply.UpdateOrderReturnApplyStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/oms/returnApply"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addOrderReturnReason",
					Handler: omsreturn_reason.AddOrderReturnReasonHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteOrderReturnReason",
					Handler: omsreturn_reason.DeleteOrderReturnReasonHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryOrderReturnReasonDetail",
					Handler: omsreturn_reason.QueryOrderReturnReasonDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryOrderReturnReasonList",
					Handler: omsreturn_reason.QueryOrderReturnReasonListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateOrderReturnReason",
					Handler: omsreturn_reason.UpdateOrderReturnReasonHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateOrderReturnReasonStatus",
					Handler: omsreturn_reason.UpdateOrderReturnReasonStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/oms/returnReason"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/queryProductDetail",
					Handler: pmsproduct.QueryProductDetailHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/pms/product"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/queryProductList",
					Handler: pmsproduct.QueryProductListHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/pms/product"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addProduct",
					Handler: pmsproduct.ProductAddHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/pms/product"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/updateDeleteStatus",
					Handler: pmsproduct.UpdateDeleteStatusHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateNewStatus",
					Handler: pmsproduct.UpdateNewStatusHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateProduct",
					Handler: pmsproduct.ProductUpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updatePublishStatus",
					Handler: pmsproduct.UpdatePublishStatusHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateRecommendStatus",
					Handler: pmsproduct.UpdateRecommendStatusHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateVerifyStatus",
					Handler: pmsproduct.UpdateVerifyStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/pms/product"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addAttribute",
					Handler: pmsproduct_attribute.ProductAttributeAddHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteAttribute",
					Handler: pmsproduct_attribute.ProductAttributeDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryAttributeList",
					Handler: pmsproduct_attribute.ProductAttributeListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryByproductCategoryId",
					Handler: pmsproduct_attribute.QueryByproductCategoryIdHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/pms/attribute"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addAttributeCategory",
					Handler: pmsproduct_attribute_category.ProductAttributeCategoryAddHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteAttributeCategory",
					Handler: pmsproduct_attribute_category.ProductAttributeCategoryDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryAttributeCategoryList",
					Handler: pmsproduct_attribute_category.ProductAttributeCategoryListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryCategoryWithAttrList",
					Handler: pmsproduct_attribute_category.QueryCategoryWithAttrListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateAttributeCategory",
					Handler: pmsproduct_attribute_category.ProductAttributeCategoryUpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/pms/attributeCategory"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addProductBrand",
					Handler: pmsproduct_brand.ProductBrandAddHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteProductBrand",
					Handler: pmsproduct_brand.ProductBrandDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryProductBrandList",
					Handler: pmsproduct_brand.ProductBrandListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateBrandFactoryStatus",
					Handler: pmsproduct_brand.UpdateBrandFactoryStatusHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateBrandShowStatus",
					Handler: pmsproduct_brand.UpdateBrandShowStatusHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateProductBrand",
					Handler: pmsproduct_brand.ProductBrandUpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/pms/brand"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addProductCategory",
					Handler: pmsproduct_category.ProductCategoryAddHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteProductCategory",
					Handler: pmsproduct_category.ProductCategoryDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryProductCategoryList",
					Handler: pmsproduct_category.ProductCategoryListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateCategoryNavStatus",
					Handler: pmsproduct_category.UpdateCategoryNavStatusHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateCategoryShowStatus",
					Handler: pmsproduct_category.UpdateCategoryShowStatusHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateProductCategory",
					Handler: pmsproduct_category.ProductCategoryUpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/pms/category"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/querySkuStockList",
					Handler: pmsskustock.SkuStockListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateSkuStock",
					Handler: pmsskustock.SkuStockUpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/pms/skuStock"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addCoupon",
					Handler: smscoupon.CouponAddHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteCoupon",
					Handler: smscoupon.CouponDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryCouponDetail",
					Handler: smscoupon.CouponDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryCouponList",
					Handler: smscoupon.CouponListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateCoupon",
					Handler: smscoupon.CouponUpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sms/coupon"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/queryCouponHistoryList",
					Handler: smscoupon_history.CouponHistoryListHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sms/couponHistory"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addFlashPromotion",
					Handler: smsflash_promotion.AddFlashPromotionHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteFlashPromotion",
					Handler: smsflash_promotion.DeleteFlashPromotionHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryFlashPromotionDetail",
					Handler: smsflash_promotion.QueryFlashPromotionDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryFlashPromotionList",
					Handler: smsflash_promotion.QueryFlashPromotionListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateFlashPromotion",
					Handler: smsflash_promotion.UpdateFlashPromotionHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateFlashPromotionStatus",
					Handler: smsflash_promotion.UpdateFlashPromotionStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sms/flashPromotion"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addFlashPromotionLog",
					Handler: smsflash_promotion_log.FlashPromotionLogAddHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteFlashPromotionLog",
					Handler: smsflash_promotion_log.FlashPromotionLogDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryFlashPromotionLogList",
					Handler: smsflash_promotion_log.FlashPromotionLogListHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sms/flashPromotionLog"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addFlashPromotionProductRelation",
					Handler: smsflash_promotion_product.FlashPromotionProductRelationAddHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteFlashPromotionProductRelation",
					Handler: smsflash_promotion_product.FlashPromotionProductRelationDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryFlashPromotionProductRelationList",
					Handler: smsflash_promotion_product.FlashPromotionProductRelationListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateFlashPromotionProductRelation",
					Handler: smsflash_promotion_product.FlashPromotionProductRelationUpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sms/flashPromotionProductRelation"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addFlashPromotionSession",
					Handler: smsflash_promotion_session.FlashPromotionSessionAddHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteFlashPromotionSession",
					Handler: smsflash_promotion_session.FlashPromotionSessionDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryFlashPromotionSessionList",
					Handler: smsflash_promotion_session.FlashPromotionSessionListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateFlashPromotionSession",
					Handler: smsflash_promotion_session.FlashPromotionSessionUpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateSessionStatus",
					Handler: smsflash_promotion_session.UpdateFlashPromotionSessionStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sms/flashPromotionSession"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addHomeAdvertise",
					Handler: smshome_advertise.HomeAdvertiseAddHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteHomeAdvertise",
					Handler: smshome_advertise.HomeAdvertiseDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryHomeAdvertiseList",
					Handler: smshome_advertise.HomeAdvertiseListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateHomeAdvertise",
					Handler: smshome_advertise.HomeAdvertiseUpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateHomeAdvertiseStatus",
					Handler: smshome_advertise.UpdateHomeAdvertiseStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sms/homeAdvertise"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addHomeBrand",
					Handler: smshome_brand.AddHomeBrandHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteHomeBrand",
					Handler: smshome_brand.DeleteHomeBrandHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryHomeBrandDetail",
					Handler: smshome_brand.QueryHomeBrandDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryHomeBrandList",
					Handler: smshome_brand.QueryHomeBrandListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateHomeBrandSort",
					Handler: smshome_brand.UpdateHomeBrandHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateHomeBrandStatus",
					Handler: smshome_brand.UpdateHomeBrandStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sms/homeBrand"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addHomeNewProduct",
					Handler: smshome_new_product.AddHomeNewProductHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteHomeNewProduct",
					Handler: smshome_new_product.DeleteHomeNewProductHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryHomeNewProductDetail",
					Handler: smshome_new_product.QueryHomeNewProductDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryHomeNewProductList",
					Handler: smshome_new_product.QueryHomeNewProductListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateNewProductSort",
					Handler: smshome_new_product.UpdateNewProductSortHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateNewProductStatus",
					Handler: smshome_new_product.UpdateHomeNewProductStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sms/homeNewProduct"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addHomeRecommendProduct",
					Handler: smshome_recommend_product.HomeRecommendProductAddHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteHomeRecommendProduct",
					Handler: smshome_recommend_product.HomeRecommendProductDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryHomeRecommendProductList",
					Handler: smshome_recommend_product.HomeRecommendProductListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateRecommendProductSort",
					Handler: smshome_recommend_product.UpdateRecommendProductSortHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateRecommendProductStatus",
					Handler: smshome_recommend_product.UpdateRecommendProductStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sms/homeRecommendProduct"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addHomeRecommendSubject",
					Handler: smshome_recommend_subject.HomeRecommendSubjectAddHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteHomeRecommendSubject",
					Handler: smshome_recommend_subject.HomeRecommendSubjectDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryHomeRecommendSubjectList",
					Handler: smshome_recommend_subject.HomeRecommendSubjectListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateRecommendSubjectSort",
					Handler: smshome_recommend_subject.UpdateRecommendSubjectSortHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateRecommendSubjectStatus",
					Handler: smshome_recommend_subject.UpdateRecommendSubjectStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sms/homeRecommendSubject"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addDept",
					Handler: sysdept.AddDeptHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteDept",
					Handler: sysdept.DeleteDeptHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryDeptDetail",
					Handler: sysdept.QueryDeptDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryDeptList",
					Handler: sysdept.QueryDeptListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateDept",
					Handler: sysdept.UpdateDeptHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateDeptStatus",
					Handler: sysdept.UpdateDeptStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sys/dept"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addDictItem",
					Handler: sysdict_item.AddDictItemHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteDictItem",
					Handler: sysdict_item.DeleteDictItemHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryDictItemDetail",
					Handler: sysdict_item.QueryDictItemDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryDictItemList",
					Handler: sysdict_item.QueryDictItemListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateDictItem",
					Handler: sysdict_item.UpdateDictItemHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateDictItemStatus",
					Handler: sysdict_item.UpdateDictItemStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sys/dictItem"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addDictType",
					Handler: sysdict_type.AddDictTypeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteDictType",
					Handler: sysdict_type.DeleteDictTypeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryDictTypeDetail",
					Handler: sysdict_type.QueryDictTypeDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryDictTypeList",
					Handler: sysdict_type.QueryDictTypeListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateDictType",
					Handler: sysdict_type.UpdateDictTypeHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateDictTypeStatus",
					Handler: sysdict_type.UpdateDictTypeStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sys/dictType"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/deleteOperateLog",
					Handler: syslog.DeleteOperateLogHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryOperateLogDetail",
					Handler: syslog.QueryOperateLogDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryOperateLogList",
					Handler: syslog.QueryOperateLogListHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sys/log"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/deleteLoginLog",
					Handler: syslog.DeleteLoginLogHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryLoginLogDetail",
					Handler: syslog.QueryLoginLogDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryLoginLogList",
					Handler: syslog.QueryLoginLogListHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sys/log"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addMenu",
					Handler: sysmenu.AddMenuHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteMenu",
					Handler: sysmenu.DeleteMenuHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMenuDetail",
					Handler: sysmenu.QueryMenuDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMenuList",
					Handler: sysmenu.QueryMenuListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateMenu",
					Handler: sysmenu.UpdateMenuHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateMenuStatus",
					Handler: sysmenu.UpdateMenuStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sys/menu"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addPost",
					Handler: syspost.AddPostHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deletePost",
					Handler: syspost.DeletePostHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryPostDetail",
					Handler: syspost.QueryPostDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryPostList",
					Handler: syspost.QueryPostListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updatePost",
					Handler: syspost.UpdatePostHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updatePostStatus",
					Handler: syspost.UpdatePostStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sys/post"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addRole",
					Handler: sysrole.AddRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/cancelAuthorization",
					Handler: sysrole.CancelAuthorizationHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteRole",
					Handler: sysrole.DeleteRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryRoleDetail",
					Handler: sysrole.QueryRoleDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryRoleList",
					Handler: sysrole.QueryRoleListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryRoleMenuList",
					Handler: sysrole.QueryRoleMenuListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryRoleUserList",
					Handler: sysrole.QueryRoleUserListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateRole",
					Handler: sysrole.UpdateRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateRoleMenuList",
					Handler: sysrole.UpdateRoleMenuListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateRoleStatus",
					Handler: sysrole.UpdateRoleStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sys/role"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/upload",
					Handler: sysupload.UploadHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sys"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addUser",
					Handler: sysuser.AddUserHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteUser",
					Handler: sysuser.DeleteUserHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/info",
					Handler: sysuser.UserInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryDeptAndPostList",
					Handler: sysuser.QueryDeptAndPostListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryUserDetail",
					Handler: sysuser.QueryUserDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryUserList",
					Handler: sysuser.QueryUserListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryUserRoleList",
					Handler: sysuser.QueryUserRoleListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/reSetPassword",
					Handler: sysuser.ReSetPasswordHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateUser",
					Handler: sysuser.UpdateUserHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateUserRoleList",
					Handler: sysuser.UpdateUserRoleListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateUserStatus",
					Handler: sysuser.UpdateUserStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/sys/user"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/user/login",
				Handler: sysuser.UserLoginHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/deleteMember",
					Handler: umsmember.DeleteMemberHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryGrowthChangeHistoryList",
					Handler: umsmember.QueryGrowthChangeHistoryListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryIntegrationChangeHistoryList",
					Handler: umsmember.QueryIntegrationChangeHistoryListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberList",
					Handler: umsmember.QueryMemberListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberLoginLogList",
					Handler: umsmember.QueryMemberLoginLogListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateMember",
					Handler: umsmember.UpdateMemberHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/ums/member"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberAddressList",
					Handler: umsmember_address.QueryMemberAddressListHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/ums/address"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addIntegrationConsumeSetting",
					Handler: umsmember_integration_setting.AddIntegrationConsumeSettingHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteIntegrationConsumeSetting",
					Handler: umsmember_integration_setting.DeleteIntegrationConsumeSettingHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryIntegrationConsumeSettingDetail",
					Handler: umsmember_integration_setting.QueryIntegrationConsumeSettingDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryIntegrationConsumeSettingList",
					Handler: umsmember_integration_setting.QueryIntegrationConsumeSettingListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateIntegrationConsumeSetting",
					Handler: umsmember_integration_setting.UpdateIntegrationConsumeSettingHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateIntegrationConsumeSettingStatus",
					Handler: umsmember_integration_setting.UpdateIntegrationConsumeSettingStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/ums/integrationConsumeSetting"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addMemberLevel",
					Handler: umsmember_level.AddMemberLevelHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteMemberLevel",
					Handler: umsmember_level.DeleteMemberLevelHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberLevelDetail",
					Handler: umsmember_level.QueryMemberLevelDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberLevelList",
					Handler: umsmember_level.QueryMemberLevelListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateMemberLevel",
					Handler: umsmember_level.UpdateMemberLevelHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateMemberLevelStatus",
					Handler: umsmember_level.UpdateMemberLevelStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/ums/level"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addMemberRuleSetting",
					Handler: umsmember_rule_setting.AddMemberRuleSettingHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteMemberRuleSetting",
					Handler: umsmember_rule_setting.DeleteMemberRuleSettingHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberRuleSettingDetail",
					Handler: umsmember_rule_setting.QueryMemberRuleSettingDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberRuleSettingList",
					Handler: umsmember_rule_setting.QueryMemberRuleSettingListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateMemberRuleSetting",
					Handler: umsmember_rule_setting.UpdateMemberRuleSettingHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateMemberRuleSettingStatus",
					Handler: umsmember_rule_setting.UpdateMemberRuleSettingStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/ums/ruleSetting"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberStatisticsInfoDetail",
					Handler: umsmember_statistics.QueryMemberStatisticsInfoDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberStatisticsInfoList",
					Handler: umsmember_statistics.QueryMemberStatisticsInfoListHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/ums/statistics"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addMemberTag",
					Handler: umsmember_tag.AddMemberTagHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteMemberTag",
					Handler: umsmember_tag.DeleteMemberTagHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberTagDetail",
					Handler: umsmember_tag.QueryMemberTagDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberTagList",
					Handler: umsmember_tag.QueryMemberTagListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateMemberTag",
					Handler: umsmember_tag.UpdateMemberTagHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateMemberTagStatus",
					Handler: umsmember_tag.UpdateMemberTagStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/ums/tag"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUrl},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addMemberTask",
					Handler: umsmember_task.AddMemberTaskHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/deleteMemberTask",
					Handler: umsmember_task.DeleteMemberTaskHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberTaskDetail",
					Handler: umsmember_task.QueryMemberTaskDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryMemberTaskList",
					Handler: umsmember_task.QueryMemberTaskListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateMemberTask",
					Handler: umsmember_task.UpdateMemberTaskHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/updateMemberTaskStatus",
					Handler: umsmember_task.UpdateMemberTaskStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/ums/task"),
	)
}
