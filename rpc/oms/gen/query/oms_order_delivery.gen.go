// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/oms/gen/model"
)

func newOmsOrderDelivery(db *gorm.DB, opts ...gen.DOOption) omsOrderDelivery {
	_omsOrderDelivery := omsOrderDelivery{}

	_omsOrderDelivery.omsOrderDeliveryDo.UseDB(db, opts...)
	_omsOrderDelivery.omsOrderDeliveryDo.UseModel(&model.OmsOrderDelivery{})

	tableName := _omsOrderDelivery.omsOrderDeliveryDo.TableName()
	_omsOrderDelivery.ALL = field.NewAsterisk(tableName)
	_omsOrderDelivery.ID = field.NewInt64(tableName, "id")
	_omsOrderDelivery.OrderID = field.NewInt64(tableName, "order_id")
	_omsOrderDelivery.OrderNo = field.NewString(tableName, "order_no")
	_omsOrderDelivery.ReceiverName = field.NewString(tableName, "receiver_name")
	_omsOrderDelivery.ReceiverPhone = field.NewString(tableName, "receiver_phone")
	_omsOrderDelivery.ReceiverProvince = field.NewString(tableName, "receiver_province")
	_omsOrderDelivery.ReceiverCity = field.NewString(tableName, "receiver_city")
	_omsOrderDelivery.ReceiverDistrict = field.NewString(tableName, "receiver_district")
	_omsOrderDelivery.ReceiverAddress = field.NewString(tableName, "receiver_address")
	_omsOrderDelivery.DeliveryCompany = field.NewString(tableName, "delivery_company")
	_omsOrderDelivery.DeliveryNo = field.NewString(tableName, "delivery_no")
	_omsOrderDelivery.CreateTime = field.NewTime(tableName, "create_time")
	_omsOrderDelivery.UpdateTime = field.NewTime(tableName, "update_time")
	_omsOrderDelivery.IsDeleted = field.NewInt32(tableName, "is_deleted")

	_omsOrderDelivery.fillFieldMap()

	return _omsOrderDelivery
}

// omsOrderDelivery 订单收货地址表
type omsOrderDelivery struct {
	omsOrderDeliveryDo omsOrderDeliveryDo

	ALL              field.Asterisk
	ID               field.Int64
	OrderID          field.Int64  // 订单ID
	OrderNo          field.String // 订单编号
	ReceiverName     field.String // 收货人姓名
	ReceiverPhone    field.String // 收货人电话
	ReceiverProvince field.String // 省份
	ReceiverCity     field.String // 城市
	ReceiverDistrict field.String // 区县
	ReceiverAddress  field.String // 详细地址
	DeliveryCompany  field.String // 物流公司
	DeliveryNo       field.String // 物流单号
	CreateTime       field.Time   // 创建时间
	UpdateTime       field.Time   // 更新时间
	IsDeleted        field.Int32  // 是否删除

	fieldMap map[string]field.Expr
}

func (o omsOrderDelivery) Table(newTableName string) *omsOrderDelivery {
	o.omsOrderDeliveryDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o omsOrderDelivery) As(alias string) *omsOrderDelivery {
	o.omsOrderDeliveryDo.DO = *(o.omsOrderDeliveryDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *omsOrderDelivery) updateTableName(table string) *omsOrderDelivery {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.OrderID = field.NewInt64(table, "order_id")
	o.OrderNo = field.NewString(table, "order_no")
	o.ReceiverName = field.NewString(table, "receiver_name")
	o.ReceiverPhone = field.NewString(table, "receiver_phone")
	o.ReceiverProvince = field.NewString(table, "receiver_province")
	o.ReceiverCity = field.NewString(table, "receiver_city")
	o.ReceiverDistrict = field.NewString(table, "receiver_district")
	o.ReceiverAddress = field.NewString(table, "receiver_address")
	o.DeliveryCompany = field.NewString(table, "delivery_company")
	o.DeliveryNo = field.NewString(table, "delivery_no")
	o.CreateTime = field.NewTime(table, "create_time")
	o.UpdateTime = field.NewTime(table, "update_time")
	o.IsDeleted = field.NewInt32(table, "is_deleted")

	o.fillFieldMap()

	return o
}

func (o *omsOrderDelivery) WithContext(ctx context.Context) IOmsOrderDeliveryDo {
	return o.omsOrderDeliveryDo.WithContext(ctx)
}

func (o omsOrderDelivery) TableName() string { return o.omsOrderDeliveryDo.TableName() }

func (o omsOrderDelivery) Alias() string { return o.omsOrderDeliveryDo.Alias() }

func (o omsOrderDelivery) Columns(cols ...field.Expr) gen.Columns {
	return o.omsOrderDeliveryDo.Columns(cols...)
}

func (o *omsOrderDelivery) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *omsOrderDelivery) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 14)
	o.fieldMap["id"] = o.ID
	o.fieldMap["order_id"] = o.OrderID
	o.fieldMap["order_no"] = o.OrderNo
	o.fieldMap["receiver_name"] = o.ReceiverName
	o.fieldMap["receiver_phone"] = o.ReceiverPhone
	o.fieldMap["receiver_province"] = o.ReceiverProvince
	o.fieldMap["receiver_city"] = o.ReceiverCity
	o.fieldMap["receiver_district"] = o.ReceiverDistrict
	o.fieldMap["receiver_address"] = o.ReceiverAddress
	o.fieldMap["delivery_company"] = o.DeliveryCompany
	o.fieldMap["delivery_no"] = o.DeliveryNo
	o.fieldMap["create_time"] = o.CreateTime
	o.fieldMap["update_time"] = o.UpdateTime
	o.fieldMap["is_deleted"] = o.IsDeleted
}

func (o omsOrderDelivery) clone(db *gorm.DB) omsOrderDelivery {
	o.omsOrderDeliveryDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o omsOrderDelivery) replaceDB(db *gorm.DB) omsOrderDelivery {
	o.omsOrderDeliveryDo.ReplaceDB(db)
	return o
}

type omsOrderDeliveryDo struct{ gen.DO }

type IOmsOrderDeliveryDo interface {
	gen.SubQuery
	Debug() IOmsOrderDeliveryDo
	WithContext(ctx context.Context) IOmsOrderDeliveryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOmsOrderDeliveryDo
	WriteDB() IOmsOrderDeliveryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOmsOrderDeliveryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOmsOrderDeliveryDo
	Not(conds ...gen.Condition) IOmsOrderDeliveryDo
	Or(conds ...gen.Condition) IOmsOrderDeliveryDo
	Select(conds ...field.Expr) IOmsOrderDeliveryDo
	Where(conds ...gen.Condition) IOmsOrderDeliveryDo
	Order(conds ...field.Expr) IOmsOrderDeliveryDo
	Distinct(cols ...field.Expr) IOmsOrderDeliveryDo
	Omit(cols ...field.Expr) IOmsOrderDeliveryDo
	Join(table schema.Tabler, on ...field.Expr) IOmsOrderDeliveryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOmsOrderDeliveryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOmsOrderDeliveryDo
	Group(cols ...field.Expr) IOmsOrderDeliveryDo
	Having(conds ...gen.Condition) IOmsOrderDeliveryDo
	Limit(limit int) IOmsOrderDeliveryDo
	Offset(offset int) IOmsOrderDeliveryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOmsOrderDeliveryDo
	Unscoped() IOmsOrderDeliveryDo
	Create(values ...*model.OmsOrderDelivery) error
	CreateInBatches(values []*model.OmsOrderDelivery, batchSize int) error
	Save(values ...*model.OmsOrderDelivery) error
	First() (*model.OmsOrderDelivery, error)
	Take() (*model.OmsOrderDelivery, error)
	Last() (*model.OmsOrderDelivery, error)
	Find() ([]*model.OmsOrderDelivery, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OmsOrderDelivery, err error)
	FindInBatches(result *[]*model.OmsOrderDelivery, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OmsOrderDelivery) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOmsOrderDeliveryDo
	Assign(attrs ...field.AssignExpr) IOmsOrderDeliveryDo
	Joins(fields ...field.RelationField) IOmsOrderDeliveryDo
	Preload(fields ...field.RelationField) IOmsOrderDeliveryDo
	FirstOrInit() (*model.OmsOrderDelivery, error)
	FirstOrCreate() (*model.OmsOrderDelivery, error)
	FindByPage(offset int, limit int) (result []*model.OmsOrderDelivery, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOmsOrderDeliveryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o omsOrderDeliveryDo) Debug() IOmsOrderDeliveryDo {
	return o.withDO(o.DO.Debug())
}

func (o omsOrderDeliveryDo) WithContext(ctx context.Context) IOmsOrderDeliveryDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o omsOrderDeliveryDo) ReadDB() IOmsOrderDeliveryDo {
	return o.Clauses(dbresolver.Read)
}

func (o omsOrderDeliveryDo) WriteDB() IOmsOrderDeliveryDo {
	return o.Clauses(dbresolver.Write)
}

func (o omsOrderDeliveryDo) Session(config *gorm.Session) IOmsOrderDeliveryDo {
	return o.withDO(o.DO.Session(config))
}

func (o omsOrderDeliveryDo) Clauses(conds ...clause.Expression) IOmsOrderDeliveryDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o omsOrderDeliveryDo) Returning(value interface{}, columns ...string) IOmsOrderDeliveryDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o omsOrderDeliveryDo) Not(conds ...gen.Condition) IOmsOrderDeliveryDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o omsOrderDeliveryDo) Or(conds ...gen.Condition) IOmsOrderDeliveryDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o omsOrderDeliveryDo) Select(conds ...field.Expr) IOmsOrderDeliveryDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o omsOrderDeliveryDo) Where(conds ...gen.Condition) IOmsOrderDeliveryDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o omsOrderDeliveryDo) Order(conds ...field.Expr) IOmsOrderDeliveryDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o omsOrderDeliveryDo) Distinct(cols ...field.Expr) IOmsOrderDeliveryDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o omsOrderDeliveryDo) Omit(cols ...field.Expr) IOmsOrderDeliveryDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o omsOrderDeliveryDo) Join(table schema.Tabler, on ...field.Expr) IOmsOrderDeliveryDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o omsOrderDeliveryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOmsOrderDeliveryDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o omsOrderDeliveryDo) RightJoin(table schema.Tabler, on ...field.Expr) IOmsOrderDeliveryDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o omsOrderDeliveryDo) Group(cols ...field.Expr) IOmsOrderDeliveryDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o omsOrderDeliveryDo) Having(conds ...gen.Condition) IOmsOrderDeliveryDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o omsOrderDeliveryDo) Limit(limit int) IOmsOrderDeliveryDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o omsOrderDeliveryDo) Offset(offset int) IOmsOrderDeliveryDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o omsOrderDeliveryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOmsOrderDeliveryDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o omsOrderDeliveryDo) Unscoped() IOmsOrderDeliveryDo {
	return o.withDO(o.DO.Unscoped())
}

func (o omsOrderDeliveryDo) Create(values ...*model.OmsOrderDelivery) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o omsOrderDeliveryDo) CreateInBatches(values []*model.OmsOrderDelivery, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o omsOrderDeliveryDo) Save(values ...*model.OmsOrderDelivery) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o omsOrderDeliveryDo) First() (*model.OmsOrderDelivery, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderDelivery), nil
	}
}

func (o omsOrderDeliveryDo) Take() (*model.OmsOrderDelivery, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderDelivery), nil
	}
}

func (o omsOrderDeliveryDo) Last() (*model.OmsOrderDelivery, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderDelivery), nil
	}
}

func (o omsOrderDeliveryDo) Find() ([]*model.OmsOrderDelivery, error) {
	result, err := o.DO.Find()
	return result.([]*model.OmsOrderDelivery), err
}

func (o omsOrderDeliveryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OmsOrderDelivery, err error) {
	buf := make([]*model.OmsOrderDelivery, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o omsOrderDeliveryDo) FindInBatches(result *[]*model.OmsOrderDelivery, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o omsOrderDeliveryDo) Attrs(attrs ...field.AssignExpr) IOmsOrderDeliveryDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o omsOrderDeliveryDo) Assign(attrs ...field.AssignExpr) IOmsOrderDeliveryDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o omsOrderDeliveryDo) Joins(fields ...field.RelationField) IOmsOrderDeliveryDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o omsOrderDeliveryDo) Preload(fields ...field.RelationField) IOmsOrderDeliveryDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o omsOrderDeliveryDo) FirstOrInit() (*model.OmsOrderDelivery, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderDelivery), nil
	}
}

func (o omsOrderDeliveryDo) FirstOrCreate() (*model.OmsOrderDelivery, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OmsOrderDelivery), nil
	}
}

func (o omsOrderDeliveryDo) FindByPage(offset int, limit int) (result []*model.OmsOrderDelivery, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o omsOrderDeliveryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o omsOrderDeliveryDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o omsOrderDeliveryDo) Delete(models ...*model.OmsOrderDelivery) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *omsOrderDeliveryDo) withDO(do gen.Dao) *omsOrderDeliveryDo {
	o.DO = *do.(*gen.DO)
	return o
}
