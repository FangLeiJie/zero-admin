// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/sms/gen/model"
)

func newSmsCouponType(db *gorm.DB, opts ...gen.DOOption) smsCouponType {
	_smsCouponType := smsCouponType{}

	_smsCouponType.smsCouponTypeDo.UseDB(db, opts...)
	_smsCouponType.smsCouponTypeDo.UseModel(&model.SmsCouponType{})

	tableName := _smsCouponType.smsCouponTypeDo.TableName()
	_smsCouponType.ALL = field.NewAsterisk(tableName)
	_smsCouponType.ID = field.NewInt64(tableName, "id")
	_smsCouponType.Name = field.NewString(tableName, "name")
	_smsCouponType.Code = field.NewString(tableName, "code")
	_smsCouponType.Description = field.NewString(tableName, "description")
	_smsCouponType.DiscountType = field.NewInt32(tableName, "discount_type")
	_smsCouponType.Status = field.NewInt32(tableName, "status")
	_smsCouponType.Sort = field.NewInt32(tableName, "sort")
	_smsCouponType.CreateBy = field.NewInt64(tableName, "create_by")
	_smsCouponType.CreateTime = field.NewTime(tableName, "create_time")
	_smsCouponType.UpdateBy = field.NewInt64(tableName, "update_by")
	_smsCouponType.UpdateTime = field.NewTime(tableName, "update_time")
	_smsCouponType.IsDeleted = field.NewInt32(tableName, "is_deleted")

	_smsCouponType.fillFieldMap()

	return _smsCouponType
}

// smsCouponType 优惠券类型表
type smsCouponType struct {
	smsCouponTypeDo smsCouponTypeDo

	ALL          field.Asterisk
	ID           field.Int64  // 主键ID
	Name         field.String // 类型名称
	Code         field.String // 类型编码
	Description  field.String // 描述
	DiscountType field.Int32  // 优惠方式：1-固定金额，2-折扣率，3-第N件特惠，4-买赠，5-特价，6-套装优惠，7-搭配优惠，8-积分抵现，9-积分倍率，10-免运费，11-运费减免，12-限时特权，13-会员特权
	Status       field.Int32  // 是否启用
	Sort         field.Int32  // 排序
	CreateBy     field.Int64  // 创建人ID
	CreateTime   field.Time   // 创建时间
	UpdateBy     field.Int64  // 更新人ID
	UpdateTime   field.Time   // 更新时间
	IsDeleted    field.Int32  // 是否删除

	fieldMap map[string]field.Expr
}

func (s smsCouponType) Table(newTableName string) *smsCouponType {
	s.smsCouponTypeDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s smsCouponType) As(alias string) *smsCouponType {
	s.smsCouponTypeDo.DO = *(s.smsCouponTypeDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *smsCouponType) updateTableName(table string) *smsCouponType {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Name = field.NewString(table, "name")
	s.Code = field.NewString(table, "code")
	s.Description = field.NewString(table, "description")
	s.DiscountType = field.NewInt32(table, "discount_type")
	s.Status = field.NewInt32(table, "status")
	s.Sort = field.NewInt32(table, "sort")
	s.CreateBy = field.NewInt64(table, "create_by")
	s.CreateTime = field.NewTime(table, "create_time")
	s.UpdateBy = field.NewInt64(table, "update_by")
	s.UpdateTime = field.NewTime(table, "update_time")
	s.IsDeleted = field.NewInt32(table, "is_deleted")

	s.fillFieldMap()

	return s
}

func (s *smsCouponType) WithContext(ctx context.Context) ISmsCouponTypeDo {
	return s.smsCouponTypeDo.WithContext(ctx)
}

func (s smsCouponType) TableName() string { return s.smsCouponTypeDo.TableName() }

func (s smsCouponType) Alias() string { return s.smsCouponTypeDo.Alias() }

func (s smsCouponType) Columns(cols ...field.Expr) gen.Columns {
	return s.smsCouponTypeDo.Columns(cols...)
}

func (s *smsCouponType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *smsCouponType) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 12)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["code"] = s.Code
	s.fieldMap["description"] = s.Description
	s.fieldMap["discount_type"] = s.DiscountType
	s.fieldMap["status"] = s.Status
	s.fieldMap["sort"] = s.Sort
	s.fieldMap["create_by"] = s.CreateBy
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["update_by"] = s.UpdateBy
	s.fieldMap["update_time"] = s.UpdateTime
	s.fieldMap["is_deleted"] = s.IsDeleted
}

func (s smsCouponType) clone(db *gorm.DB) smsCouponType {
	s.smsCouponTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s smsCouponType) replaceDB(db *gorm.DB) smsCouponType {
	s.smsCouponTypeDo.ReplaceDB(db)
	return s
}

type smsCouponTypeDo struct{ gen.DO }

type ISmsCouponTypeDo interface {
	gen.SubQuery
	Debug() ISmsCouponTypeDo
	WithContext(ctx context.Context) ISmsCouponTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISmsCouponTypeDo
	WriteDB() ISmsCouponTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISmsCouponTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISmsCouponTypeDo
	Not(conds ...gen.Condition) ISmsCouponTypeDo
	Or(conds ...gen.Condition) ISmsCouponTypeDo
	Select(conds ...field.Expr) ISmsCouponTypeDo
	Where(conds ...gen.Condition) ISmsCouponTypeDo
	Order(conds ...field.Expr) ISmsCouponTypeDo
	Distinct(cols ...field.Expr) ISmsCouponTypeDo
	Omit(cols ...field.Expr) ISmsCouponTypeDo
	Join(table schema.Tabler, on ...field.Expr) ISmsCouponTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISmsCouponTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISmsCouponTypeDo
	Group(cols ...field.Expr) ISmsCouponTypeDo
	Having(conds ...gen.Condition) ISmsCouponTypeDo
	Limit(limit int) ISmsCouponTypeDo
	Offset(offset int) ISmsCouponTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsCouponTypeDo
	Unscoped() ISmsCouponTypeDo
	Create(values ...*model.SmsCouponType) error
	CreateInBatches(values []*model.SmsCouponType, batchSize int) error
	Save(values ...*model.SmsCouponType) error
	First() (*model.SmsCouponType, error)
	Take() (*model.SmsCouponType, error)
	Last() (*model.SmsCouponType, error)
	Find() ([]*model.SmsCouponType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsCouponType, err error)
	FindInBatches(result *[]*model.SmsCouponType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SmsCouponType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISmsCouponTypeDo
	Assign(attrs ...field.AssignExpr) ISmsCouponTypeDo
	Joins(fields ...field.RelationField) ISmsCouponTypeDo
	Preload(fields ...field.RelationField) ISmsCouponTypeDo
	FirstOrInit() (*model.SmsCouponType, error)
	FirstOrCreate() (*model.SmsCouponType, error)
	FindByPage(offset int, limit int) (result []*model.SmsCouponType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISmsCouponTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s smsCouponTypeDo) Debug() ISmsCouponTypeDo {
	return s.withDO(s.DO.Debug())
}

func (s smsCouponTypeDo) WithContext(ctx context.Context) ISmsCouponTypeDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s smsCouponTypeDo) ReadDB() ISmsCouponTypeDo {
	return s.Clauses(dbresolver.Read)
}

func (s smsCouponTypeDo) WriteDB() ISmsCouponTypeDo {
	return s.Clauses(dbresolver.Write)
}

func (s smsCouponTypeDo) Session(config *gorm.Session) ISmsCouponTypeDo {
	return s.withDO(s.DO.Session(config))
}

func (s smsCouponTypeDo) Clauses(conds ...clause.Expression) ISmsCouponTypeDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s smsCouponTypeDo) Returning(value interface{}, columns ...string) ISmsCouponTypeDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s smsCouponTypeDo) Not(conds ...gen.Condition) ISmsCouponTypeDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s smsCouponTypeDo) Or(conds ...gen.Condition) ISmsCouponTypeDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s smsCouponTypeDo) Select(conds ...field.Expr) ISmsCouponTypeDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s smsCouponTypeDo) Where(conds ...gen.Condition) ISmsCouponTypeDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s smsCouponTypeDo) Order(conds ...field.Expr) ISmsCouponTypeDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s smsCouponTypeDo) Distinct(cols ...field.Expr) ISmsCouponTypeDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s smsCouponTypeDo) Omit(cols ...field.Expr) ISmsCouponTypeDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s smsCouponTypeDo) Join(table schema.Tabler, on ...field.Expr) ISmsCouponTypeDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s smsCouponTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISmsCouponTypeDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s smsCouponTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) ISmsCouponTypeDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s smsCouponTypeDo) Group(cols ...field.Expr) ISmsCouponTypeDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s smsCouponTypeDo) Having(conds ...gen.Condition) ISmsCouponTypeDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s smsCouponTypeDo) Limit(limit int) ISmsCouponTypeDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s smsCouponTypeDo) Offset(offset int) ISmsCouponTypeDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s smsCouponTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsCouponTypeDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s smsCouponTypeDo) Unscoped() ISmsCouponTypeDo {
	return s.withDO(s.DO.Unscoped())
}

func (s smsCouponTypeDo) Create(values ...*model.SmsCouponType) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s smsCouponTypeDo) CreateInBatches(values []*model.SmsCouponType, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s smsCouponTypeDo) Save(values ...*model.SmsCouponType) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s smsCouponTypeDo) First() (*model.SmsCouponType, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCouponType), nil
	}
}

func (s smsCouponTypeDo) Take() (*model.SmsCouponType, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCouponType), nil
	}
}

func (s smsCouponTypeDo) Last() (*model.SmsCouponType, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCouponType), nil
	}
}

func (s smsCouponTypeDo) Find() ([]*model.SmsCouponType, error) {
	result, err := s.DO.Find()
	return result.([]*model.SmsCouponType), err
}

func (s smsCouponTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsCouponType, err error) {
	buf := make([]*model.SmsCouponType, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s smsCouponTypeDo) FindInBatches(result *[]*model.SmsCouponType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s smsCouponTypeDo) Attrs(attrs ...field.AssignExpr) ISmsCouponTypeDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s smsCouponTypeDo) Assign(attrs ...field.AssignExpr) ISmsCouponTypeDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s smsCouponTypeDo) Joins(fields ...field.RelationField) ISmsCouponTypeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s smsCouponTypeDo) Preload(fields ...field.RelationField) ISmsCouponTypeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s smsCouponTypeDo) FirstOrInit() (*model.SmsCouponType, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCouponType), nil
	}
}

func (s smsCouponTypeDo) FirstOrCreate() (*model.SmsCouponType, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCouponType), nil
	}
}

func (s smsCouponTypeDo) FindByPage(offset int, limit int) (result []*model.SmsCouponType, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s smsCouponTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s smsCouponTypeDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s smsCouponTypeDo) Delete(models ...*model.SmsCouponType) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *smsCouponTypeDo) withDO(do gen.Dao) *smsCouponTypeDo {
	s.DO = *do.(*gen.DO)
	return s
}
