// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                     = new(Query)
	SmsCoupon             *smsCoupon
	SmsCouponRecord       *smsCouponRecord
	SmsCouponScope        *smsCouponScope
	SmsCouponType         *smsCouponType
	SmsHomeAdvertise      *smsHomeAdvertise
	SmsSeckillActivity    *smsSeckillActivity
	SmsSeckillProduct     *smsSeckillProduct
	SmsSeckillReservation *smsSeckillReservation
	SmsSeckillSession     *smsSeckillSession
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	SmsCoupon = &Q.SmsCoupon
	SmsCouponRecord = &Q.SmsCouponRecord
	SmsCouponScope = &Q.SmsCouponScope
	SmsCouponType = &Q.SmsCouponType
	SmsHomeAdvertise = &Q.SmsHomeAdvertise
	SmsSeckillActivity = &Q.SmsSeckillActivity
	SmsSeckillProduct = &Q.SmsSeckillProduct
	SmsSeckillReservation = &Q.SmsSeckillReservation
	SmsSeckillSession = &Q.SmsSeckillSession
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                    db,
		SmsCoupon:             newSmsCoupon(db, opts...),
		SmsCouponRecord:       newSmsCouponRecord(db, opts...),
		SmsCouponScope:        newSmsCouponScope(db, opts...),
		SmsCouponType:         newSmsCouponType(db, opts...),
		SmsHomeAdvertise:      newSmsHomeAdvertise(db, opts...),
		SmsSeckillActivity:    newSmsSeckillActivity(db, opts...),
		SmsSeckillProduct:     newSmsSeckillProduct(db, opts...),
		SmsSeckillReservation: newSmsSeckillReservation(db, opts...),
		SmsSeckillSession:     newSmsSeckillSession(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	SmsCoupon             smsCoupon
	SmsCouponRecord       smsCouponRecord
	SmsCouponScope        smsCouponScope
	SmsCouponType         smsCouponType
	SmsHomeAdvertise      smsHomeAdvertise
	SmsSeckillActivity    smsSeckillActivity
	SmsSeckillProduct     smsSeckillProduct
	SmsSeckillReservation smsSeckillReservation
	SmsSeckillSession     smsSeckillSession
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                    db,
		SmsCoupon:             q.SmsCoupon.clone(db),
		SmsCouponRecord:       q.SmsCouponRecord.clone(db),
		SmsCouponScope:        q.SmsCouponScope.clone(db),
		SmsCouponType:         q.SmsCouponType.clone(db),
		SmsHomeAdvertise:      q.SmsHomeAdvertise.clone(db),
		SmsSeckillActivity:    q.SmsSeckillActivity.clone(db),
		SmsSeckillProduct:     q.SmsSeckillProduct.clone(db),
		SmsSeckillReservation: q.SmsSeckillReservation.clone(db),
		SmsSeckillSession:     q.SmsSeckillSession.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                    db,
		SmsCoupon:             q.SmsCoupon.replaceDB(db),
		SmsCouponRecord:       q.SmsCouponRecord.replaceDB(db),
		SmsCouponScope:        q.SmsCouponScope.replaceDB(db),
		SmsCouponType:         q.SmsCouponType.replaceDB(db),
		SmsHomeAdvertise:      q.SmsHomeAdvertise.replaceDB(db),
		SmsSeckillActivity:    q.SmsSeckillActivity.replaceDB(db),
		SmsSeckillProduct:     q.SmsSeckillProduct.replaceDB(db),
		SmsSeckillReservation: q.SmsSeckillReservation.replaceDB(db),
		SmsSeckillSession:     q.SmsSeckillSession.replaceDB(db),
	}
}

type queryCtx struct {
	SmsCoupon             ISmsCouponDo
	SmsCouponRecord       ISmsCouponRecordDo
	SmsCouponScope        ISmsCouponScopeDo
	SmsCouponType         ISmsCouponTypeDo
	SmsHomeAdvertise      ISmsHomeAdvertiseDo
	SmsSeckillActivity    ISmsSeckillActivityDo
	SmsSeckillProduct     ISmsSeckillProductDo
	SmsSeckillReservation ISmsSeckillReservationDo
	SmsSeckillSession     ISmsSeckillSessionDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		SmsCoupon:             q.SmsCoupon.WithContext(ctx),
		SmsCouponRecord:       q.SmsCouponRecord.WithContext(ctx),
		SmsCouponScope:        q.SmsCouponScope.WithContext(ctx),
		SmsCouponType:         q.SmsCouponType.WithContext(ctx),
		SmsHomeAdvertise:      q.SmsHomeAdvertise.WithContext(ctx),
		SmsSeckillActivity:    q.SmsSeckillActivity.WithContext(ctx),
		SmsSeckillProduct:     q.SmsSeckillProduct.WithContext(ctx),
		SmsSeckillReservation: q.SmsSeckillReservation.WithContext(ctx),
		SmsSeckillSession:     q.SmsSeckillSession.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
