// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/sms/gen/model"
)

func newSmsCouponRecord(db *gorm.DB, opts ...gen.DOOption) smsCouponRecord {
	_smsCouponRecord := smsCouponRecord{}

	_smsCouponRecord.smsCouponRecordDo.UseDB(db, opts...)
	_smsCouponRecord.smsCouponRecordDo.UseModel(&model.SmsCouponRecord{})

	tableName := _smsCouponRecord.smsCouponRecordDo.TableName()
	_smsCouponRecord.ALL = field.NewAsterisk(tableName)
	_smsCouponRecord.ID = field.NewInt64(tableName, "id")
	_smsCouponRecord.CouponID = field.NewInt64(tableName, "coupon_id")
	_smsCouponRecord.MemberID = field.NewInt64(tableName, "member_id")
	_smsCouponRecord.GetTime = field.NewTime(tableName, "get_time")
	_smsCouponRecord.GetType = field.NewInt32(tableName, "get_type")
	_smsCouponRecord.UseTime = field.NewTime(tableName, "use_time")
	_smsCouponRecord.OrderID = field.NewInt64(tableName, "order_id")
	_smsCouponRecord.OrderAmount = field.NewFloat64(tableName, "order_amount")
	_smsCouponRecord.DiscountAmount = field.NewFloat64(tableName, "discount_amount")
	_smsCouponRecord.Status = field.NewInt32(tableName, "status")
	_smsCouponRecord.InvalidTime = field.NewTime(tableName, "invalid_time")
	_smsCouponRecord.InvalidReason = field.NewString(tableName, "invalid_reason")
	_smsCouponRecord.CreateTime = field.NewTime(tableName, "create_time")
	_smsCouponRecord.IsDeleted = field.NewInt32(tableName, "is_deleted")

	_smsCouponRecord.fillFieldMap()

	return _smsCouponRecord
}

// smsCouponRecord 优惠券领取记录表
type smsCouponRecord struct {
	smsCouponRecordDo smsCouponRecordDo

	ALL            field.Asterisk
	ID             field.Int64   // 主键ID
	CouponID       field.Int64   // 优惠券ID
	MemberID       field.Int64   // 用户ID
	GetTime        field.Time    // 领取时间
	GetType        field.Int32   // 获取类型：0->后台赠送；1->主动获取
	UseTime        field.Time    // 使用时间
	OrderID        field.Int64   // 使用订单ID
	OrderAmount    field.Float64 // 订单金额
	DiscountAmount field.Float64 // 优惠金额
	Status         field.Int32   // 状态：0-未使用，1-已使用，2-已过期，3-已失效
	InvalidTime    field.Time    // 失效时间
	InvalidReason  field.String  // 失效原因
	CreateTime     field.Time    // 创建时间
	IsDeleted      field.Int32   // 是否删除

	fieldMap map[string]field.Expr
}

func (s smsCouponRecord) Table(newTableName string) *smsCouponRecord {
	s.smsCouponRecordDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s smsCouponRecord) As(alias string) *smsCouponRecord {
	s.smsCouponRecordDo.DO = *(s.smsCouponRecordDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *smsCouponRecord) updateTableName(table string) *smsCouponRecord {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.CouponID = field.NewInt64(table, "coupon_id")
	s.MemberID = field.NewInt64(table, "member_id")
	s.GetTime = field.NewTime(table, "get_time")
	s.GetType = field.NewInt32(table, "get_type")
	s.UseTime = field.NewTime(table, "use_time")
	s.OrderID = field.NewInt64(table, "order_id")
	s.OrderAmount = field.NewFloat64(table, "order_amount")
	s.DiscountAmount = field.NewFloat64(table, "discount_amount")
	s.Status = field.NewInt32(table, "status")
	s.InvalidTime = field.NewTime(table, "invalid_time")
	s.InvalidReason = field.NewString(table, "invalid_reason")
	s.CreateTime = field.NewTime(table, "create_time")
	s.IsDeleted = field.NewInt32(table, "is_deleted")

	s.fillFieldMap()

	return s
}

func (s *smsCouponRecord) WithContext(ctx context.Context) ISmsCouponRecordDo {
	return s.smsCouponRecordDo.WithContext(ctx)
}

func (s smsCouponRecord) TableName() string { return s.smsCouponRecordDo.TableName() }

func (s smsCouponRecord) Alias() string { return s.smsCouponRecordDo.Alias() }

func (s smsCouponRecord) Columns(cols ...field.Expr) gen.Columns {
	return s.smsCouponRecordDo.Columns(cols...)
}

func (s *smsCouponRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *smsCouponRecord) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 14)
	s.fieldMap["id"] = s.ID
	s.fieldMap["coupon_id"] = s.CouponID
	s.fieldMap["member_id"] = s.MemberID
	s.fieldMap["get_time"] = s.GetTime
	s.fieldMap["get_type"] = s.GetType
	s.fieldMap["use_time"] = s.UseTime
	s.fieldMap["order_id"] = s.OrderID
	s.fieldMap["order_amount"] = s.OrderAmount
	s.fieldMap["discount_amount"] = s.DiscountAmount
	s.fieldMap["status"] = s.Status
	s.fieldMap["invalid_time"] = s.InvalidTime
	s.fieldMap["invalid_reason"] = s.InvalidReason
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["is_deleted"] = s.IsDeleted
}

func (s smsCouponRecord) clone(db *gorm.DB) smsCouponRecord {
	s.smsCouponRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s smsCouponRecord) replaceDB(db *gorm.DB) smsCouponRecord {
	s.smsCouponRecordDo.ReplaceDB(db)
	return s
}

type smsCouponRecordDo struct{ gen.DO }

type ISmsCouponRecordDo interface {
	gen.SubQuery
	Debug() ISmsCouponRecordDo
	WithContext(ctx context.Context) ISmsCouponRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISmsCouponRecordDo
	WriteDB() ISmsCouponRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISmsCouponRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISmsCouponRecordDo
	Not(conds ...gen.Condition) ISmsCouponRecordDo
	Or(conds ...gen.Condition) ISmsCouponRecordDo
	Select(conds ...field.Expr) ISmsCouponRecordDo
	Where(conds ...gen.Condition) ISmsCouponRecordDo
	Order(conds ...field.Expr) ISmsCouponRecordDo
	Distinct(cols ...field.Expr) ISmsCouponRecordDo
	Omit(cols ...field.Expr) ISmsCouponRecordDo
	Join(table schema.Tabler, on ...field.Expr) ISmsCouponRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISmsCouponRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISmsCouponRecordDo
	Group(cols ...field.Expr) ISmsCouponRecordDo
	Having(conds ...gen.Condition) ISmsCouponRecordDo
	Limit(limit int) ISmsCouponRecordDo
	Offset(offset int) ISmsCouponRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsCouponRecordDo
	Unscoped() ISmsCouponRecordDo
	Create(values ...*model.SmsCouponRecord) error
	CreateInBatches(values []*model.SmsCouponRecord, batchSize int) error
	Save(values ...*model.SmsCouponRecord) error
	First() (*model.SmsCouponRecord, error)
	Take() (*model.SmsCouponRecord, error)
	Last() (*model.SmsCouponRecord, error)
	Find() ([]*model.SmsCouponRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsCouponRecord, err error)
	FindInBatches(result *[]*model.SmsCouponRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SmsCouponRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISmsCouponRecordDo
	Assign(attrs ...field.AssignExpr) ISmsCouponRecordDo
	Joins(fields ...field.RelationField) ISmsCouponRecordDo
	Preload(fields ...field.RelationField) ISmsCouponRecordDo
	FirstOrInit() (*model.SmsCouponRecord, error)
	FirstOrCreate() (*model.SmsCouponRecord, error)
	FindByPage(offset int, limit int) (result []*model.SmsCouponRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISmsCouponRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s smsCouponRecordDo) Debug() ISmsCouponRecordDo {
	return s.withDO(s.DO.Debug())
}

func (s smsCouponRecordDo) WithContext(ctx context.Context) ISmsCouponRecordDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s smsCouponRecordDo) ReadDB() ISmsCouponRecordDo {
	return s.Clauses(dbresolver.Read)
}

func (s smsCouponRecordDo) WriteDB() ISmsCouponRecordDo {
	return s.Clauses(dbresolver.Write)
}

func (s smsCouponRecordDo) Session(config *gorm.Session) ISmsCouponRecordDo {
	return s.withDO(s.DO.Session(config))
}

func (s smsCouponRecordDo) Clauses(conds ...clause.Expression) ISmsCouponRecordDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s smsCouponRecordDo) Returning(value interface{}, columns ...string) ISmsCouponRecordDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s smsCouponRecordDo) Not(conds ...gen.Condition) ISmsCouponRecordDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s smsCouponRecordDo) Or(conds ...gen.Condition) ISmsCouponRecordDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s smsCouponRecordDo) Select(conds ...field.Expr) ISmsCouponRecordDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s smsCouponRecordDo) Where(conds ...gen.Condition) ISmsCouponRecordDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s smsCouponRecordDo) Order(conds ...field.Expr) ISmsCouponRecordDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s smsCouponRecordDo) Distinct(cols ...field.Expr) ISmsCouponRecordDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s smsCouponRecordDo) Omit(cols ...field.Expr) ISmsCouponRecordDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s smsCouponRecordDo) Join(table schema.Tabler, on ...field.Expr) ISmsCouponRecordDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s smsCouponRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISmsCouponRecordDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s smsCouponRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) ISmsCouponRecordDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s smsCouponRecordDo) Group(cols ...field.Expr) ISmsCouponRecordDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s smsCouponRecordDo) Having(conds ...gen.Condition) ISmsCouponRecordDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s smsCouponRecordDo) Limit(limit int) ISmsCouponRecordDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s smsCouponRecordDo) Offset(offset int) ISmsCouponRecordDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s smsCouponRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsCouponRecordDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s smsCouponRecordDo) Unscoped() ISmsCouponRecordDo {
	return s.withDO(s.DO.Unscoped())
}

func (s smsCouponRecordDo) Create(values ...*model.SmsCouponRecord) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s smsCouponRecordDo) CreateInBatches(values []*model.SmsCouponRecord, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s smsCouponRecordDo) Save(values ...*model.SmsCouponRecord) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s smsCouponRecordDo) First() (*model.SmsCouponRecord, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCouponRecord), nil
	}
}

func (s smsCouponRecordDo) Take() (*model.SmsCouponRecord, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCouponRecord), nil
	}
}

func (s smsCouponRecordDo) Last() (*model.SmsCouponRecord, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCouponRecord), nil
	}
}

func (s smsCouponRecordDo) Find() ([]*model.SmsCouponRecord, error) {
	result, err := s.DO.Find()
	return result.([]*model.SmsCouponRecord), err
}

func (s smsCouponRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsCouponRecord, err error) {
	buf := make([]*model.SmsCouponRecord, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s smsCouponRecordDo) FindInBatches(result *[]*model.SmsCouponRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s smsCouponRecordDo) Attrs(attrs ...field.AssignExpr) ISmsCouponRecordDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s smsCouponRecordDo) Assign(attrs ...field.AssignExpr) ISmsCouponRecordDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s smsCouponRecordDo) Joins(fields ...field.RelationField) ISmsCouponRecordDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s smsCouponRecordDo) Preload(fields ...field.RelationField) ISmsCouponRecordDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s smsCouponRecordDo) FirstOrInit() (*model.SmsCouponRecord, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCouponRecord), nil
	}
}

func (s smsCouponRecordDo) FirstOrCreate() (*model.SmsCouponRecord, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsCouponRecord), nil
	}
}

func (s smsCouponRecordDo) FindByPage(offset int, limit int) (result []*model.SmsCouponRecord, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s smsCouponRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s smsCouponRecordDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s smsCouponRecordDo) Delete(models ...*model.SmsCouponRecord) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *smsCouponRecordDo) withDO(do gen.Dao) *smsCouponRecordDo {
	s.DO = *do.(*gen.DO)
	return s
}
