// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/sms/gen/model"
)

func newSmsSeckillReservation(db *gorm.DB, opts ...gen.DOOption) smsSeckillReservation {
	_smsSeckillReservation := smsSeckillReservation{}

	_smsSeckillReservation.smsSeckillReservationDo.UseDB(db, opts...)
	_smsSeckillReservation.smsSeckillReservationDo.UseModel(&model.SmsSeckillReservation{})

	tableName := _smsSeckillReservation.smsSeckillReservationDo.TableName()
	_smsSeckillReservation.ALL = field.NewAsterisk(tableName)
	_smsSeckillReservation.ID = field.NewInt64(tableName, "id")
	_smsSeckillReservation.UserID = field.NewInt64(tableName, "user_id")
	_smsSeckillReservation.ActivityID = field.NewInt64(tableName, "activity_id")
	_smsSeckillReservation.ProductID = field.NewInt64(tableName, "product_id")
	_smsSeckillReservation.Status = field.NewInt32(tableName, "status")
	_smsSeckillReservation.CreateTime = field.NewTime(tableName, "create_time")
	_smsSeckillReservation.UpdateTime = field.NewTime(tableName, "update_time")
	_smsSeckillReservation.IsDeleted = field.NewInt32(tableName, "is_deleted")

	_smsSeckillReservation.fillFieldMap()

	return _smsSeckillReservation
}

// smsSeckillReservation 秒杀预约表
type smsSeckillReservation struct {
	smsSeckillReservationDo smsSeckillReservationDo

	ALL        field.Asterisk
	ID         field.Int64 // ID
	UserID     field.Int64 // 用户ID
	ActivityID field.Int64 // 活动ID
	ProductID  field.Int64 // 秒杀商品ID
	Status     field.Int32 // 状态：0-已预约，1-已参与，2-已取消
	CreateTime field.Time
	UpdateTime field.Time
	IsDeleted  field.Int32 // 是否删除

	fieldMap map[string]field.Expr
}

func (s smsSeckillReservation) Table(newTableName string) *smsSeckillReservation {
	s.smsSeckillReservationDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s smsSeckillReservation) As(alias string) *smsSeckillReservation {
	s.smsSeckillReservationDo.DO = *(s.smsSeckillReservationDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *smsSeckillReservation) updateTableName(table string) *smsSeckillReservation {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.UserID = field.NewInt64(table, "user_id")
	s.ActivityID = field.NewInt64(table, "activity_id")
	s.ProductID = field.NewInt64(table, "product_id")
	s.Status = field.NewInt32(table, "status")
	s.CreateTime = field.NewTime(table, "create_time")
	s.UpdateTime = field.NewTime(table, "update_time")
	s.IsDeleted = field.NewInt32(table, "is_deleted")

	s.fillFieldMap()

	return s
}

func (s *smsSeckillReservation) WithContext(ctx context.Context) ISmsSeckillReservationDo {
	return s.smsSeckillReservationDo.WithContext(ctx)
}

func (s smsSeckillReservation) TableName() string { return s.smsSeckillReservationDo.TableName() }

func (s smsSeckillReservation) Alias() string { return s.smsSeckillReservationDo.Alias() }

func (s smsSeckillReservation) Columns(cols ...field.Expr) gen.Columns {
	return s.smsSeckillReservationDo.Columns(cols...)
}

func (s *smsSeckillReservation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *smsSeckillReservation) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id"] = s.ID
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["activity_id"] = s.ActivityID
	s.fieldMap["product_id"] = s.ProductID
	s.fieldMap["status"] = s.Status
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["update_time"] = s.UpdateTime
	s.fieldMap["is_deleted"] = s.IsDeleted
}

func (s smsSeckillReservation) clone(db *gorm.DB) smsSeckillReservation {
	s.smsSeckillReservationDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s smsSeckillReservation) replaceDB(db *gorm.DB) smsSeckillReservation {
	s.smsSeckillReservationDo.ReplaceDB(db)
	return s
}

type smsSeckillReservationDo struct{ gen.DO }

type ISmsSeckillReservationDo interface {
	gen.SubQuery
	Debug() ISmsSeckillReservationDo
	WithContext(ctx context.Context) ISmsSeckillReservationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISmsSeckillReservationDo
	WriteDB() ISmsSeckillReservationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISmsSeckillReservationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISmsSeckillReservationDo
	Not(conds ...gen.Condition) ISmsSeckillReservationDo
	Or(conds ...gen.Condition) ISmsSeckillReservationDo
	Select(conds ...field.Expr) ISmsSeckillReservationDo
	Where(conds ...gen.Condition) ISmsSeckillReservationDo
	Order(conds ...field.Expr) ISmsSeckillReservationDo
	Distinct(cols ...field.Expr) ISmsSeckillReservationDo
	Omit(cols ...field.Expr) ISmsSeckillReservationDo
	Join(table schema.Tabler, on ...field.Expr) ISmsSeckillReservationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISmsSeckillReservationDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISmsSeckillReservationDo
	Group(cols ...field.Expr) ISmsSeckillReservationDo
	Having(conds ...gen.Condition) ISmsSeckillReservationDo
	Limit(limit int) ISmsSeckillReservationDo
	Offset(offset int) ISmsSeckillReservationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsSeckillReservationDo
	Unscoped() ISmsSeckillReservationDo
	Create(values ...*model.SmsSeckillReservation) error
	CreateInBatches(values []*model.SmsSeckillReservation, batchSize int) error
	Save(values ...*model.SmsSeckillReservation) error
	First() (*model.SmsSeckillReservation, error)
	Take() (*model.SmsSeckillReservation, error)
	Last() (*model.SmsSeckillReservation, error)
	Find() ([]*model.SmsSeckillReservation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsSeckillReservation, err error)
	FindInBatches(result *[]*model.SmsSeckillReservation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SmsSeckillReservation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISmsSeckillReservationDo
	Assign(attrs ...field.AssignExpr) ISmsSeckillReservationDo
	Joins(fields ...field.RelationField) ISmsSeckillReservationDo
	Preload(fields ...field.RelationField) ISmsSeckillReservationDo
	FirstOrInit() (*model.SmsSeckillReservation, error)
	FirstOrCreate() (*model.SmsSeckillReservation, error)
	FindByPage(offset int, limit int) (result []*model.SmsSeckillReservation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISmsSeckillReservationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s smsSeckillReservationDo) Debug() ISmsSeckillReservationDo {
	return s.withDO(s.DO.Debug())
}

func (s smsSeckillReservationDo) WithContext(ctx context.Context) ISmsSeckillReservationDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s smsSeckillReservationDo) ReadDB() ISmsSeckillReservationDo {
	return s.Clauses(dbresolver.Read)
}

func (s smsSeckillReservationDo) WriteDB() ISmsSeckillReservationDo {
	return s.Clauses(dbresolver.Write)
}

func (s smsSeckillReservationDo) Session(config *gorm.Session) ISmsSeckillReservationDo {
	return s.withDO(s.DO.Session(config))
}

func (s smsSeckillReservationDo) Clauses(conds ...clause.Expression) ISmsSeckillReservationDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s smsSeckillReservationDo) Returning(value interface{}, columns ...string) ISmsSeckillReservationDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s smsSeckillReservationDo) Not(conds ...gen.Condition) ISmsSeckillReservationDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s smsSeckillReservationDo) Or(conds ...gen.Condition) ISmsSeckillReservationDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s smsSeckillReservationDo) Select(conds ...field.Expr) ISmsSeckillReservationDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s smsSeckillReservationDo) Where(conds ...gen.Condition) ISmsSeckillReservationDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s smsSeckillReservationDo) Order(conds ...field.Expr) ISmsSeckillReservationDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s smsSeckillReservationDo) Distinct(cols ...field.Expr) ISmsSeckillReservationDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s smsSeckillReservationDo) Omit(cols ...field.Expr) ISmsSeckillReservationDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s smsSeckillReservationDo) Join(table schema.Tabler, on ...field.Expr) ISmsSeckillReservationDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s smsSeckillReservationDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISmsSeckillReservationDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s smsSeckillReservationDo) RightJoin(table schema.Tabler, on ...field.Expr) ISmsSeckillReservationDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s smsSeckillReservationDo) Group(cols ...field.Expr) ISmsSeckillReservationDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s smsSeckillReservationDo) Having(conds ...gen.Condition) ISmsSeckillReservationDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s smsSeckillReservationDo) Limit(limit int) ISmsSeckillReservationDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s smsSeckillReservationDo) Offset(offset int) ISmsSeckillReservationDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s smsSeckillReservationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsSeckillReservationDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s smsSeckillReservationDo) Unscoped() ISmsSeckillReservationDo {
	return s.withDO(s.DO.Unscoped())
}

func (s smsSeckillReservationDo) Create(values ...*model.SmsSeckillReservation) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s smsSeckillReservationDo) CreateInBatches(values []*model.SmsSeckillReservation, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s smsSeckillReservationDo) Save(values ...*model.SmsSeckillReservation) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s smsSeckillReservationDo) First() (*model.SmsSeckillReservation, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsSeckillReservation), nil
	}
}

func (s smsSeckillReservationDo) Take() (*model.SmsSeckillReservation, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsSeckillReservation), nil
	}
}

func (s smsSeckillReservationDo) Last() (*model.SmsSeckillReservation, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsSeckillReservation), nil
	}
}

func (s smsSeckillReservationDo) Find() ([]*model.SmsSeckillReservation, error) {
	result, err := s.DO.Find()
	return result.([]*model.SmsSeckillReservation), err
}

func (s smsSeckillReservationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsSeckillReservation, err error) {
	buf := make([]*model.SmsSeckillReservation, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s smsSeckillReservationDo) FindInBatches(result *[]*model.SmsSeckillReservation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s smsSeckillReservationDo) Attrs(attrs ...field.AssignExpr) ISmsSeckillReservationDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s smsSeckillReservationDo) Assign(attrs ...field.AssignExpr) ISmsSeckillReservationDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s smsSeckillReservationDo) Joins(fields ...field.RelationField) ISmsSeckillReservationDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s smsSeckillReservationDo) Preload(fields ...field.RelationField) ISmsSeckillReservationDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s smsSeckillReservationDo) FirstOrInit() (*model.SmsSeckillReservation, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsSeckillReservation), nil
	}
}

func (s smsSeckillReservationDo) FirstOrCreate() (*model.SmsSeckillReservation, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsSeckillReservation), nil
	}
}

func (s smsSeckillReservationDo) FindByPage(offset int, limit int) (result []*model.SmsSeckillReservation, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s smsSeckillReservationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s smsSeckillReservationDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s smsSeckillReservationDo) Delete(models ...*model.SmsSeckillReservation) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *smsSeckillReservationDo) withDO(do gen.Dao) *smsSeckillReservationDo {
	s.DO = *do.(*gen.DO)
	return s
}
