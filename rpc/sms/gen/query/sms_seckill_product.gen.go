// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/sms/gen/model"
)

func newSmsSeckillProduct(db *gorm.DB, opts ...gen.DOOption) smsSeckillProduct {
	_smsSeckillProduct := smsSeckillProduct{}

	_smsSeckillProduct.smsSeckillProductDo.UseDB(db, opts...)
	_smsSeckillProduct.smsSeckillProductDo.UseModel(&model.SmsSeckillProduct{})

	tableName := _smsSeckillProduct.smsSeckillProductDo.TableName()
	_smsSeckillProduct.ALL = field.NewAsterisk(tableName)
	_smsSeckillProduct.ID = field.NewInt64(tableName, "id")
	_smsSeckillProduct.ActivityID = field.NewInt64(tableName, "activity_id")
	_smsSeckillProduct.SessionID = field.NewInt64(tableName, "session_id")
	_smsSeckillProduct.SkuID = field.NewInt64(tableName, "sku_id")
	_smsSeckillProduct.SkuName = field.NewString(tableName, "sku_name")
	_smsSeckillProduct.SeckillPrice = field.NewFloat64(tableName, "seckill_price")
	_smsSeckillProduct.SeckillStock = field.NewInt32(tableName, "seckill_stock")
	_smsSeckillProduct.StockLocked = field.NewInt32(tableName, "stock_locked")
	_smsSeckillProduct.PerLimit = field.NewInt32(tableName, "per_limit")
	_smsSeckillProduct.Sort = field.NewInt32(tableName, "sort")
	_smsSeckillProduct.Status = field.NewInt32(tableName, "status")
	_smsSeckillProduct.CreateBy = field.NewInt64(tableName, "create_by")
	_smsSeckillProduct.CreateTime = field.NewTime(tableName, "create_time")
	_smsSeckillProduct.UpdateBy = field.NewInt64(tableName, "update_by")
	_smsSeckillProduct.UpdateTime = field.NewTime(tableName, "update_time")
	_smsSeckillProduct.IsDeleted = field.NewInt32(tableName, "is_deleted")

	_smsSeckillProduct.fillFieldMap()

	return _smsSeckillProduct
}

// smsSeckillProduct 秒杀商品表
type smsSeckillProduct struct {
	smsSeckillProductDo smsSeckillProductDo

	ALL          field.Asterisk
	ID           field.Int64   // ID
	ActivityID   field.Int64   // 活动ID
	SessionID    field.Int64   // 秒杀场次ID
	SkuID        field.Int64   // 商品SKU ID
	SkuName      field.String  // 商品名称
	SeckillPrice field.Float64 // 秒杀价格
	SeckillStock field.Int32   // 秒杀库存
	StockLocked  field.Int32   // 锁定库存
	PerLimit     field.Int32   // 每人限购数量
	Sort         field.Int32   // 排序
	Status       field.Int32   // 状态：0-未上架，1-已上架
	CreateBy     field.Int64   // 创建人ID
	CreateTime   field.Time    // 创建时间
	UpdateBy     field.Int64   // 更新人ID
	UpdateTime   field.Time    // 更新时间
	IsDeleted    field.Int32   // 是否删除

	fieldMap map[string]field.Expr
}

func (s smsSeckillProduct) Table(newTableName string) *smsSeckillProduct {
	s.smsSeckillProductDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s smsSeckillProduct) As(alias string) *smsSeckillProduct {
	s.smsSeckillProductDo.DO = *(s.smsSeckillProductDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *smsSeckillProduct) updateTableName(table string) *smsSeckillProduct {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.ActivityID = field.NewInt64(table, "activity_id")
	s.SessionID = field.NewInt64(table, "session_id")
	s.SkuID = field.NewInt64(table, "sku_id")
	s.SkuName = field.NewString(table, "sku_name")
	s.SeckillPrice = field.NewFloat64(table, "seckill_price")
	s.SeckillStock = field.NewInt32(table, "seckill_stock")
	s.StockLocked = field.NewInt32(table, "stock_locked")
	s.PerLimit = field.NewInt32(table, "per_limit")
	s.Sort = field.NewInt32(table, "sort")
	s.Status = field.NewInt32(table, "status")
	s.CreateBy = field.NewInt64(table, "create_by")
	s.CreateTime = field.NewTime(table, "create_time")
	s.UpdateBy = field.NewInt64(table, "update_by")
	s.UpdateTime = field.NewTime(table, "update_time")
	s.IsDeleted = field.NewInt32(table, "is_deleted")

	s.fillFieldMap()

	return s
}

func (s *smsSeckillProduct) WithContext(ctx context.Context) ISmsSeckillProductDo {
	return s.smsSeckillProductDo.WithContext(ctx)
}

func (s smsSeckillProduct) TableName() string { return s.smsSeckillProductDo.TableName() }

func (s smsSeckillProduct) Alias() string { return s.smsSeckillProductDo.Alias() }

func (s smsSeckillProduct) Columns(cols ...field.Expr) gen.Columns {
	return s.smsSeckillProductDo.Columns(cols...)
}

func (s *smsSeckillProduct) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *smsSeckillProduct) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 16)
	s.fieldMap["id"] = s.ID
	s.fieldMap["activity_id"] = s.ActivityID
	s.fieldMap["session_id"] = s.SessionID
	s.fieldMap["sku_id"] = s.SkuID
	s.fieldMap["sku_name"] = s.SkuName
	s.fieldMap["seckill_price"] = s.SeckillPrice
	s.fieldMap["seckill_stock"] = s.SeckillStock
	s.fieldMap["stock_locked"] = s.StockLocked
	s.fieldMap["per_limit"] = s.PerLimit
	s.fieldMap["sort"] = s.Sort
	s.fieldMap["status"] = s.Status
	s.fieldMap["create_by"] = s.CreateBy
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["update_by"] = s.UpdateBy
	s.fieldMap["update_time"] = s.UpdateTime
	s.fieldMap["is_deleted"] = s.IsDeleted
}

func (s smsSeckillProduct) clone(db *gorm.DB) smsSeckillProduct {
	s.smsSeckillProductDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s smsSeckillProduct) replaceDB(db *gorm.DB) smsSeckillProduct {
	s.smsSeckillProductDo.ReplaceDB(db)
	return s
}

type smsSeckillProductDo struct{ gen.DO }

type ISmsSeckillProductDo interface {
	gen.SubQuery
	Debug() ISmsSeckillProductDo
	WithContext(ctx context.Context) ISmsSeckillProductDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISmsSeckillProductDo
	WriteDB() ISmsSeckillProductDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISmsSeckillProductDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISmsSeckillProductDo
	Not(conds ...gen.Condition) ISmsSeckillProductDo
	Or(conds ...gen.Condition) ISmsSeckillProductDo
	Select(conds ...field.Expr) ISmsSeckillProductDo
	Where(conds ...gen.Condition) ISmsSeckillProductDo
	Order(conds ...field.Expr) ISmsSeckillProductDo
	Distinct(cols ...field.Expr) ISmsSeckillProductDo
	Omit(cols ...field.Expr) ISmsSeckillProductDo
	Join(table schema.Tabler, on ...field.Expr) ISmsSeckillProductDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISmsSeckillProductDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISmsSeckillProductDo
	Group(cols ...field.Expr) ISmsSeckillProductDo
	Having(conds ...gen.Condition) ISmsSeckillProductDo
	Limit(limit int) ISmsSeckillProductDo
	Offset(offset int) ISmsSeckillProductDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsSeckillProductDo
	Unscoped() ISmsSeckillProductDo
	Create(values ...*model.SmsSeckillProduct) error
	CreateInBatches(values []*model.SmsSeckillProduct, batchSize int) error
	Save(values ...*model.SmsSeckillProduct) error
	First() (*model.SmsSeckillProduct, error)
	Take() (*model.SmsSeckillProduct, error)
	Last() (*model.SmsSeckillProduct, error)
	Find() ([]*model.SmsSeckillProduct, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsSeckillProduct, err error)
	FindInBatches(result *[]*model.SmsSeckillProduct, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SmsSeckillProduct) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISmsSeckillProductDo
	Assign(attrs ...field.AssignExpr) ISmsSeckillProductDo
	Joins(fields ...field.RelationField) ISmsSeckillProductDo
	Preload(fields ...field.RelationField) ISmsSeckillProductDo
	FirstOrInit() (*model.SmsSeckillProduct, error)
	FirstOrCreate() (*model.SmsSeckillProduct, error)
	FindByPage(offset int, limit int) (result []*model.SmsSeckillProduct, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISmsSeckillProductDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s smsSeckillProductDo) Debug() ISmsSeckillProductDo {
	return s.withDO(s.DO.Debug())
}

func (s smsSeckillProductDo) WithContext(ctx context.Context) ISmsSeckillProductDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s smsSeckillProductDo) ReadDB() ISmsSeckillProductDo {
	return s.Clauses(dbresolver.Read)
}

func (s smsSeckillProductDo) WriteDB() ISmsSeckillProductDo {
	return s.Clauses(dbresolver.Write)
}

func (s smsSeckillProductDo) Session(config *gorm.Session) ISmsSeckillProductDo {
	return s.withDO(s.DO.Session(config))
}

func (s smsSeckillProductDo) Clauses(conds ...clause.Expression) ISmsSeckillProductDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s smsSeckillProductDo) Returning(value interface{}, columns ...string) ISmsSeckillProductDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s smsSeckillProductDo) Not(conds ...gen.Condition) ISmsSeckillProductDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s smsSeckillProductDo) Or(conds ...gen.Condition) ISmsSeckillProductDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s smsSeckillProductDo) Select(conds ...field.Expr) ISmsSeckillProductDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s smsSeckillProductDo) Where(conds ...gen.Condition) ISmsSeckillProductDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s smsSeckillProductDo) Order(conds ...field.Expr) ISmsSeckillProductDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s smsSeckillProductDo) Distinct(cols ...field.Expr) ISmsSeckillProductDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s smsSeckillProductDo) Omit(cols ...field.Expr) ISmsSeckillProductDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s smsSeckillProductDo) Join(table schema.Tabler, on ...field.Expr) ISmsSeckillProductDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s smsSeckillProductDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISmsSeckillProductDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s smsSeckillProductDo) RightJoin(table schema.Tabler, on ...field.Expr) ISmsSeckillProductDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s smsSeckillProductDo) Group(cols ...field.Expr) ISmsSeckillProductDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s smsSeckillProductDo) Having(conds ...gen.Condition) ISmsSeckillProductDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s smsSeckillProductDo) Limit(limit int) ISmsSeckillProductDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s smsSeckillProductDo) Offset(offset int) ISmsSeckillProductDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s smsSeckillProductDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsSeckillProductDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s smsSeckillProductDo) Unscoped() ISmsSeckillProductDo {
	return s.withDO(s.DO.Unscoped())
}

func (s smsSeckillProductDo) Create(values ...*model.SmsSeckillProduct) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s smsSeckillProductDo) CreateInBatches(values []*model.SmsSeckillProduct, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s smsSeckillProductDo) Save(values ...*model.SmsSeckillProduct) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s smsSeckillProductDo) First() (*model.SmsSeckillProduct, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsSeckillProduct), nil
	}
}

func (s smsSeckillProductDo) Take() (*model.SmsSeckillProduct, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsSeckillProduct), nil
	}
}

func (s smsSeckillProductDo) Last() (*model.SmsSeckillProduct, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsSeckillProduct), nil
	}
}

func (s smsSeckillProductDo) Find() ([]*model.SmsSeckillProduct, error) {
	result, err := s.DO.Find()
	return result.([]*model.SmsSeckillProduct), err
}

func (s smsSeckillProductDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsSeckillProduct, err error) {
	buf := make([]*model.SmsSeckillProduct, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s smsSeckillProductDo) FindInBatches(result *[]*model.SmsSeckillProduct, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s smsSeckillProductDo) Attrs(attrs ...field.AssignExpr) ISmsSeckillProductDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s smsSeckillProductDo) Assign(attrs ...field.AssignExpr) ISmsSeckillProductDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s smsSeckillProductDo) Joins(fields ...field.RelationField) ISmsSeckillProductDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s smsSeckillProductDo) Preload(fields ...field.RelationField) ISmsSeckillProductDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s smsSeckillProductDo) FirstOrInit() (*model.SmsSeckillProduct, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsSeckillProduct), nil
	}
}

func (s smsSeckillProductDo) FirstOrCreate() (*model.SmsSeckillProduct, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsSeckillProduct), nil
	}
}

func (s smsSeckillProductDo) FindByPage(offset int, limit int) (result []*model.SmsSeckillProduct, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s smsSeckillProductDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s smsSeckillProductDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s smsSeckillProductDo) Delete(models ...*model.SmsSeckillProduct) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *smsSeckillProductDo) withDO(do gen.Dao) *smsSeckillProductDo {
	s.DO = *do.(*gen.DO)
	return s
}
