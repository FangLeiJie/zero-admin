// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.4
// Source: sms.proto

package server

import (
	"context"

	"github.com/feihua/zero-admin/rpc/sms/internal/logic/seckillsessionservice"
	"github.com/feihua/zero-admin/rpc/sms/internal/svc"
	"github.com/feihua/zero-admin/rpc/sms/smsclient"
)

type SeckillSessionServiceServer struct {
	svcCtx *svc.ServiceContext
	smsclient.UnimplementedSeckillSessionServiceServer
}

func NewSeckillSessionServiceServer(svcCtx *svc.ServiceContext) *SeckillSessionServiceServer {
	return &SeckillSessionServiceServer{
		svcCtx: svcCtx,
	}
}

// 添加秒杀场次
func (s *SeckillSessionServiceServer) AddSeckillSession(ctx context.Context, in *smsclient.AddSeckillSessionReq) (*smsclient.AddSeckillSessionResp, error) {
	l := seckillsessionservicelogic.NewAddSeckillSessionLogic(ctx, s.svcCtx)
	return l.AddSeckillSession(in)
}

// 删除秒杀场次
func (s *SeckillSessionServiceServer) DeleteSeckillSession(ctx context.Context, in *smsclient.DeleteSeckillSessionReq) (*smsclient.DeleteSeckillSessionResp, error) {
	l := seckillsessionservicelogic.NewDeleteSeckillSessionLogic(ctx, s.svcCtx)
	return l.DeleteSeckillSession(in)
}

// 更新秒杀场次
func (s *SeckillSessionServiceServer) UpdateSeckillSession(ctx context.Context, in *smsclient.UpdateSeckillSessionReq) (*smsclient.UpdateSeckillSessionResp, error) {
	l := seckillsessionservicelogic.NewUpdateSeckillSessionLogic(ctx, s.svcCtx)
	return l.UpdateSeckillSession(in)
}

// 更新秒杀场次状态
func (s *SeckillSessionServiceServer) UpdateSeckillSessionStatus(ctx context.Context, in *smsclient.UpdateSeckillSessionStatusReq) (*smsclient.UpdateSeckillSessionStatusResp, error) {
	l := seckillsessionservicelogic.NewUpdateSeckillSessionStatusLogic(ctx, s.svcCtx)
	return l.UpdateSeckillSessionStatus(in)
}

// 查询秒杀场次详情
func (s *SeckillSessionServiceServer) QuerySeckillSessionDetail(ctx context.Context, in *smsclient.QuerySeckillSessionDetailReq) (*smsclient.QuerySeckillSessionDetailResp, error) {
	l := seckillsessionservicelogic.NewQuerySeckillSessionDetailLogic(ctx, s.svcCtx)
	return l.QuerySeckillSessionDetail(in)
}

// 查询秒杀场次列表
func (s *SeckillSessionServiceServer) QuerySeckillSessionList(ctx context.Context, in *smsclient.QuerySeckillSessionListReq) (*smsclient.QuerySeckillSessionListResp, error) {
	l := seckillsessionservicelogic.NewQuerySeckillSessionListLogic(ctx, s.svcCtx)
	return l.QuerySeckillSessionList(in)
}

// 根据时间查询限时购场次
func (s *SeckillSessionServiceServer) QuerySeckillSessionListByTime(ctx context.Context, in *smsclient.QuerySeckillSessionListByTimeReq) (*smsclient.QuerySeckillSessionListByTimeResp, error) {
	l := seckillsessionservicelogic.NewQuerySeckillSessionListByTimeLogic(ctx, s.svcCtx)
	return l.QuerySeckillSessionListByTime(in)
}
