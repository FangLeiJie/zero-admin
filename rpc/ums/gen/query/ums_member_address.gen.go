// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/ums/gen/model"
)

func newUmsMemberAddress(db *gorm.DB, opts ...gen.DOOption) umsMemberAddress {
	_umsMemberAddress := umsMemberAddress{}

	_umsMemberAddress.umsMemberAddressDo.UseDB(db, opts...)
	_umsMemberAddress.umsMemberAddressDo.UseModel(&model.UmsMemberAddress{})

	tableName := _umsMemberAddress.umsMemberAddressDo.TableName()
	_umsMemberAddress.ALL = field.NewAsterisk(tableName)
	_umsMemberAddress.ID = field.NewInt64(tableName, "id")
	_umsMemberAddress.MemberID = field.NewInt64(tableName, "member_id")
	_umsMemberAddress.ReceiverName = field.NewString(tableName, "receiver_name")
	_umsMemberAddress.ReceiverPhone = field.NewString(tableName, "receiver_phone")
	_umsMemberAddress.Province = field.NewString(tableName, "province")
	_umsMemberAddress.City = field.NewString(tableName, "city")
	_umsMemberAddress.District = field.NewString(tableName, "district")
	_umsMemberAddress.DetailAddress = field.NewString(tableName, "detail_address")
	_umsMemberAddress.PostalCode = field.NewString(tableName, "postal_code")
	_umsMemberAddress.Tag = field.NewString(tableName, "tag")
	_umsMemberAddress.IsDefault = field.NewInt32(tableName, "is_default")
	_umsMemberAddress.CreateTime = field.NewTime(tableName, "create_time")
	_umsMemberAddress.UpdateTime = field.NewTime(tableName, "update_time")
	_umsMemberAddress.IsDeleted = field.NewInt32(tableName, "is_deleted")

	_umsMemberAddress.fillFieldMap()

	return _umsMemberAddress
}

// umsMemberAddress 会员收货地址表
type umsMemberAddress struct {
	umsMemberAddressDo umsMemberAddressDo

	ALL           field.Asterisk
	ID            field.Int64  // 主键ID
	MemberID      field.Int64  // 会员ID
	ReceiverName  field.String // 收货人姓名
	ReceiverPhone field.String // 收货人电话
	Province      field.String // 省份
	City          field.String // 城市
	District      field.String // 区县
	DetailAddress field.String // 详细地址
	PostalCode    field.String // 邮政编码
	Tag           field.String // 地址标签：家、公司等
	IsDefault     field.Int32  // 是否默认地址
	CreateTime    field.Time   // 创建时间
	UpdateTime    field.Time   // 更新时间
	IsDeleted     field.Int32  // 是否删除

	fieldMap map[string]field.Expr
}

func (u umsMemberAddress) Table(newTableName string) *umsMemberAddress {
	u.umsMemberAddressDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u umsMemberAddress) As(alias string) *umsMemberAddress {
	u.umsMemberAddressDo.DO = *(u.umsMemberAddressDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *umsMemberAddress) updateTableName(table string) *umsMemberAddress {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.MemberID = field.NewInt64(table, "member_id")
	u.ReceiverName = field.NewString(table, "receiver_name")
	u.ReceiverPhone = field.NewString(table, "receiver_phone")
	u.Province = field.NewString(table, "province")
	u.City = field.NewString(table, "city")
	u.District = field.NewString(table, "district")
	u.DetailAddress = field.NewString(table, "detail_address")
	u.PostalCode = field.NewString(table, "postal_code")
	u.Tag = field.NewString(table, "tag")
	u.IsDefault = field.NewInt32(table, "is_default")
	u.CreateTime = field.NewTime(table, "create_time")
	u.UpdateTime = field.NewTime(table, "update_time")
	u.IsDeleted = field.NewInt32(table, "is_deleted")

	u.fillFieldMap()

	return u
}

func (u *umsMemberAddress) WithContext(ctx context.Context) IUmsMemberAddressDo {
	return u.umsMemberAddressDo.WithContext(ctx)
}

func (u umsMemberAddress) TableName() string { return u.umsMemberAddressDo.TableName() }

func (u umsMemberAddress) Alias() string { return u.umsMemberAddressDo.Alias() }

func (u umsMemberAddress) Columns(cols ...field.Expr) gen.Columns {
	return u.umsMemberAddressDo.Columns(cols...)
}

func (u *umsMemberAddress) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *umsMemberAddress) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 14)
	u.fieldMap["id"] = u.ID
	u.fieldMap["member_id"] = u.MemberID
	u.fieldMap["receiver_name"] = u.ReceiverName
	u.fieldMap["receiver_phone"] = u.ReceiverPhone
	u.fieldMap["province"] = u.Province
	u.fieldMap["city"] = u.City
	u.fieldMap["district"] = u.District
	u.fieldMap["detail_address"] = u.DetailAddress
	u.fieldMap["postal_code"] = u.PostalCode
	u.fieldMap["tag"] = u.Tag
	u.fieldMap["is_default"] = u.IsDefault
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["update_time"] = u.UpdateTime
	u.fieldMap["is_deleted"] = u.IsDeleted
}

func (u umsMemberAddress) clone(db *gorm.DB) umsMemberAddress {
	u.umsMemberAddressDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u umsMemberAddress) replaceDB(db *gorm.DB) umsMemberAddress {
	u.umsMemberAddressDo.ReplaceDB(db)
	return u
}

type umsMemberAddressDo struct{ gen.DO }

type IUmsMemberAddressDo interface {
	gen.SubQuery
	Debug() IUmsMemberAddressDo
	WithContext(ctx context.Context) IUmsMemberAddressDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUmsMemberAddressDo
	WriteDB() IUmsMemberAddressDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUmsMemberAddressDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUmsMemberAddressDo
	Not(conds ...gen.Condition) IUmsMemberAddressDo
	Or(conds ...gen.Condition) IUmsMemberAddressDo
	Select(conds ...field.Expr) IUmsMemberAddressDo
	Where(conds ...gen.Condition) IUmsMemberAddressDo
	Order(conds ...field.Expr) IUmsMemberAddressDo
	Distinct(cols ...field.Expr) IUmsMemberAddressDo
	Omit(cols ...field.Expr) IUmsMemberAddressDo
	Join(table schema.Tabler, on ...field.Expr) IUmsMemberAddressDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUmsMemberAddressDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUmsMemberAddressDo
	Group(cols ...field.Expr) IUmsMemberAddressDo
	Having(conds ...gen.Condition) IUmsMemberAddressDo
	Limit(limit int) IUmsMemberAddressDo
	Offset(offset int) IUmsMemberAddressDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsMemberAddressDo
	Unscoped() IUmsMemberAddressDo
	Create(values ...*model.UmsMemberAddress) error
	CreateInBatches(values []*model.UmsMemberAddress, batchSize int) error
	Save(values ...*model.UmsMemberAddress) error
	First() (*model.UmsMemberAddress, error)
	Take() (*model.UmsMemberAddress, error)
	Last() (*model.UmsMemberAddress, error)
	Find() ([]*model.UmsMemberAddress, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsMemberAddress, err error)
	FindInBatches(result *[]*model.UmsMemberAddress, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UmsMemberAddress) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUmsMemberAddressDo
	Assign(attrs ...field.AssignExpr) IUmsMemberAddressDo
	Joins(fields ...field.RelationField) IUmsMemberAddressDo
	Preload(fields ...field.RelationField) IUmsMemberAddressDo
	FirstOrInit() (*model.UmsMemberAddress, error)
	FirstOrCreate() (*model.UmsMemberAddress, error)
	FindByPage(offset int, limit int) (result []*model.UmsMemberAddress, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUmsMemberAddressDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u umsMemberAddressDo) Debug() IUmsMemberAddressDo {
	return u.withDO(u.DO.Debug())
}

func (u umsMemberAddressDo) WithContext(ctx context.Context) IUmsMemberAddressDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u umsMemberAddressDo) ReadDB() IUmsMemberAddressDo {
	return u.Clauses(dbresolver.Read)
}

func (u umsMemberAddressDo) WriteDB() IUmsMemberAddressDo {
	return u.Clauses(dbresolver.Write)
}

func (u umsMemberAddressDo) Session(config *gorm.Session) IUmsMemberAddressDo {
	return u.withDO(u.DO.Session(config))
}

func (u umsMemberAddressDo) Clauses(conds ...clause.Expression) IUmsMemberAddressDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u umsMemberAddressDo) Returning(value interface{}, columns ...string) IUmsMemberAddressDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u umsMemberAddressDo) Not(conds ...gen.Condition) IUmsMemberAddressDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u umsMemberAddressDo) Or(conds ...gen.Condition) IUmsMemberAddressDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u umsMemberAddressDo) Select(conds ...field.Expr) IUmsMemberAddressDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u umsMemberAddressDo) Where(conds ...gen.Condition) IUmsMemberAddressDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u umsMemberAddressDo) Order(conds ...field.Expr) IUmsMemberAddressDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u umsMemberAddressDo) Distinct(cols ...field.Expr) IUmsMemberAddressDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u umsMemberAddressDo) Omit(cols ...field.Expr) IUmsMemberAddressDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u umsMemberAddressDo) Join(table schema.Tabler, on ...field.Expr) IUmsMemberAddressDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u umsMemberAddressDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUmsMemberAddressDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u umsMemberAddressDo) RightJoin(table schema.Tabler, on ...field.Expr) IUmsMemberAddressDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u umsMemberAddressDo) Group(cols ...field.Expr) IUmsMemberAddressDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u umsMemberAddressDo) Having(conds ...gen.Condition) IUmsMemberAddressDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u umsMemberAddressDo) Limit(limit int) IUmsMemberAddressDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u umsMemberAddressDo) Offset(offset int) IUmsMemberAddressDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u umsMemberAddressDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsMemberAddressDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u umsMemberAddressDo) Unscoped() IUmsMemberAddressDo {
	return u.withDO(u.DO.Unscoped())
}

func (u umsMemberAddressDo) Create(values ...*model.UmsMemberAddress) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u umsMemberAddressDo) CreateInBatches(values []*model.UmsMemberAddress, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u umsMemberAddressDo) Save(values ...*model.UmsMemberAddress) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u umsMemberAddressDo) First() (*model.UmsMemberAddress, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberAddress), nil
	}
}

func (u umsMemberAddressDo) Take() (*model.UmsMemberAddress, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberAddress), nil
	}
}

func (u umsMemberAddressDo) Last() (*model.UmsMemberAddress, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberAddress), nil
	}
}

func (u umsMemberAddressDo) Find() ([]*model.UmsMemberAddress, error) {
	result, err := u.DO.Find()
	return result.([]*model.UmsMemberAddress), err
}

func (u umsMemberAddressDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsMemberAddress, err error) {
	buf := make([]*model.UmsMemberAddress, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u umsMemberAddressDo) FindInBatches(result *[]*model.UmsMemberAddress, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u umsMemberAddressDo) Attrs(attrs ...field.AssignExpr) IUmsMemberAddressDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u umsMemberAddressDo) Assign(attrs ...field.AssignExpr) IUmsMemberAddressDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u umsMemberAddressDo) Joins(fields ...field.RelationField) IUmsMemberAddressDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u umsMemberAddressDo) Preload(fields ...field.RelationField) IUmsMemberAddressDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u umsMemberAddressDo) FirstOrInit() (*model.UmsMemberAddress, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberAddress), nil
	}
}

func (u umsMemberAddressDo) FirstOrCreate() (*model.UmsMemberAddress, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberAddress), nil
	}
}

func (u umsMemberAddressDo) FindByPage(offset int, limit int) (result []*model.UmsMemberAddress, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u umsMemberAddressDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u umsMemberAddressDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u umsMemberAddressDo) Delete(models ...*model.UmsMemberAddress) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *umsMemberAddressDo) withDO(do gen.Dao) *umsMemberAddressDo {
	u.DO = *do.(*gen.DO)
	return u
}
