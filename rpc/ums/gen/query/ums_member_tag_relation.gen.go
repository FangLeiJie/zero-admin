// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/ums/gen/model"
)

func newUmsMemberTagRelation(db *gorm.DB, opts ...gen.DOOption) umsMemberTagRelation {
	_umsMemberTagRelation := umsMemberTagRelation{}

	_umsMemberTagRelation.umsMemberTagRelationDo.UseDB(db, opts...)
	_umsMemberTagRelation.umsMemberTagRelationDo.UseModel(&model.UmsMemberTagRelation{})

	tableName := _umsMemberTagRelation.umsMemberTagRelationDo.TableName()
	_umsMemberTagRelation.ALL = field.NewAsterisk(tableName)
	_umsMemberTagRelation.ID = field.NewInt64(tableName, "id")
	_umsMemberTagRelation.MemberID = field.NewInt64(tableName, "member_id")
	_umsMemberTagRelation.TagID = field.NewInt64(tableName, "tag_id")
	_umsMemberTagRelation.CreateTime = field.NewTime(tableName, "create_time")

	_umsMemberTagRelation.fillFieldMap()

	return _umsMemberTagRelation
}

// umsMemberTagRelation 会员标签关联表
type umsMemberTagRelation struct {
	umsMemberTagRelationDo umsMemberTagRelationDo

	ALL        field.Asterisk
	ID         field.Int64 // 主键ID
	MemberID   field.Int64 // 会员ID
	TagID      field.Int64 // 标签ID
	CreateTime field.Time  // 创建时间

	fieldMap map[string]field.Expr
}

func (u umsMemberTagRelation) Table(newTableName string) *umsMemberTagRelation {
	u.umsMemberTagRelationDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u umsMemberTagRelation) As(alias string) *umsMemberTagRelation {
	u.umsMemberTagRelationDo.DO = *(u.umsMemberTagRelationDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *umsMemberTagRelation) updateTableName(table string) *umsMemberTagRelation {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.MemberID = field.NewInt64(table, "member_id")
	u.TagID = field.NewInt64(table, "tag_id")
	u.CreateTime = field.NewTime(table, "create_time")

	u.fillFieldMap()

	return u
}

func (u *umsMemberTagRelation) WithContext(ctx context.Context) IUmsMemberTagRelationDo {
	return u.umsMemberTagRelationDo.WithContext(ctx)
}

func (u umsMemberTagRelation) TableName() string { return u.umsMemberTagRelationDo.TableName() }

func (u umsMemberTagRelation) Alias() string { return u.umsMemberTagRelationDo.Alias() }

func (u umsMemberTagRelation) Columns(cols ...field.Expr) gen.Columns {
	return u.umsMemberTagRelationDo.Columns(cols...)
}

func (u *umsMemberTagRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *umsMemberTagRelation) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 4)
	u.fieldMap["id"] = u.ID
	u.fieldMap["member_id"] = u.MemberID
	u.fieldMap["tag_id"] = u.TagID
	u.fieldMap["create_time"] = u.CreateTime
}

func (u umsMemberTagRelation) clone(db *gorm.DB) umsMemberTagRelation {
	u.umsMemberTagRelationDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u umsMemberTagRelation) replaceDB(db *gorm.DB) umsMemberTagRelation {
	u.umsMemberTagRelationDo.ReplaceDB(db)
	return u
}

type umsMemberTagRelationDo struct{ gen.DO }

type IUmsMemberTagRelationDo interface {
	gen.SubQuery
	Debug() IUmsMemberTagRelationDo
	WithContext(ctx context.Context) IUmsMemberTagRelationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUmsMemberTagRelationDo
	WriteDB() IUmsMemberTagRelationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUmsMemberTagRelationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUmsMemberTagRelationDo
	Not(conds ...gen.Condition) IUmsMemberTagRelationDo
	Or(conds ...gen.Condition) IUmsMemberTagRelationDo
	Select(conds ...field.Expr) IUmsMemberTagRelationDo
	Where(conds ...gen.Condition) IUmsMemberTagRelationDo
	Order(conds ...field.Expr) IUmsMemberTagRelationDo
	Distinct(cols ...field.Expr) IUmsMemberTagRelationDo
	Omit(cols ...field.Expr) IUmsMemberTagRelationDo
	Join(table schema.Tabler, on ...field.Expr) IUmsMemberTagRelationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUmsMemberTagRelationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUmsMemberTagRelationDo
	Group(cols ...field.Expr) IUmsMemberTagRelationDo
	Having(conds ...gen.Condition) IUmsMemberTagRelationDo
	Limit(limit int) IUmsMemberTagRelationDo
	Offset(offset int) IUmsMemberTagRelationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsMemberTagRelationDo
	Unscoped() IUmsMemberTagRelationDo
	Create(values ...*model.UmsMemberTagRelation) error
	CreateInBatches(values []*model.UmsMemberTagRelation, batchSize int) error
	Save(values ...*model.UmsMemberTagRelation) error
	First() (*model.UmsMemberTagRelation, error)
	Take() (*model.UmsMemberTagRelation, error)
	Last() (*model.UmsMemberTagRelation, error)
	Find() ([]*model.UmsMemberTagRelation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsMemberTagRelation, err error)
	FindInBatches(result *[]*model.UmsMemberTagRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UmsMemberTagRelation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUmsMemberTagRelationDo
	Assign(attrs ...field.AssignExpr) IUmsMemberTagRelationDo
	Joins(fields ...field.RelationField) IUmsMemberTagRelationDo
	Preload(fields ...field.RelationField) IUmsMemberTagRelationDo
	FirstOrInit() (*model.UmsMemberTagRelation, error)
	FirstOrCreate() (*model.UmsMemberTagRelation, error)
	FindByPage(offset int, limit int) (result []*model.UmsMemberTagRelation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUmsMemberTagRelationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u umsMemberTagRelationDo) Debug() IUmsMemberTagRelationDo {
	return u.withDO(u.DO.Debug())
}

func (u umsMemberTagRelationDo) WithContext(ctx context.Context) IUmsMemberTagRelationDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u umsMemberTagRelationDo) ReadDB() IUmsMemberTagRelationDo {
	return u.Clauses(dbresolver.Read)
}

func (u umsMemberTagRelationDo) WriteDB() IUmsMemberTagRelationDo {
	return u.Clauses(dbresolver.Write)
}

func (u umsMemberTagRelationDo) Session(config *gorm.Session) IUmsMemberTagRelationDo {
	return u.withDO(u.DO.Session(config))
}

func (u umsMemberTagRelationDo) Clauses(conds ...clause.Expression) IUmsMemberTagRelationDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u umsMemberTagRelationDo) Returning(value interface{}, columns ...string) IUmsMemberTagRelationDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u umsMemberTagRelationDo) Not(conds ...gen.Condition) IUmsMemberTagRelationDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u umsMemberTagRelationDo) Or(conds ...gen.Condition) IUmsMemberTagRelationDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u umsMemberTagRelationDo) Select(conds ...field.Expr) IUmsMemberTagRelationDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u umsMemberTagRelationDo) Where(conds ...gen.Condition) IUmsMemberTagRelationDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u umsMemberTagRelationDo) Order(conds ...field.Expr) IUmsMemberTagRelationDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u umsMemberTagRelationDo) Distinct(cols ...field.Expr) IUmsMemberTagRelationDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u umsMemberTagRelationDo) Omit(cols ...field.Expr) IUmsMemberTagRelationDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u umsMemberTagRelationDo) Join(table schema.Tabler, on ...field.Expr) IUmsMemberTagRelationDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u umsMemberTagRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUmsMemberTagRelationDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u umsMemberTagRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) IUmsMemberTagRelationDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u umsMemberTagRelationDo) Group(cols ...field.Expr) IUmsMemberTagRelationDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u umsMemberTagRelationDo) Having(conds ...gen.Condition) IUmsMemberTagRelationDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u umsMemberTagRelationDo) Limit(limit int) IUmsMemberTagRelationDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u umsMemberTagRelationDo) Offset(offset int) IUmsMemberTagRelationDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u umsMemberTagRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsMemberTagRelationDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u umsMemberTagRelationDo) Unscoped() IUmsMemberTagRelationDo {
	return u.withDO(u.DO.Unscoped())
}

func (u umsMemberTagRelationDo) Create(values ...*model.UmsMemberTagRelation) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u umsMemberTagRelationDo) CreateInBatches(values []*model.UmsMemberTagRelation, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u umsMemberTagRelationDo) Save(values ...*model.UmsMemberTagRelation) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u umsMemberTagRelationDo) First() (*model.UmsMemberTagRelation, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberTagRelation), nil
	}
}

func (u umsMemberTagRelationDo) Take() (*model.UmsMemberTagRelation, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberTagRelation), nil
	}
}

func (u umsMemberTagRelationDo) Last() (*model.UmsMemberTagRelation, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberTagRelation), nil
	}
}

func (u umsMemberTagRelationDo) Find() ([]*model.UmsMemberTagRelation, error) {
	result, err := u.DO.Find()
	return result.([]*model.UmsMemberTagRelation), err
}

func (u umsMemberTagRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsMemberTagRelation, err error) {
	buf := make([]*model.UmsMemberTagRelation, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u umsMemberTagRelationDo) FindInBatches(result *[]*model.UmsMemberTagRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u umsMemberTagRelationDo) Attrs(attrs ...field.AssignExpr) IUmsMemberTagRelationDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u umsMemberTagRelationDo) Assign(attrs ...field.AssignExpr) IUmsMemberTagRelationDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u umsMemberTagRelationDo) Joins(fields ...field.RelationField) IUmsMemberTagRelationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u umsMemberTagRelationDo) Preload(fields ...field.RelationField) IUmsMemberTagRelationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u umsMemberTagRelationDo) FirstOrInit() (*model.UmsMemberTagRelation, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberTagRelation), nil
	}
}

func (u umsMemberTagRelationDo) FirstOrCreate() (*model.UmsMemberTagRelation, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberTagRelation), nil
	}
}

func (u umsMemberTagRelationDo) FindByPage(offset int, limit int) (result []*model.UmsMemberTagRelation, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u umsMemberTagRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u umsMemberTagRelationDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u umsMemberTagRelationDo) Delete(models ...*model.UmsMemberTagRelation) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *umsMemberTagRelationDo) withDO(do gen.Dao) *umsMemberTagRelationDo {
	u.DO = *do.(*gen.DO)
	return u
}
