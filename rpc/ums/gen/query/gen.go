// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                                = new(Query)
	UmsIntegrationConsumeSetting     *umsIntegrationConsumeSetting
	UmsMemberAddress                 *umsMemberAddress
	UmsMemberBrandAttention          *umsMemberBrandAttention
	UmsMemberGrowthLog               *umsMemberGrowthLog
	UmsMemberInfo                    *umsMemberInfo
	UmsMemberLevel                   *umsMemberLevel
	UmsMemberLoginLog                *umsMemberLoginLog
	UmsMemberPointsLog               *umsMemberPointsLog
	UmsMemberProductCategoryRelation *umsMemberProductCategoryRelation
	UmsMemberProductCollection       *umsMemberProductCollection
	UmsMemberReadHistory             *umsMemberReadHistory
	UmsMemberRuleSetting             *umsMemberRuleSetting
	UmsMemberSignLog                 *umsMemberSignLog
	UmsMemberStatisticsInfo          *umsMemberStatisticsInfo
	UmsMemberTag                     *umsMemberTag
	UmsMemberTagRelation             *umsMemberTagRelation
	UmsMemberTask                    *umsMemberTask
	UmsMemberTaskRelation            *umsMemberTaskRelation
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	UmsIntegrationConsumeSetting = &Q.UmsIntegrationConsumeSetting
	UmsMemberAddress = &Q.UmsMemberAddress
	UmsMemberBrandAttention = &Q.UmsMemberBrandAttention
	UmsMemberGrowthLog = &Q.UmsMemberGrowthLog
	UmsMemberInfo = &Q.UmsMemberInfo
	UmsMemberLevel = &Q.UmsMemberLevel
	UmsMemberLoginLog = &Q.UmsMemberLoginLog
	UmsMemberPointsLog = &Q.UmsMemberPointsLog
	UmsMemberProductCategoryRelation = &Q.UmsMemberProductCategoryRelation
	UmsMemberProductCollection = &Q.UmsMemberProductCollection
	UmsMemberReadHistory = &Q.UmsMemberReadHistory
	UmsMemberRuleSetting = &Q.UmsMemberRuleSetting
	UmsMemberSignLog = &Q.UmsMemberSignLog
	UmsMemberStatisticsInfo = &Q.UmsMemberStatisticsInfo
	UmsMemberTag = &Q.UmsMemberTag
	UmsMemberTagRelation = &Q.UmsMemberTagRelation
	UmsMemberTask = &Q.UmsMemberTask
	UmsMemberTaskRelation = &Q.UmsMemberTaskRelation
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                               db,
		UmsIntegrationConsumeSetting:     newUmsIntegrationConsumeSetting(db, opts...),
		UmsMemberAddress:                 newUmsMemberAddress(db, opts...),
		UmsMemberBrandAttention:          newUmsMemberBrandAttention(db, opts...),
		UmsMemberGrowthLog:               newUmsMemberGrowthLog(db, opts...),
		UmsMemberInfo:                    newUmsMemberInfo(db, opts...),
		UmsMemberLevel:                   newUmsMemberLevel(db, opts...),
		UmsMemberLoginLog:                newUmsMemberLoginLog(db, opts...),
		UmsMemberPointsLog:               newUmsMemberPointsLog(db, opts...),
		UmsMemberProductCategoryRelation: newUmsMemberProductCategoryRelation(db, opts...),
		UmsMemberProductCollection:       newUmsMemberProductCollection(db, opts...),
		UmsMemberReadHistory:             newUmsMemberReadHistory(db, opts...),
		UmsMemberRuleSetting:             newUmsMemberRuleSetting(db, opts...),
		UmsMemberSignLog:                 newUmsMemberSignLog(db, opts...),
		UmsMemberStatisticsInfo:          newUmsMemberStatisticsInfo(db, opts...),
		UmsMemberTag:                     newUmsMemberTag(db, opts...),
		UmsMemberTagRelation:             newUmsMemberTagRelation(db, opts...),
		UmsMemberTask:                    newUmsMemberTask(db, opts...),
		UmsMemberTaskRelation:            newUmsMemberTaskRelation(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	UmsIntegrationConsumeSetting     umsIntegrationConsumeSetting
	UmsMemberAddress                 umsMemberAddress
	UmsMemberBrandAttention          umsMemberBrandAttention
	UmsMemberGrowthLog               umsMemberGrowthLog
	UmsMemberInfo                    umsMemberInfo
	UmsMemberLevel                   umsMemberLevel
	UmsMemberLoginLog                umsMemberLoginLog
	UmsMemberPointsLog               umsMemberPointsLog
	UmsMemberProductCategoryRelation umsMemberProductCategoryRelation
	UmsMemberProductCollection       umsMemberProductCollection
	UmsMemberReadHistory             umsMemberReadHistory
	UmsMemberRuleSetting             umsMemberRuleSetting
	UmsMemberSignLog                 umsMemberSignLog
	UmsMemberStatisticsInfo          umsMemberStatisticsInfo
	UmsMemberTag                     umsMemberTag
	UmsMemberTagRelation             umsMemberTagRelation
	UmsMemberTask                    umsMemberTask
	UmsMemberTaskRelation            umsMemberTaskRelation
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                               db,
		UmsIntegrationConsumeSetting:     q.UmsIntegrationConsumeSetting.clone(db),
		UmsMemberAddress:                 q.UmsMemberAddress.clone(db),
		UmsMemberBrandAttention:          q.UmsMemberBrandAttention.clone(db),
		UmsMemberGrowthLog:               q.UmsMemberGrowthLog.clone(db),
		UmsMemberInfo:                    q.UmsMemberInfo.clone(db),
		UmsMemberLevel:                   q.UmsMemberLevel.clone(db),
		UmsMemberLoginLog:                q.UmsMemberLoginLog.clone(db),
		UmsMemberPointsLog:               q.UmsMemberPointsLog.clone(db),
		UmsMemberProductCategoryRelation: q.UmsMemberProductCategoryRelation.clone(db),
		UmsMemberProductCollection:       q.UmsMemberProductCollection.clone(db),
		UmsMemberReadHistory:             q.UmsMemberReadHistory.clone(db),
		UmsMemberRuleSetting:             q.UmsMemberRuleSetting.clone(db),
		UmsMemberSignLog:                 q.UmsMemberSignLog.clone(db),
		UmsMemberStatisticsInfo:          q.UmsMemberStatisticsInfo.clone(db),
		UmsMemberTag:                     q.UmsMemberTag.clone(db),
		UmsMemberTagRelation:             q.UmsMemberTagRelation.clone(db),
		UmsMemberTask:                    q.UmsMemberTask.clone(db),
		UmsMemberTaskRelation:            q.UmsMemberTaskRelation.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                               db,
		UmsIntegrationConsumeSetting:     q.UmsIntegrationConsumeSetting.replaceDB(db),
		UmsMemberAddress:                 q.UmsMemberAddress.replaceDB(db),
		UmsMemberBrandAttention:          q.UmsMemberBrandAttention.replaceDB(db),
		UmsMemberGrowthLog:               q.UmsMemberGrowthLog.replaceDB(db),
		UmsMemberInfo:                    q.UmsMemberInfo.replaceDB(db),
		UmsMemberLevel:                   q.UmsMemberLevel.replaceDB(db),
		UmsMemberLoginLog:                q.UmsMemberLoginLog.replaceDB(db),
		UmsMemberPointsLog:               q.UmsMemberPointsLog.replaceDB(db),
		UmsMemberProductCategoryRelation: q.UmsMemberProductCategoryRelation.replaceDB(db),
		UmsMemberProductCollection:       q.UmsMemberProductCollection.replaceDB(db),
		UmsMemberReadHistory:             q.UmsMemberReadHistory.replaceDB(db),
		UmsMemberRuleSetting:             q.UmsMemberRuleSetting.replaceDB(db),
		UmsMemberSignLog:                 q.UmsMemberSignLog.replaceDB(db),
		UmsMemberStatisticsInfo:          q.UmsMemberStatisticsInfo.replaceDB(db),
		UmsMemberTag:                     q.UmsMemberTag.replaceDB(db),
		UmsMemberTagRelation:             q.UmsMemberTagRelation.replaceDB(db),
		UmsMemberTask:                    q.UmsMemberTask.replaceDB(db),
		UmsMemberTaskRelation:            q.UmsMemberTaskRelation.replaceDB(db),
	}
}

type queryCtx struct {
	UmsIntegrationConsumeSetting     IUmsIntegrationConsumeSettingDo
	UmsMemberAddress                 IUmsMemberAddressDo
	UmsMemberBrandAttention          IUmsMemberBrandAttentionDo
	UmsMemberGrowthLog               IUmsMemberGrowthLogDo
	UmsMemberInfo                    IUmsMemberInfoDo
	UmsMemberLevel                   IUmsMemberLevelDo
	UmsMemberLoginLog                IUmsMemberLoginLogDo
	UmsMemberPointsLog               IUmsMemberPointsLogDo
	UmsMemberProductCategoryRelation IUmsMemberProductCategoryRelationDo
	UmsMemberProductCollection       IUmsMemberProductCollectionDo
	UmsMemberReadHistory             IUmsMemberReadHistoryDo
	UmsMemberRuleSetting             IUmsMemberRuleSettingDo
	UmsMemberSignLog                 IUmsMemberSignLogDo
	UmsMemberStatisticsInfo          IUmsMemberStatisticsInfoDo
	UmsMemberTag                     IUmsMemberTagDo
	UmsMemberTagRelation             IUmsMemberTagRelationDo
	UmsMemberTask                    IUmsMemberTaskDo
	UmsMemberTaskRelation            IUmsMemberTaskRelationDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		UmsIntegrationConsumeSetting:     q.UmsIntegrationConsumeSetting.WithContext(ctx),
		UmsMemberAddress:                 q.UmsMemberAddress.WithContext(ctx),
		UmsMemberBrandAttention:          q.UmsMemberBrandAttention.WithContext(ctx),
		UmsMemberGrowthLog:               q.UmsMemberGrowthLog.WithContext(ctx),
		UmsMemberInfo:                    q.UmsMemberInfo.WithContext(ctx),
		UmsMemberLevel:                   q.UmsMemberLevel.WithContext(ctx),
		UmsMemberLoginLog:                q.UmsMemberLoginLog.WithContext(ctx),
		UmsMemberPointsLog:               q.UmsMemberPointsLog.WithContext(ctx),
		UmsMemberProductCategoryRelation: q.UmsMemberProductCategoryRelation.WithContext(ctx),
		UmsMemberProductCollection:       q.UmsMemberProductCollection.WithContext(ctx),
		UmsMemberReadHistory:             q.UmsMemberReadHistory.WithContext(ctx),
		UmsMemberRuleSetting:             q.UmsMemberRuleSetting.WithContext(ctx),
		UmsMemberSignLog:                 q.UmsMemberSignLog.WithContext(ctx),
		UmsMemberStatisticsInfo:          q.UmsMemberStatisticsInfo.WithContext(ctx),
		UmsMemberTag:                     q.UmsMemberTag.WithContext(ctx),
		UmsMemberTagRelation:             q.UmsMemberTagRelation.WithContext(ctx),
		UmsMemberTask:                    q.UmsMemberTask.WithContext(ctx),
		UmsMemberTaskRelation:            q.UmsMemberTaskRelation.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
