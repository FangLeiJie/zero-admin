// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/ums/gen/model"
)

func newUmsMemberConsumeSetting(db *gorm.DB, opts ...gen.DOOption) umsMemberConsumeSetting {
	_umsMemberConsumeSetting := umsMemberConsumeSetting{}

	_umsMemberConsumeSetting.umsMemberConsumeSettingDo.UseDB(db, opts...)
	_umsMemberConsumeSetting.umsMemberConsumeSettingDo.UseModel(&model.UmsMemberConsumeSetting{})

	tableName := _umsMemberConsumeSetting.umsMemberConsumeSettingDo.TableName()
	_umsMemberConsumeSetting.ALL = field.NewAsterisk(tableName)
	_umsMemberConsumeSetting.ID = field.NewInt64(tableName, "id")
	_umsMemberConsumeSetting.DeductionPerAmount = field.NewInt32(tableName, "deduction_per_amount")
	_umsMemberConsumeSetting.MaxPercentPerOrder = field.NewInt32(tableName, "max_percent_per_order")
	_umsMemberConsumeSetting.UseUnit = field.NewInt32(tableName, "use_unit")
	_umsMemberConsumeSetting.CouponStatus = field.NewInt32(tableName, "coupon_status")
	_umsMemberConsumeSetting.Status = field.NewInt32(tableName, "status")
	_umsMemberConsumeSetting.CreateBy = field.NewInt64(tableName, "create_by")
	_umsMemberConsumeSetting.CreateTime = field.NewTime(tableName, "create_time")
	_umsMemberConsumeSetting.UpdateBy = field.NewInt64(tableName, "update_by")
	_umsMemberConsumeSetting.UpdateTime = field.NewTime(tableName, "update_time")

	_umsMemberConsumeSetting.fillFieldMap()

	return _umsMemberConsumeSetting
}

// umsMemberConsumeSetting 积分消费设置
type umsMemberConsumeSetting struct {
	umsMemberConsumeSettingDo umsMemberConsumeSettingDo

	ALL                field.Asterisk
	ID                 field.Int64
	DeductionPerAmount field.Int32 // 每一元需要抵扣的积分数量
	MaxPercentPerOrder field.Int32 // 每笔订单最高抵用百分比
	UseUnit            field.Int32 // 每次使用积分最小单位100
	CouponStatus       field.Int32 // 是否可以和优惠券同用；0->不可以；1->可以
	Status             field.Int32 // 状态：0->禁用；1->启用
	CreateBy           field.Int64 // 创建人ID
	CreateTime         field.Time  // 创建时间
	UpdateBy           field.Int64 // 更新人ID
	UpdateTime         field.Time  // 更新时间

	fieldMap map[string]field.Expr
}

func (u umsMemberConsumeSetting) Table(newTableName string) *umsMemberConsumeSetting {
	u.umsMemberConsumeSettingDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u umsMemberConsumeSetting) As(alias string) *umsMemberConsumeSetting {
	u.umsMemberConsumeSettingDo.DO = *(u.umsMemberConsumeSettingDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *umsMemberConsumeSetting) updateTableName(table string) *umsMemberConsumeSetting {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.DeductionPerAmount = field.NewInt32(table, "deduction_per_amount")
	u.MaxPercentPerOrder = field.NewInt32(table, "max_percent_per_order")
	u.UseUnit = field.NewInt32(table, "use_unit")
	u.CouponStatus = field.NewInt32(table, "coupon_status")
	u.Status = field.NewInt32(table, "status")
	u.CreateBy = field.NewInt64(table, "create_by")
	u.CreateTime = field.NewTime(table, "create_time")
	u.UpdateBy = field.NewInt64(table, "update_by")
	u.UpdateTime = field.NewTime(table, "update_time")

	u.fillFieldMap()

	return u
}

func (u *umsMemberConsumeSetting) WithContext(ctx context.Context) IUmsMemberConsumeSettingDo {
	return u.umsMemberConsumeSettingDo.WithContext(ctx)
}

func (u umsMemberConsumeSetting) TableName() string { return u.umsMemberConsumeSettingDo.TableName() }

func (u umsMemberConsumeSetting) Alias() string { return u.umsMemberConsumeSettingDo.Alias() }

func (u umsMemberConsumeSetting) Columns(cols ...field.Expr) gen.Columns {
	return u.umsMemberConsumeSettingDo.Columns(cols...)
}

func (u *umsMemberConsumeSetting) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *umsMemberConsumeSetting) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 10)
	u.fieldMap["id"] = u.ID
	u.fieldMap["deduction_per_amount"] = u.DeductionPerAmount
	u.fieldMap["max_percent_per_order"] = u.MaxPercentPerOrder
	u.fieldMap["use_unit"] = u.UseUnit
	u.fieldMap["coupon_status"] = u.CouponStatus
	u.fieldMap["status"] = u.Status
	u.fieldMap["create_by"] = u.CreateBy
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["update_by"] = u.UpdateBy
	u.fieldMap["update_time"] = u.UpdateTime
}

func (u umsMemberConsumeSetting) clone(db *gorm.DB) umsMemberConsumeSetting {
	u.umsMemberConsumeSettingDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u umsMemberConsumeSetting) replaceDB(db *gorm.DB) umsMemberConsumeSetting {
	u.umsMemberConsumeSettingDo.ReplaceDB(db)
	return u
}

type umsMemberConsumeSettingDo struct{ gen.DO }

type IUmsMemberConsumeSettingDo interface {
	gen.SubQuery
	Debug() IUmsMemberConsumeSettingDo
	WithContext(ctx context.Context) IUmsMemberConsumeSettingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUmsMemberConsumeSettingDo
	WriteDB() IUmsMemberConsumeSettingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUmsMemberConsumeSettingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUmsMemberConsumeSettingDo
	Not(conds ...gen.Condition) IUmsMemberConsumeSettingDo
	Or(conds ...gen.Condition) IUmsMemberConsumeSettingDo
	Select(conds ...field.Expr) IUmsMemberConsumeSettingDo
	Where(conds ...gen.Condition) IUmsMemberConsumeSettingDo
	Order(conds ...field.Expr) IUmsMemberConsumeSettingDo
	Distinct(cols ...field.Expr) IUmsMemberConsumeSettingDo
	Omit(cols ...field.Expr) IUmsMemberConsumeSettingDo
	Join(table schema.Tabler, on ...field.Expr) IUmsMemberConsumeSettingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUmsMemberConsumeSettingDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUmsMemberConsumeSettingDo
	Group(cols ...field.Expr) IUmsMemberConsumeSettingDo
	Having(conds ...gen.Condition) IUmsMemberConsumeSettingDo
	Limit(limit int) IUmsMemberConsumeSettingDo
	Offset(offset int) IUmsMemberConsumeSettingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsMemberConsumeSettingDo
	Unscoped() IUmsMemberConsumeSettingDo
	Create(values ...*model.UmsMemberConsumeSetting) error
	CreateInBatches(values []*model.UmsMemberConsumeSetting, batchSize int) error
	Save(values ...*model.UmsMemberConsumeSetting) error
	First() (*model.UmsMemberConsumeSetting, error)
	Take() (*model.UmsMemberConsumeSetting, error)
	Last() (*model.UmsMemberConsumeSetting, error)
	Find() ([]*model.UmsMemberConsumeSetting, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsMemberConsumeSetting, err error)
	FindInBatches(result *[]*model.UmsMemberConsumeSetting, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UmsMemberConsumeSetting) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUmsMemberConsumeSettingDo
	Assign(attrs ...field.AssignExpr) IUmsMemberConsumeSettingDo
	Joins(fields ...field.RelationField) IUmsMemberConsumeSettingDo
	Preload(fields ...field.RelationField) IUmsMemberConsumeSettingDo
	FirstOrInit() (*model.UmsMemberConsumeSetting, error)
	FirstOrCreate() (*model.UmsMemberConsumeSetting, error)
	FindByPage(offset int, limit int) (result []*model.UmsMemberConsumeSetting, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUmsMemberConsumeSettingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u umsMemberConsumeSettingDo) Debug() IUmsMemberConsumeSettingDo {
	return u.withDO(u.DO.Debug())
}

func (u umsMemberConsumeSettingDo) WithContext(ctx context.Context) IUmsMemberConsumeSettingDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u umsMemberConsumeSettingDo) ReadDB() IUmsMemberConsumeSettingDo {
	return u.Clauses(dbresolver.Read)
}

func (u umsMemberConsumeSettingDo) WriteDB() IUmsMemberConsumeSettingDo {
	return u.Clauses(dbresolver.Write)
}

func (u umsMemberConsumeSettingDo) Session(config *gorm.Session) IUmsMemberConsumeSettingDo {
	return u.withDO(u.DO.Session(config))
}

func (u umsMemberConsumeSettingDo) Clauses(conds ...clause.Expression) IUmsMemberConsumeSettingDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u umsMemberConsumeSettingDo) Returning(value interface{}, columns ...string) IUmsMemberConsumeSettingDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u umsMemberConsumeSettingDo) Not(conds ...gen.Condition) IUmsMemberConsumeSettingDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u umsMemberConsumeSettingDo) Or(conds ...gen.Condition) IUmsMemberConsumeSettingDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u umsMemberConsumeSettingDo) Select(conds ...field.Expr) IUmsMemberConsumeSettingDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u umsMemberConsumeSettingDo) Where(conds ...gen.Condition) IUmsMemberConsumeSettingDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u umsMemberConsumeSettingDo) Order(conds ...field.Expr) IUmsMemberConsumeSettingDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u umsMemberConsumeSettingDo) Distinct(cols ...field.Expr) IUmsMemberConsumeSettingDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u umsMemberConsumeSettingDo) Omit(cols ...field.Expr) IUmsMemberConsumeSettingDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u umsMemberConsumeSettingDo) Join(table schema.Tabler, on ...field.Expr) IUmsMemberConsumeSettingDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u umsMemberConsumeSettingDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUmsMemberConsumeSettingDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u umsMemberConsumeSettingDo) RightJoin(table schema.Tabler, on ...field.Expr) IUmsMemberConsumeSettingDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u umsMemberConsumeSettingDo) Group(cols ...field.Expr) IUmsMemberConsumeSettingDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u umsMemberConsumeSettingDo) Having(conds ...gen.Condition) IUmsMemberConsumeSettingDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u umsMemberConsumeSettingDo) Limit(limit int) IUmsMemberConsumeSettingDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u umsMemberConsumeSettingDo) Offset(offset int) IUmsMemberConsumeSettingDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u umsMemberConsumeSettingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsMemberConsumeSettingDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u umsMemberConsumeSettingDo) Unscoped() IUmsMemberConsumeSettingDo {
	return u.withDO(u.DO.Unscoped())
}

func (u umsMemberConsumeSettingDo) Create(values ...*model.UmsMemberConsumeSetting) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u umsMemberConsumeSettingDo) CreateInBatches(values []*model.UmsMemberConsumeSetting, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u umsMemberConsumeSettingDo) Save(values ...*model.UmsMemberConsumeSetting) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u umsMemberConsumeSettingDo) First() (*model.UmsMemberConsumeSetting, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberConsumeSetting), nil
	}
}

func (u umsMemberConsumeSettingDo) Take() (*model.UmsMemberConsumeSetting, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberConsumeSetting), nil
	}
}

func (u umsMemberConsumeSettingDo) Last() (*model.UmsMemberConsumeSetting, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberConsumeSetting), nil
	}
}

func (u umsMemberConsumeSettingDo) Find() ([]*model.UmsMemberConsumeSetting, error) {
	result, err := u.DO.Find()
	return result.([]*model.UmsMemberConsumeSetting), err
}

func (u umsMemberConsumeSettingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsMemberConsumeSetting, err error) {
	buf := make([]*model.UmsMemberConsumeSetting, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u umsMemberConsumeSettingDo) FindInBatches(result *[]*model.UmsMemberConsumeSetting, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u umsMemberConsumeSettingDo) Attrs(attrs ...field.AssignExpr) IUmsMemberConsumeSettingDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u umsMemberConsumeSettingDo) Assign(attrs ...field.AssignExpr) IUmsMemberConsumeSettingDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u umsMemberConsumeSettingDo) Joins(fields ...field.RelationField) IUmsMemberConsumeSettingDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u umsMemberConsumeSettingDo) Preload(fields ...field.RelationField) IUmsMemberConsumeSettingDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u umsMemberConsumeSettingDo) FirstOrInit() (*model.UmsMemberConsumeSetting, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberConsumeSetting), nil
	}
}

func (u umsMemberConsumeSettingDo) FirstOrCreate() (*model.UmsMemberConsumeSetting, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberConsumeSetting), nil
	}
}

func (u umsMemberConsumeSettingDo) FindByPage(offset int, limit int) (result []*model.UmsMemberConsumeSetting, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u umsMemberConsumeSettingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u umsMemberConsumeSettingDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u umsMemberConsumeSettingDo) Delete(models ...*model.UmsMemberConsumeSetting) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *umsMemberConsumeSettingDo) withDO(do gen.Dao) *umsMemberConsumeSettingDo {
	u.DO = *do.(*gen.DO)
	return u
}
