// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/ums/gen/model"
)

func newUmsMemberInfo(db *gorm.DB, opts ...gen.DOOption) umsMemberInfo {
	_umsMemberInfo := umsMemberInfo{}

	_umsMemberInfo.umsMemberInfoDo.UseDB(db, opts...)
	_umsMemberInfo.umsMemberInfoDo.UseModel(&model.UmsMemberInfo{})

	tableName := _umsMemberInfo.umsMemberInfoDo.TableName()
	_umsMemberInfo.ALL = field.NewAsterisk(tableName)
	_umsMemberInfo.ID = field.NewInt64(tableName, "id")
	_umsMemberInfo.MemberID = field.NewInt64(tableName, "member_id")
	_umsMemberInfo.LevelID = field.NewInt64(tableName, "level_id")
	_umsMemberInfo.Nickname = field.NewString(tableName, "nickname")
	_umsMemberInfo.Mobile = field.NewString(tableName, "mobile")
	_umsMemberInfo.Source = field.NewInt32(tableName, "source")
	_umsMemberInfo.Password = field.NewString(tableName, "password")
	_umsMemberInfo.Avatar = field.NewString(tableName, "avatar")
	_umsMemberInfo.Signature = field.NewString(tableName, "signature")
	_umsMemberInfo.Gender = field.NewInt32(tableName, "gender")
	_umsMemberInfo.Birthday = field.NewTime(tableName, "birthday")
	_umsMemberInfo.GrowthPoint = field.NewInt32(tableName, "growth_point")
	_umsMemberInfo.Points = field.NewInt32(tableName, "points")
	_umsMemberInfo.TotalPoints = field.NewInt32(tableName, "total_points")
	_umsMemberInfo.SpendAmount = field.NewFloat64(tableName, "spend_amount")
	_umsMemberInfo.OrderCount = field.NewInt32(tableName, "order_count")
	_umsMemberInfo.CouponCount = field.NewInt32(tableName, "coupon_count")
	_umsMemberInfo.CommentCount = field.NewInt32(tableName, "comment_count")
	_umsMemberInfo.ReturnCount = field.NewInt32(tableName, "return_count")
	_umsMemberInfo.LotteryTimes = field.NewInt32(tableName, "lottery_times")
	_umsMemberInfo.LastLogin = field.NewTime(tableName, "last_login")
	_umsMemberInfo.IsEnabled = field.NewInt32(tableName, "is_enabled")
	_umsMemberInfo.CreateTime = field.NewTime(tableName, "create_time")
	_umsMemberInfo.UpdateTime = field.NewTime(tableName, "update_time")
	_umsMemberInfo.IsDeleted = field.NewInt32(tableName, "is_deleted")

	_umsMemberInfo.fillFieldMap()

	return _umsMemberInfo
}

// umsMemberInfo 会员信息表
type umsMemberInfo struct {
	umsMemberInfoDo umsMemberInfoDo

	ALL          field.Asterisk
	ID           field.Int64   // 主键ID
	MemberID     field.Int64   // 会员ID
	LevelID      field.Int64   // 等级ID
	Nickname     field.String  // 昵称
	Mobile       field.String  // 手机号码
	Source       field.Int32   // 注册来源：0-PC，1-APP，2-小程序
	Password     field.String  // 密码
	Avatar       field.String  // 头像
	Signature    field.String  // 个性签名
	Gender       field.Int32   // 性别：0-未知，1-男，2-女
	Birthday     field.Time    // 生日
	GrowthPoint  field.Int32   // 成长值
	Points       field.Int32   // 积分
	TotalPoints  field.Int32   // 累计获得积分
	SpendAmount  field.Float64 // 累计消费金额
	OrderCount   field.Int32   // 订单数
	CouponCount  field.Int32   // 优惠券数量
	CommentCount field.Int32   // 评价数
	ReturnCount  field.Int32   // 退货数
	LotteryTimes field.Int32   // 剩余抽奖次数
	LastLogin    field.Time    // 最后登录
	IsEnabled    field.Int32   // 是否启用：0-禁用，1-启用
	CreateTime   field.Time    // 创建时间
	UpdateTime   field.Time    // 更新时间
	IsDeleted    field.Int32   // 是否删除

	fieldMap map[string]field.Expr
}

func (u umsMemberInfo) Table(newTableName string) *umsMemberInfo {
	u.umsMemberInfoDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u umsMemberInfo) As(alias string) *umsMemberInfo {
	u.umsMemberInfoDo.DO = *(u.umsMemberInfoDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *umsMemberInfo) updateTableName(table string) *umsMemberInfo {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.MemberID = field.NewInt64(table, "member_id")
	u.LevelID = field.NewInt64(table, "level_id")
	u.Nickname = field.NewString(table, "nickname")
	u.Mobile = field.NewString(table, "mobile")
	u.Source = field.NewInt32(table, "source")
	u.Password = field.NewString(table, "password")
	u.Avatar = field.NewString(table, "avatar")
	u.Signature = field.NewString(table, "signature")
	u.Gender = field.NewInt32(table, "gender")
	u.Birthday = field.NewTime(table, "birthday")
	u.GrowthPoint = field.NewInt32(table, "growth_point")
	u.Points = field.NewInt32(table, "points")
	u.TotalPoints = field.NewInt32(table, "total_points")
	u.SpendAmount = field.NewFloat64(table, "spend_amount")
	u.OrderCount = field.NewInt32(table, "order_count")
	u.CouponCount = field.NewInt32(table, "coupon_count")
	u.CommentCount = field.NewInt32(table, "comment_count")
	u.ReturnCount = field.NewInt32(table, "return_count")
	u.LotteryTimes = field.NewInt32(table, "lottery_times")
	u.LastLogin = field.NewTime(table, "last_login")
	u.IsEnabled = field.NewInt32(table, "is_enabled")
	u.CreateTime = field.NewTime(table, "create_time")
	u.UpdateTime = field.NewTime(table, "update_time")
	u.IsDeleted = field.NewInt32(table, "is_deleted")

	u.fillFieldMap()

	return u
}

func (u *umsMemberInfo) WithContext(ctx context.Context) IUmsMemberInfoDo {
	return u.umsMemberInfoDo.WithContext(ctx)
}

func (u umsMemberInfo) TableName() string { return u.umsMemberInfoDo.TableName() }

func (u umsMemberInfo) Alias() string { return u.umsMemberInfoDo.Alias() }

func (u umsMemberInfo) Columns(cols ...field.Expr) gen.Columns {
	return u.umsMemberInfoDo.Columns(cols...)
}

func (u *umsMemberInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *umsMemberInfo) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 25)
	u.fieldMap["id"] = u.ID
	u.fieldMap["member_id"] = u.MemberID
	u.fieldMap["level_id"] = u.LevelID
	u.fieldMap["nickname"] = u.Nickname
	u.fieldMap["mobile"] = u.Mobile
	u.fieldMap["source"] = u.Source
	u.fieldMap["password"] = u.Password
	u.fieldMap["avatar"] = u.Avatar
	u.fieldMap["signature"] = u.Signature
	u.fieldMap["gender"] = u.Gender
	u.fieldMap["birthday"] = u.Birthday
	u.fieldMap["growth_point"] = u.GrowthPoint
	u.fieldMap["points"] = u.Points
	u.fieldMap["total_points"] = u.TotalPoints
	u.fieldMap["spend_amount"] = u.SpendAmount
	u.fieldMap["order_count"] = u.OrderCount
	u.fieldMap["coupon_count"] = u.CouponCount
	u.fieldMap["comment_count"] = u.CommentCount
	u.fieldMap["return_count"] = u.ReturnCount
	u.fieldMap["lottery_times"] = u.LotteryTimes
	u.fieldMap["last_login"] = u.LastLogin
	u.fieldMap["is_enabled"] = u.IsEnabled
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["update_time"] = u.UpdateTime
	u.fieldMap["is_deleted"] = u.IsDeleted
}

func (u umsMemberInfo) clone(db *gorm.DB) umsMemberInfo {
	u.umsMemberInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u umsMemberInfo) replaceDB(db *gorm.DB) umsMemberInfo {
	u.umsMemberInfoDo.ReplaceDB(db)
	return u
}

type umsMemberInfoDo struct{ gen.DO }

type IUmsMemberInfoDo interface {
	gen.SubQuery
	Debug() IUmsMemberInfoDo
	WithContext(ctx context.Context) IUmsMemberInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUmsMemberInfoDo
	WriteDB() IUmsMemberInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUmsMemberInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUmsMemberInfoDo
	Not(conds ...gen.Condition) IUmsMemberInfoDo
	Or(conds ...gen.Condition) IUmsMemberInfoDo
	Select(conds ...field.Expr) IUmsMemberInfoDo
	Where(conds ...gen.Condition) IUmsMemberInfoDo
	Order(conds ...field.Expr) IUmsMemberInfoDo
	Distinct(cols ...field.Expr) IUmsMemberInfoDo
	Omit(cols ...field.Expr) IUmsMemberInfoDo
	Join(table schema.Tabler, on ...field.Expr) IUmsMemberInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUmsMemberInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUmsMemberInfoDo
	Group(cols ...field.Expr) IUmsMemberInfoDo
	Having(conds ...gen.Condition) IUmsMemberInfoDo
	Limit(limit int) IUmsMemberInfoDo
	Offset(offset int) IUmsMemberInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsMemberInfoDo
	Unscoped() IUmsMemberInfoDo
	Create(values ...*model.UmsMemberInfo) error
	CreateInBatches(values []*model.UmsMemberInfo, batchSize int) error
	Save(values ...*model.UmsMemberInfo) error
	First() (*model.UmsMemberInfo, error)
	Take() (*model.UmsMemberInfo, error)
	Last() (*model.UmsMemberInfo, error)
	Find() ([]*model.UmsMemberInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsMemberInfo, err error)
	FindInBatches(result *[]*model.UmsMemberInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UmsMemberInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUmsMemberInfoDo
	Assign(attrs ...field.AssignExpr) IUmsMemberInfoDo
	Joins(fields ...field.RelationField) IUmsMemberInfoDo
	Preload(fields ...field.RelationField) IUmsMemberInfoDo
	FirstOrInit() (*model.UmsMemberInfo, error)
	FirstOrCreate() (*model.UmsMemberInfo, error)
	FindByPage(offset int, limit int) (result []*model.UmsMemberInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUmsMemberInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u umsMemberInfoDo) Debug() IUmsMemberInfoDo {
	return u.withDO(u.DO.Debug())
}

func (u umsMemberInfoDo) WithContext(ctx context.Context) IUmsMemberInfoDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u umsMemberInfoDo) ReadDB() IUmsMemberInfoDo {
	return u.Clauses(dbresolver.Read)
}

func (u umsMemberInfoDo) WriteDB() IUmsMemberInfoDo {
	return u.Clauses(dbresolver.Write)
}

func (u umsMemberInfoDo) Session(config *gorm.Session) IUmsMemberInfoDo {
	return u.withDO(u.DO.Session(config))
}

func (u umsMemberInfoDo) Clauses(conds ...clause.Expression) IUmsMemberInfoDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u umsMemberInfoDo) Returning(value interface{}, columns ...string) IUmsMemberInfoDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u umsMemberInfoDo) Not(conds ...gen.Condition) IUmsMemberInfoDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u umsMemberInfoDo) Or(conds ...gen.Condition) IUmsMemberInfoDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u umsMemberInfoDo) Select(conds ...field.Expr) IUmsMemberInfoDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u umsMemberInfoDo) Where(conds ...gen.Condition) IUmsMemberInfoDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u umsMemberInfoDo) Order(conds ...field.Expr) IUmsMemberInfoDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u umsMemberInfoDo) Distinct(cols ...field.Expr) IUmsMemberInfoDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u umsMemberInfoDo) Omit(cols ...field.Expr) IUmsMemberInfoDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u umsMemberInfoDo) Join(table schema.Tabler, on ...field.Expr) IUmsMemberInfoDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u umsMemberInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUmsMemberInfoDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u umsMemberInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IUmsMemberInfoDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u umsMemberInfoDo) Group(cols ...field.Expr) IUmsMemberInfoDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u umsMemberInfoDo) Having(conds ...gen.Condition) IUmsMemberInfoDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u umsMemberInfoDo) Limit(limit int) IUmsMemberInfoDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u umsMemberInfoDo) Offset(offset int) IUmsMemberInfoDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u umsMemberInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsMemberInfoDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u umsMemberInfoDo) Unscoped() IUmsMemberInfoDo {
	return u.withDO(u.DO.Unscoped())
}

func (u umsMemberInfoDo) Create(values ...*model.UmsMemberInfo) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u umsMemberInfoDo) CreateInBatches(values []*model.UmsMemberInfo, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u umsMemberInfoDo) Save(values ...*model.UmsMemberInfo) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u umsMemberInfoDo) First() (*model.UmsMemberInfo, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberInfo), nil
	}
}

func (u umsMemberInfoDo) Take() (*model.UmsMemberInfo, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberInfo), nil
	}
}

func (u umsMemberInfoDo) Last() (*model.UmsMemberInfo, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberInfo), nil
	}
}

func (u umsMemberInfoDo) Find() ([]*model.UmsMemberInfo, error) {
	result, err := u.DO.Find()
	return result.([]*model.UmsMemberInfo), err
}

func (u umsMemberInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsMemberInfo, err error) {
	buf := make([]*model.UmsMemberInfo, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u umsMemberInfoDo) FindInBatches(result *[]*model.UmsMemberInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u umsMemberInfoDo) Attrs(attrs ...field.AssignExpr) IUmsMemberInfoDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u umsMemberInfoDo) Assign(attrs ...field.AssignExpr) IUmsMemberInfoDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u umsMemberInfoDo) Joins(fields ...field.RelationField) IUmsMemberInfoDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u umsMemberInfoDo) Preload(fields ...field.RelationField) IUmsMemberInfoDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u umsMemberInfoDo) FirstOrInit() (*model.UmsMemberInfo, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberInfo), nil
	}
}

func (u umsMemberInfoDo) FirstOrCreate() (*model.UmsMemberInfo, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberInfo), nil
	}
}

func (u umsMemberInfoDo) FindByPage(offset int, limit int) (result []*model.UmsMemberInfo, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u umsMemberInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u umsMemberInfoDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u umsMemberInfoDo) Delete(models ...*model.UmsMemberInfo) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *umsMemberInfoDo) withDO(do gen.Dao) *umsMemberInfoDo {
	u.DO = *do.(*gen.DO)
	return u
}
