// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/ums/gen/model"
)

func newUmsMemberPointsLog(db *gorm.DB, opts ...gen.DOOption) umsMemberPointsLog {
	_umsMemberPointsLog := umsMemberPointsLog{}

	_umsMemberPointsLog.umsMemberPointsLogDo.UseDB(db, opts...)
	_umsMemberPointsLog.umsMemberPointsLogDo.UseModel(&model.UmsMemberPointsLog{})

	tableName := _umsMemberPointsLog.umsMemberPointsLogDo.TableName()
	_umsMemberPointsLog.ALL = field.NewAsterisk(tableName)
	_umsMemberPointsLog.ID = field.NewInt64(tableName, "id")
	_umsMemberPointsLog.MemberID = field.NewInt64(tableName, "member_id")
	_umsMemberPointsLog.ChangeType = field.NewInt32(tableName, "change_type")
	_umsMemberPointsLog.ChangePoints = field.NewInt32(tableName, "change_points")
	_umsMemberPointsLog.SourceType = field.NewInt32(tableName, "source_type")
	_umsMemberPointsLog.Description = field.NewString(tableName, "description")
	_umsMemberPointsLog.OperateMan = field.NewString(tableName, "operate_man")
	_umsMemberPointsLog.OperateNote = field.NewString(tableName, "operate_note")
	_umsMemberPointsLog.CreateTime = field.NewTime(tableName, "create_time")

	_umsMemberPointsLog.fillFieldMap()

	return _umsMemberPointsLog
}

// umsMemberPointsLog 会员积分记录表
type umsMemberPointsLog struct {
	umsMemberPointsLogDo umsMemberPointsLogDo

	ALL          field.Asterisk
	ID           field.Int64
	MemberID     field.Int64  // 会员ID
	ChangeType   field.Int32  // 变更类型：1-添加积分，2-减少积分
	ChangePoints field.Int32  // 变更积分
	SourceType   field.Int32  // 来源类型：0-其他，1-订单，2-活动，3-签到，4-管理员修改
	Description  field.String // 描述
	OperateMan   field.String // 操作人员
	OperateNote  field.String // 操作备注
	CreateTime   field.Time   // 创建时间

	fieldMap map[string]field.Expr
}

func (u umsMemberPointsLog) Table(newTableName string) *umsMemberPointsLog {
	u.umsMemberPointsLogDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u umsMemberPointsLog) As(alias string) *umsMemberPointsLog {
	u.umsMemberPointsLogDo.DO = *(u.umsMemberPointsLogDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *umsMemberPointsLog) updateTableName(table string) *umsMemberPointsLog {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.MemberID = field.NewInt64(table, "member_id")
	u.ChangeType = field.NewInt32(table, "change_type")
	u.ChangePoints = field.NewInt32(table, "change_points")
	u.SourceType = field.NewInt32(table, "source_type")
	u.Description = field.NewString(table, "description")
	u.OperateMan = field.NewString(table, "operate_man")
	u.OperateNote = field.NewString(table, "operate_note")
	u.CreateTime = field.NewTime(table, "create_time")

	u.fillFieldMap()

	return u
}

func (u *umsMemberPointsLog) WithContext(ctx context.Context) IUmsMemberPointsLogDo {
	return u.umsMemberPointsLogDo.WithContext(ctx)
}

func (u umsMemberPointsLog) TableName() string { return u.umsMemberPointsLogDo.TableName() }

func (u umsMemberPointsLog) Alias() string { return u.umsMemberPointsLogDo.Alias() }

func (u umsMemberPointsLog) Columns(cols ...field.Expr) gen.Columns {
	return u.umsMemberPointsLogDo.Columns(cols...)
}

func (u *umsMemberPointsLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *umsMemberPointsLog) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 9)
	u.fieldMap["id"] = u.ID
	u.fieldMap["member_id"] = u.MemberID
	u.fieldMap["change_type"] = u.ChangeType
	u.fieldMap["change_points"] = u.ChangePoints
	u.fieldMap["source_type"] = u.SourceType
	u.fieldMap["description"] = u.Description
	u.fieldMap["operate_man"] = u.OperateMan
	u.fieldMap["operate_note"] = u.OperateNote
	u.fieldMap["create_time"] = u.CreateTime
}

func (u umsMemberPointsLog) clone(db *gorm.DB) umsMemberPointsLog {
	u.umsMemberPointsLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u umsMemberPointsLog) replaceDB(db *gorm.DB) umsMemberPointsLog {
	u.umsMemberPointsLogDo.ReplaceDB(db)
	return u
}

type umsMemberPointsLogDo struct{ gen.DO }

type IUmsMemberPointsLogDo interface {
	gen.SubQuery
	Debug() IUmsMemberPointsLogDo
	WithContext(ctx context.Context) IUmsMemberPointsLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUmsMemberPointsLogDo
	WriteDB() IUmsMemberPointsLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUmsMemberPointsLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUmsMemberPointsLogDo
	Not(conds ...gen.Condition) IUmsMemberPointsLogDo
	Or(conds ...gen.Condition) IUmsMemberPointsLogDo
	Select(conds ...field.Expr) IUmsMemberPointsLogDo
	Where(conds ...gen.Condition) IUmsMemberPointsLogDo
	Order(conds ...field.Expr) IUmsMemberPointsLogDo
	Distinct(cols ...field.Expr) IUmsMemberPointsLogDo
	Omit(cols ...field.Expr) IUmsMemberPointsLogDo
	Join(table schema.Tabler, on ...field.Expr) IUmsMemberPointsLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUmsMemberPointsLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUmsMemberPointsLogDo
	Group(cols ...field.Expr) IUmsMemberPointsLogDo
	Having(conds ...gen.Condition) IUmsMemberPointsLogDo
	Limit(limit int) IUmsMemberPointsLogDo
	Offset(offset int) IUmsMemberPointsLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsMemberPointsLogDo
	Unscoped() IUmsMemberPointsLogDo
	Create(values ...*model.UmsMemberPointsLog) error
	CreateInBatches(values []*model.UmsMemberPointsLog, batchSize int) error
	Save(values ...*model.UmsMemberPointsLog) error
	First() (*model.UmsMemberPointsLog, error)
	Take() (*model.UmsMemberPointsLog, error)
	Last() (*model.UmsMemberPointsLog, error)
	Find() ([]*model.UmsMemberPointsLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsMemberPointsLog, err error)
	FindInBatches(result *[]*model.UmsMemberPointsLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UmsMemberPointsLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUmsMemberPointsLogDo
	Assign(attrs ...field.AssignExpr) IUmsMemberPointsLogDo
	Joins(fields ...field.RelationField) IUmsMemberPointsLogDo
	Preload(fields ...field.RelationField) IUmsMemberPointsLogDo
	FirstOrInit() (*model.UmsMemberPointsLog, error)
	FirstOrCreate() (*model.UmsMemberPointsLog, error)
	FindByPage(offset int, limit int) (result []*model.UmsMemberPointsLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUmsMemberPointsLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u umsMemberPointsLogDo) Debug() IUmsMemberPointsLogDo {
	return u.withDO(u.DO.Debug())
}

func (u umsMemberPointsLogDo) WithContext(ctx context.Context) IUmsMemberPointsLogDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u umsMemberPointsLogDo) ReadDB() IUmsMemberPointsLogDo {
	return u.Clauses(dbresolver.Read)
}

func (u umsMemberPointsLogDo) WriteDB() IUmsMemberPointsLogDo {
	return u.Clauses(dbresolver.Write)
}

func (u umsMemberPointsLogDo) Session(config *gorm.Session) IUmsMemberPointsLogDo {
	return u.withDO(u.DO.Session(config))
}

func (u umsMemberPointsLogDo) Clauses(conds ...clause.Expression) IUmsMemberPointsLogDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u umsMemberPointsLogDo) Returning(value interface{}, columns ...string) IUmsMemberPointsLogDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u umsMemberPointsLogDo) Not(conds ...gen.Condition) IUmsMemberPointsLogDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u umsMemberPointsLogDo) Or(conds ...gen.Condition) IUmsMemberPointsLogDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u umsMemberPointsLogDo) Select(conds ...field.Expr) IUmsMemberPointsLogDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u umsMemberPointsLogDo) Where(conds ...gen.Condition) IUmsMemberPointsLogDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u umsMemberPointsLogDo) Order(conds ...field.Expr) IUmsMemberPointsLogDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u umsMemberPointsLogDo) Distinct(cols ...field.Expr) IUmsMemberPointsLogDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u umsMemberPointsLogDo) Omit(cols ...field.Expr) IUmsMemberPointsLogDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u umsMemberPointsLogDo) Join(table schema.Tabler, on ...field.Expr) IUmsMemberPointsLogDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u umsMemberPointsLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUmsMemberPointsLogDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u umsMemberPointsLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IUmsMemberPointsLogDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u umsMemberPointsLogDo) Group(cols ...field.Expr) IUmsMemberPointsLogDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u umsMemberPointsLogDo) Having(conds ...gen.Condition) IUmsMemberPointsLogDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u umsMemberPointsLogDo) Limit(limit int) IUmsMemberPointsLogDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u umsMemberPointsLogDo) Offset(offset int) IUmsMemberPointsLogDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u umsMemberPointsLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsMemberPointsLogDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u umsMemberPointsLogDo) Unscoped() IUmsMemberPointsLogDo {
	return u.withDO(u.DO.Unscoped())
}

func (u umsMemberPointsLogDo) Create(values ...*model.UmsMemberPointsLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u umsMemberPointsLogDo) CreateInBatches(values []*model.UmsMemberPointsLog, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u umsMemberPointsLogDo) Save(values ...*model.UmsMemberPointsLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u umsMemberPointsLogDo) First() (*model.UmsMemberPointsLog, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberPointsLog), nil
	}
}

func (u umsMemberPointsLogDo) Take() (*model.UmsMemberPointsLog, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberPointsLog), nil
	}
}

func (u umsMemberPointsLogDo) Last() (*model.UmsMemberPointsLog, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberPointsLog), nil
	}
}

func (u umsMemberPointsLogDo) Find() ([]*model.UmsMemberPointsLog, error) {
	result, err := u.DO.Find()
	return result.([]*model.UmsMemberPointsLog), err
}

func (u umsMemberPointsLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsMemberPointsLog, err error) {
	buf := make([]*model.UmsMemberPointsLog, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u umsMemberPointsLogDo) FindInBatches(result *[]*model.UmsMemberPointsLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u umsMemberPointsLogDo) Attrs(attrs ...field.AssignExpr) IUmsMemberPointsLogDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u umsMemberPointsLogDo) Assign(attrs ...field.AssignExpr) IUmsMemberPointsLogDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u umsMemberPointsLogDo) Joins(fields ...field.RelationField) IUmsMemberPointsLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u umsMemberPointsLogDo) Preload(fields ...field.RelationField) IUmsMemberPointsLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u umsMemberPointsLogDo) FirstOrInit() (*model.UmsMemberPointsLog, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberPointsLog), nil
	}
}

func (u umsMemberPointsLogDo) FirstOrCreate() (*model.UmsMemberPointsLog, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberPointsLog), nil
	}
}

func (u umsMemberPointsLogDo) FindByPage(offset int, limit int) (result []*model.UmsMemberPointsLog, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u umsMemberPointsLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u umsMemberPointsLogDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u umsMemberPointsLogDo) Delete(models ...*model.UmsMemberPointsLog) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *umsMemberPointsLogDo) withDO(do gen.Dao) *umsMemberPointsLogDo {
	u.DO = *do.(*gen.DO)
	return u
}
