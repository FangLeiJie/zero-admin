// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/ums/gen/model"
)

func newUmsMemberSignLog(db *gorm.DB, opts ...gen.DOOption) umsMemberSignLog {
	_umsMemberSignLog := umsMemberSignLog{}

	_umsMemberSignLog.umsMemberSignLogDo.UseDB(db, opts...)
	_umsMemberSignLog.umsMemberSignLogDo.UseModel(&model.UmsMemberSignLog{})

	tableName := _umsMemberSignLog.umsMemberSignLogDo.TableName()
	_umsMemberSignLog.ALL = field.NewAsterisk(tableName)
	_umsMemberSignLog.ID = field.NewInt64(tableName, "id")
	_umsMemberSignLog.MemberID = field.NewInt64(tableName, "member_id")
	_umsMemberSignLog.SignDate = field.NewTime(tableName, "sign_date")
	_umsMemberSignLog.ContinueDays = field.NewInt32(tableName, "continue_days")
	_umsMemberSignLog.Points = field.NewInt32(tableName, "points")
	_umsMemberSignLog.CreateTime = field.NewTime(tableName, "create_time")

	_umsMemberSignLog.fillFieldMap()

	return _umsMemberSignLog
}

// umsMemberSignLog 会员签到记录表
type umsMemberSignLog struct {
	umsMemberSignLogDo umsMemberSignLogDo

	ALL          field.Asterisk
	ID           field.Int64
	MemberID     field.Int64 // 会员ID
	SignDate     field.Time  // 签到日期
	ContinueDays field.Int32 // 连续签到天数
	Points       field.Int32 // 获得积分
	CreateTime   field.Time

	fieldMap map[string]field.Expr
}

func (u umsMemberSignLog) Table(newTableName string) *umsMemberSignLog {
	u.umsMemberSignLogDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u umsMemberSignLog) As(alias string) *umsMemberSignLog {
	u.umsMemberSignLogDo.DO = *(u.umsMemberSignLogDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *umsMemberSignLog) updateTableName(table string) *umsMemberSignLog {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.MemberID = field.NewInt64(table, "member_id")
	u.SignDate = field.NewTime(table, "sign_date")
	u.ContinueDays = field.NewInt32(table, "continue_days")
	u.Points = field.NewInt32(table, "points")
	u.CreateTime = field.NewTime(table, "create_time")

	u.fillFieldMap()

	return u
}

func (u *umsMemberSignLog) WithContext(ctx context.Context) IUmsMemberSignLogDo {
	return u.umsMemberSignLogDo.WithContext(ctx)
}

func (u umsMemberSignLog) TableName() string { return u.umsMemberSignLogDo.TableName() }

func (u umsMemberSignLog) Alias() string { return u.umsMemberSignLogDo.Alias() }

func (u umsMemberSignLog) Columns(cols ...field.Expr) gen.Columns {
	return u.umsMemberSignLogDo.Columns(cols...)
}

func (u *umsMemberSignLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *umsMemberSignLog) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 6)
	u.fieldMap["id"] = u.ID
	u.fieldMap["member_id"] = u.MemberID
	u.fieldMap["sign_date"] = u.SignDate
	u.fieldMap["continue_days"] = u.ContinueDays
	u.fieldMap["points"] = u.Points
	u.fieldMap["create_time"] = u.CreateTime
}

func (u umsMemberSignLog) clone(db *gorm.DB) umsMemberSignLog {
	u.umsMemberSignLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u umsMemberSignLog) replaceDB(db *gorm.DB) umsMemberSignLog {
	u.umsMemberSignLogDo.ReplaceDB(db)
	return u
}

type umsMemberSignLogDo struct{ gen.DO }

type IUmsMemberSignLogDo interface {
	gen.SubQuery
	Debug() IUmsMemberSignLogDo
	WithContext(ctx context.Context) IUmsMemberSignLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUmsMemberSignLogDo
	WriteDB() IUmsMemberSignLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUmsMemberSignLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUmsMemberSignLogDo
	Not(conds ...gen.Condition) IUmsMemberSignLogDo
	Or(conds ...gen.Condition) IUmsMemberSignLogDo
	Select(conds ...field.Expr) IUmsMemberSignLogDo
	Where(conds ...gen.Condition) IUmsMemberSignLogDo
	Order(conds ...field.Expr) IUmsMemberSignLogDo
	Distinct(cols ...field.Expr) IUmsMemberSignLogDo
	Omit(cols ...field.Expr) IUmsMemberSignLogDo
	Join(table schema.Tabler, on ...field.Expr) IUmsMemberSignLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUmsMemberSignLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUmsMemberSignLogDo
	Group(cols ...field.Expr) IUmsMemberSignLogDo
	Having(conds ...gen.Condition) IUmsMemberSignLogDo
	Limit(limit int) IUmsMemberSignLogDo
	Offset(offset int) IUmsMemberSignLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsMemberSignLogDo
	Unscoped() IUmsMemberSignLogDo
	Create(values ...*model.UmsMemberSignLog) error
	CreateInBatches(values []*model.UmsMemberSignLog, batchSize int) error
	Save(values ...*model.UmsMemberSignLog) error
	First() (*model.UmsMemberSignLog, error)
	Take() (*model.UmsMemberSignLog, error)
	Last() (*model.UmsMemberSignLog, error)
	Find() ([]*model.UmsMemberSignLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsMemberSignLog, err error)
	FindInBatches(result *[]*model.UmsMemberSignLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UmsMemberSignLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUmsMemberSignLogDo
	Assign(attrs ...field.AssignExpr) IUmsMemberSignLogDo
	Joins(fields ...field.RelationField) IUmsMemberSignLogDo
	Preload(fields ...field.RelationField) IUmsMemberSignLogDo
	FirstOrInit() (*model.UmsMemberSignLog, error)
	FirstOrCreate() (*model.UmsMemberSignLog, error)
	FindByPage(offset int, limit int) (result []*model.UmsMemberSignLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUmsMemberSignLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u umsMemberSignLogDo) Debug() IUmsMemberSignLogDo {
	return u.withDO(u.DO.Debug())
}

func (u umsMemberSignLogDo) WithContext(ctx context.Context) IUmsMemberSignLogDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u umsMemberSignLogDo) ReadDB() IUmsMemberSignLogDo {
	return u.Clauses(dbresolver.Read)
}

func (u umsMemberSignLogDo) WriteDB() IUmsMemberSignLogDo {
	return u.Clauses(dbresolver.Write)
}

func (u umsMemberSignLogDo) Session(config *gorm.Session) IUmsMemberSignLogDo {
	return u.withDO(u.DO.Session(config))
}

func (u umsMemberSignLogDo) Clauses(conds ...clause.Expression) IUmsMemberSignLogDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u umsMemberSignLogDo) Returning(value interface{}, columns ...string) IUmsMemberSignLogDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u umsMemberSignLogDo) Not(conds ...gen.Condition) IUmsMemberSignLogDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u umsMemberSignLogDo) Or(conds ...gen.Condition) IUmsMemberSignLogDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u umsMemberSignLogDo) Select(conds ...field.Expr) IUmsMemberSignLogDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u umsMemberSignLogDo) Where(conds ...gen.Condition) IUmsMemberSignLogDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u umsMemberSignLogDo) Order(conds ...field.Expr) IUmsMemberSignLogDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u umsMemberSignLogDo) Distinct(cols ...field.Expr) IUmsMemberSignLogDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u umsMemberSignLogDo) Omit(cols ...field.Expr) IUmsMemberSignLogDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u umsMemberSignLogDo) Join(table schema.Tabler, on ...field.Expr) IUmsMemberSignLogDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u umsMemberSignLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUmsMemberSignLogDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u umsMemberSignLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IUmsMemberSignLogDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u umsMemberSignLogDo) Group(cols ...field.Expr) IUmsMemberSignLogDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u umsMemberSignLogDo) Having(conds ...gen.Condition) IUmsMemberSignLogDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u umsMemberSignLogDo) Limit(limit int) IUmsMemberSignLogDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u umsMemberSignLogDo) Offset(offset int) IUmsMemberSignLogDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u umsMemberSignLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsMemberSignLogDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u umsMemberSignLogDo) Unscoped() IUmsMemberSignLogDo {
	return u.withDO(u.DO.Unscoped())
}

func (u umsMemberSignLogDo) Create(values ...*model.UmsMemberSignLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u umsMemberSignLogDo) CreateInBatches(values []*model.UmsMemberSignLog, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u umsMemberSignLogDo) Save(values ...*model.UmsMemberSignLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u umsMemberSignLogDo) First() (*model.UmsMemberSignLog, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberSignLog), nil
	}
}

func (u umsMemberSignLogDo) Take() (*model.UmsMemberSignLog, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberSignLog), nil
	}
}

func (u umsMemberSignLogDo) Last() (*model.UmsMemberSignLog, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberSignLog), nil
	}
}

func (u umsMemberSignLogDo) Find() ([]*model.UmsMemberSignLog, error) {
	result, err := u.DO.Find()
	return result.([]*model.UmsMemberSignLog), err
}

func (u umsMemberSignLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsMemberSignLog, err error) {
	buf := make([]*model.UmsMemberSignLog, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u umsMemberSignLogDo) FindInBatches(result *[]*model.UmsMemberSignLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u umsMemberSignLogDo) Attrs(attrs ...field.AssignExpr) IUmsMemberSignLogDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u umsMemberSignLogDo) Assign(attrs ...field.AssignExpr) IUmsMemberSignLogDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u umsMemberSignLogDo) Joins(fields ...field.RelationField) IUmsMemberSignLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u umsMemberSignLogDo) Preload(fields ...field.RelationField) IUmsMemberSignLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u umsMemberSignLogDo) FirstOrInit() (*model.UmsMemberSignLog, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberSignLog), nil
	}
}

func (u umsMemberSignLogDo) FirstOrCreate() (*model.UmsMemberSignLog, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberSignLog), nil
	}
}

func (u umsMemberSignLogDo) FindByPage(offset int, limit int) (result []*model.UmsMemberSignLog, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u umsMemberSignLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u umsMemberSignLogDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u umsMemberSignLogDo) Delete(models ...*model.UmsMemberSignLog) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *umsMemberSignLogDo) withDO(do gen.Dao) *umsMemberSignLogDo {
	u.DO = *do.(*gen.DO)
	return u
}
