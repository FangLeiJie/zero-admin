// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/ums/gen/model"
)

func newUmsMemberTaskRelation(db *gorm.DB, opts ...gen.DOOption) umsMemberTaskRelation {
	_umsMemberTaskRelation := umsMemberTaskRelation{}

	_umsMemberTaskRelation.umsMemberTaskRelationDo.UseDB(db, opts...)
	_umsMemberTaskRelation.umsMemberTaskRelationDo.UseModel(&model.UmsMemberTaskRelation{})

	tableName := _umsMemberTaskRelation.umsMemberTaskRelationDo.TableName()
	_umsMemberTaskRelation.ALL = field.NewAsterisk(tableName)
	_umsMemberTaskRelation.ID = field.NewInt64(tableName, "id")
	_umsMemberTaskRelation.MemberID = field.NewInt64(tableName, "member_id")
	_umsMemberTaskRelation.TaskID = field.NewInt64(tableName, "task_id")
	_umsMemberTaskRelation.CreateTime = field.NewTime(tableName, "create_time")

	_umsMemberTaskRelation.fillFieldMap()

	return _umsMemberTaskRelation
}

// umsMemberTaskRelation 会员任务关联表
type umsMemberTaskRelation struct {
	umsMemberTaskRelationDo umsMemberTaskRelationDo

	ALL        field.Asterisk
	ID         field.Int64 // 主键ID
	MemberID   field.Int64 // 会员ID
	TaskID     field.Int64 // 任务ID
	CreateTime field.Time  // 创建时间

	fieldMap map[string]field.Expr
}

func (u umsMemberTaskRelation) Table(newTableName string) *umsMemberTaskRelation {
	u.umsMemberTaskRelationDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u umsMemberTaskRelation) As(alias string) *umsMemberTaskRelation {
	u.umsMemberTaskRelationDo.DO = *(u.umsMemberTaskRelationDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *umsMemberTaskRelation) updateTableName(table string) *umsMemberTaskRelation {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.MemberID = field.NewInt64(table, "member_id")
	u.TaskID = field.NewInt64(table, "task_id")
	u.CreateTime = field.NewTime(table, "create_time")

	u.fillFieldMap()

	return u
}

func (u *umsMemberTaskRelation) WithContext(ctx context.Context) IUmsMemberTaskRelationDo {
	return u.umsMemberTaskRelationDo.WithContext(ctx)
}

func (u umsMemberTaskRelation) TableName() string { return u.umsMemberTaskRelationDo.TableName() }

func (u umsMemberTaskRelation) Alias() string { return u.umsMemberTaskRelationDo.Alias() }

func (u umsMemberTaskRelation) Columns(cols ...field.Expr) gen.Columns {
	return u.umsMemberTaskRelationDo.Columns(cols...)
}

func (u *umsMemberTaskRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *umsMemberTaskRelation) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 4)
	u.fieldMap["id"] = u.ID
	u.fieldMap["member_id"] = u.MemberID
	u.fieldMap["task_id"] = u.TaskID
	u.fieldMap["create_time"] = u.CreateTime
}

func (u umsMemberTaskRelation) clone(db *gorm.DB) umsMemberTaskRelation {
	u.umsMemberTaskRelationDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u umsMemberTaskRelation) replaceDB(db *gorm.DB) umsMemberTaskRelation {
	u.umsMemberTaskRelationDo.ReplaceDB(db)
	return u
}

type umsMemberTaskRelationDo struct{ gen.DO }

type IUmsMemberTaskRelationDo interface {
	gen.SubQuery
	Debug() IUmsMemberTaskRelationDo
	WithContext(ctx context.Context) IUmsMemberTaskRelationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUmsMemberTaskRelationDo
	WriteDB() IUmsMemberTaskRelationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUmsMemberTaskRelationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUmsMemberTaskRelationDo
	Not(conds ...gen.Condition) IUmsMemberTaskRelationDo
	Or(conds ...gen.Condition) IUmsMemberTaskRelationDo
	Select(conds ...field.Expr) IUmsMemberTaskRelationDo
	Where(conds ...gen.Condition) IUmsMemberTaskRelationDo
	Order(conds ...field.Expr) IUmsMemberTaskRelationDo
	Distinct(cols ...field.Expr) IUmsMemberTaskRelationDo
	Omit(cols ...field.Expr) IUmsMemberTaskRelationDo
	Join(table schema.Tabler, on ...field.Expr) IUmsMemberTaskRelationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUmsMemberTaskRelationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUmsMemberTaskRelationDo
	Group(cols ...field.Expr) IUmsMemberTaskRelationDo
	Having(conds ...gen.Condition) IUmsMemberTaskRelationDo
	Limit(limit int) IUmsMemberTaskRelationDo
	Offset(offset int) IUmsMemberTaskRelationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsMemberTaskRelationDo
	Unscoped() IUmsMemberTaskRelationDo
	Create(values ...*model.UmsMemberTaskRelation) error
	CreateInBatches(values []*model.UmsMemberTaskRelation, batchSize int) error
	Save(values ...*model.UmsMemberTaskRelation) error
	First() (*model.UmsMemberTaskRelation, error)
	Take() (*model.UmsMemberTaskRelation, error)
	Last() (*model.UmsMemberTaskRelation, error)
	Find() ([]*model.UmsMemberTaskRelation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsMemberTaskRelation, err error)
	FindInBatches(result *[]*model.UmsMemberTaskRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UmsMemberTaskRelation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUmsMemberTaskRelationDo
	Assign(attrs ...field.AssignExpr) IUmsMemberTaskRelationDo
	Joins(fields ...field.RelationField) IUmsMemberTaskRelationDo
	Preload(fields ...field.RelationField) IUmsMemberTaskRelationDo
	FirstOrInit() (*model.UmsMemberTaskRelation, error)
	FirstOrCreate() (*model.UmsMemberTaskRelation, error)
	FindByPage(offset int, limit int) (result []*model.UmsMemberTaskRelation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUmsMemberTaskRelationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u umsMemberTaskRelationDo) Debug() IUmsMemberTaskRelationDo {
	return u.withDO(u.DO.Debug())
}

func (u umsMemberTaskRelationDo) WithContext(ctx context.Context) IUmsMemberTaskRelationDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u umsMemberTaskRelationDo) ReadDB() IUmsMemberTaskRelationDo {
	return u.Clauses(dbresolver.Read)
}

func (u umsMemberTaskRelationDo) WriteDB() IUmsMemberTaskRelationDo {
	return u.Clauses(dbresolver.Write)
}

func (u umsMemberTaskRelationDo) Session(config *gorm.Session) IUmsMemberTaskRelationDo {
	return u.withDO(u.DO.Session(config))
}

func (u umsMemberTaskRelationDo) Clauses(conds ...clause.Expression) IUmsMemberTaskRelationDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u umsMemberTaskRelationDo) Returning(value interface{}, columns ...string) IUmsMemberTaskRelationDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u umsMemberTaskRelationDo) Not(conds ...gen.Condition) IUmsMemberTaskRelationDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u umsMemberTaskRelationDo) Or(conds ...gen.Condition) IUmsMemberTaskRelationDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u umsMemberTaskRelationDo) Select(conds ...field.Expr) IUmsMemberTaskRelationDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u umsMemberTaskRelationDo) Where(conds ...gen.Condition) IUmsMemberTaskRelationDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u umsMemberTaskRelationDo) Order(conds ...field.Expr) IUmsMemberTaskRelationDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u umsMemberTaskRelationDo) Distinct(cols ...field.Expr) IUmsMemberTaskRelationDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u umsMemberTaskRelationDo) Omit(cols ...field.Expr) IUmsMemberTaskRelationDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u umsMemberTaskRelationDo) Join(table schema.Tabler, on ...field.Expr) IUmsMemberTaskRelationDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u umsMemberTaskRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUmsMemberTaskRelationDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u umsMemberTaskRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) IUmsMemberTaskRelationDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u umsMemberTaskRelationDo) Group(cols ...field.Expr) IUmsMemberTaskRelationDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u umsMemberTaskRelationDo) Having(conds ...gen.Condition) IUmsMemberTaskRelationDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u umsMemberTaskRelationDo) Limit(limit int) IUmsMemberTaskRelationDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u umsMemberTaskRelationDo) Offset(offset int) IUmsMemberTaskRelationDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u umsMemberTaskRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUmsMemberTaskRelationDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u umsMemberTaskRelationDo) Unscoped() IUmsMemberTaskRelationDo {
	return u.withDO(u.DO.Unscoped())
}

func (u umsMemberTaskRelationDo) Create(values ...*model.UmsMemberTaskRelation) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u umsMemberTaskRelationDo) CreateInBatches(values []*model.UmsMemberTaskRelation, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u umsMemberTaskRelationDo) Save(values ...*model.UmsMemberTaskRelation) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u umsMemberTaskRelationDo) First() (*model.UmsMemberTaskRelation, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberTaskRelation), nil
	}
}

func (u umsMemberTaskRelationDo) Take() (*model.UmsMemberTaskRelation, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberTaskRelation), nil
	}
}

func (u umsMemberTaskRelationDo) Last() (*model.UmsMemberTaskRelation, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberTaskRelation), nil
	}
}

func (u umsMemberTaskRelationDo) Find() ([]*model.UmsMemberTaskRelation, error) {
	result, err := u.DO.Find()
	return result.([]*model.UmsMemberTaskRelation), err
}

func (u umsMemberTaskRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UmsMemberTaskRelation, err error) {
	buf := make([]*model.UmsMemberTaskRelation, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u umsMemberTaskRelationDo) FindInBatches(result *[]*model.UmsMemberTaskRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u umsMemberTaskRelationDo) Attrs(attrs ...field.AssignExpr) IUmsMemberTaskRelationDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u umsMemberTaskRelationDo) Assign(attrs ...field.AssignExpr) IUmsMemberTaskRelationDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u umsMemberTaskRelationDo) Joins(fields ...field.RelationField) IUmsMemberTaskRelationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u umsMemberTaskRelationDo) Preload(fields ...field.RelationField) IUmsMemberTaskRelationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u umsMemberTaskRelationDo) FirstOrInit() (*model.UmsMemberTaskRelation, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberTaskRelation), nil
	}
}

func (u umsMemberTaskRelationDo) FirstOrCreate() (*model.UmsMemberTaskRelation, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UmsMemberTaskRelation), nil
	}
}

func (u umsMemberTaskRelationDo) FindByPage(offset int, limit int) (result []*model.UmsMemberTaskRelation, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u umsMemberTaskRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u umsMemberTaskRelationDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u umsMemberTaskRelationDo) Delete(models ...*model.UmsMemberTaskRelation) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *umsMemberTaskRelationDo) withDO(do gen.Dao) *umsMemberTaskRelationDo {
	u.DO = *do.(*gen.DO)
	return u
}
