// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                                   = new(Query)
	PmsFeightTemplate                   *pmsFeightTemplate
	PmsMemberPrice                      *pmsMemberPrice
	PmsProductAttribute                 *pmsProductAttribute
	PmsProductAttributeGroup            *pmsProductAttributeGroup
	PmsProductAttributeValue            *pmsProductAttributeValue
	PmsProductBrand                     *pmsProductBrand
	PmsProductCategory                  *pmsProductCategory
	PmsProductCategoryAttributeRelation *pmsProductCategoryAttributeRelation
	PmsProductFullReduction             *pmsProductFullReduction
	PmsProductLadder                    *pmsProductLadder
	PmsProductSku                       *pmsProductSku
	PmsProductSpec                      *pmsProductSpec
	PmsProductSpecValue                 *pmsProductSpecValue
	PmsProductSpu                       *pmsProductSpu
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	PmsFeightTemplate = &Q.PmsFeightTemplate
	PmsMemberPrice = &Q.PmsMemberPrice
	PmsProductAttribute = &Q.PmsProductAttribute
	PmsProductAttributeGroup = &Q.PmsProductAttributeGroup
	PmsProductAttributeValue = &Q.PmsProductAttributeValue
	PmsProductBrand = &Q.PmsProductBrand
	PmsProductCategory = &Q.PmsProductCategory
	PmsProductCategoryAttributeRelation = &Q.PmsProductCategoryAttributeRelation
	PmsProductFullReduction = &Q.PmsProductFullReduction
	PmsProductLadder = &Q.PmsProductLadder
	PmsProductSku = &Q.PmsProductSku
	PmsProductSpec = &Q.PmsProductSpec
	PmsProductSpecValue = &Q.PmsProductSpecValue
	PmsProductSpu = &Q.PmsProductSpu
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                                  db,
		PmsFeightTemplate:                   newPmsFeightTemplate(db, opts...),
		PmsMemberPrice:                      newPmsMemberPrice(db, opts...),
		PmsProductAttribute:                 newPmsProductAttribute(db, opts...),
		PmsProductAttributeGroup:            newPmsProductAttributeGroup(db, opts...),
		PmsProductAttributeValue:            newPmsProductAttributeValue(db, opts...),
		PmsProductBrand:                     newPmsProductBrand(db, opts...),
		PmsProductCategory:                  newPmsProductCategory(db, opts...),
		PmsProductCategoryAttributeRelation: newPmsProductCategoryAttributeRelation(db, opts...),
		PmsProductFullReduction:             newPmsProductFullReduction(db, opts...),
		PmsProductLadder:                    newPmsProductLadder(db, opts...),
		PmsProductSku:                       newPmsProductSku(db, opts...),
		PmsProductSpec:                      newPmsProductSpec(db, opts...),
		PmsProductSpecValue:                 newPmsProductSpecValue(db, opts...),
		PmsProductSpu:                       newPmsProductSpu(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	PmsFeightTemplate                   pmsFeightTemplate
	PmsMemberPrice                      pmsMemberPrice
	PmsProductAttribute                 pmsProductAttribute
	PmsProductAttributeGroup            pmsProductAttributeGroup
	PmsProductAttributeValue            pmsProductAttributeValue
	PmsProductBrand                     pmsProductBrand
	PmsProductCategory                  pmsProductCategory
	PmsProductCategoryAttributeRelation pmsProductCategoryAttributeRelation
	PmsProductFullReduction             pmsProductFullReduction
	PmsProductLadder                    pmsProductLadder
	PmsProductSku                       pmsProductSku
	PmsProductSpec                      pmsProductSpec
	PmsProductSpecValue                 pmsProductSpecValue
	PmsProductSpu                       pmsProductSpu
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                                  db,
		PmsFeightTemplate:                   q.PmsFeightTemplate.clone(db),
		PmsMemberPrice:                      q.PmsMemberPrice.clone(db),
		PmsProductAttribute:                 q.PmsProductAttribute.clone(db),
		PmsProductAttributeGroup:            q.PmsProductAttributeGroup.clone(db),
		PmsProductAttributeValue:            q.PmsProductAttributeValue.clone(db),
		PmsProductBrand:                     q.PmsProductBrand.clone(db),
		PmsProductCategory:                  q.PmsProductCategory.clone(db),
		PmsProductCategoryAttributeRelation: q.PmsProductCategoryAttributeRelation.clone(db),
		PmsProductFullReduction:             q.PmsProductFullReduction.clone(db),
		PmsProductLadder:                    q.PmsProductLadder.clone(db),
		PmsProductSku:                       q.PmsProductSku.clone(db),
		PmsProductSpec:                      q.PmsProductSpec.clone(db),
		PmsProductSpecValue:                 q.PmsProductSpecValue.clone(db),
		PmsProductSpu:                       q.PmsProductSpu.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                                  db,
		PmsFeightTemplate:                   q.PmsFeightTemplate.replaceDB(db),
		PmsMemberPrice:                      q.PmsMemberPrice.replaceDB(db),
		PmsProductAttribute:                 q.PmsProductAttribute.replaceDB(db),
		PmsProductAttributeGroup:            q.PmsProductAttributeGroup.replaceDB(db),
		PmsProductAttributeValue:            q.PmsProductAttributeValue.replaceDB(db),
		PmsProductBrand:                     q.PmsProductBrand.replaceDB(db),
		PmsProductCategory:                  q.PmsProductCategory.replaceDB(db),
		PmsProductCategoryAttributeRelation: q.PmsProductCategoryAttributeRelation.replaceDB(db),
		PmsProductFullReduction:             q.PmsProductFullReduction.replaceDB(db),
		PmsProductLadder:                    q.PmsProductLadder.replaceDB(db),
		PmsProductSku:                       q.PmsProductSku.replaceDB(db),
		PmsProductSpec:                      q.PmsProductSpec.replaceDB(db),
		PmsProductSpecValue:                 q.PmsProductSpecValue.replaceDB(db),
		PmsProductSpu:                       q.PmsProductSpu.replaceDB(db),
	}
}

type queryCtx struct {
	PmsFeightTemplate                   IPmsFeightTemplateDo
	PmsMemberPrice                      IPmsMemberPriceDo
	PmsProductAttribute                 IPmsProductAttributeDo
	PmsProductAttributeGroup            IPmsProductAttributeGroupDo
	PmsProductAttributeValue            IPmsProductAttributeValueDo
	PmsProductBrand                     IPmsProductBrandDo
	PmsProductCategory                  IPmsProductCategoryDo
	PmsProductCategoryAttributeRelation IPmsProductCategoryAttributeRelationDo
	PmsProductFullReduction             IPmsProductFullReductionDo
	PmsProductLadder                    IPmsProductLadderDo
	PmsProductSku                       IPmsProductSkuDo
	PmsProductSpec                      IPmsProductSpecDo
	PmsProductSpecValue                 IPmsProductSpecValueDo
	PmsProductSpu                       IPmsProductSpuDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		PmsFeightTemplate:                   q.PmsFeightTemplate.WithContext(ctx),
		PmsMemberPrice:                      q.PmsMemberPrice.WithContext(ctx),
		PmsProductAttribute:                 q.PmsProductAttribute.WithContext(ctx),
		PmsProductAttributeGroup:            q.PmsProductAttributeGroup.WithContext(ctx),
		PmsProductAttributeValue:            q.PmsProductAttributeValue.WithContext(ctx),
		PmsProductBrand:                     q.PmsProductBrand.WithContext(ctx),
		PmsProductCategory:                  q.PmsProductCategory.WithContext(ctx),
		PmsProductCategoryAttributeRelation: q.PmsProductCategoryAttributeRelation.WithContext(ctx),
		PmsProductFullReduction:             q.PmsProductFullReduction.WithContext(ctx),
		PmsProductLadder:                    q.PmsProductLadder.WithContext(ctx),
		PmsProductSku:                       q.PmsProductSku.WithContext(ctx),
		PmsProductSpec:                      q.PmsProductSpec.WithContext(ctx),
		PmsProductSpecValue:                 q.PmsProductSpecValue.WithContext(ctx),
		PmsProductSpu:                       q.PmsProductSpu.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
