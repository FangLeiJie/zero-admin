// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/pms/gen/model"
)

func newPmsProductSpec(db *gorm.DB, opts ...gen.DOOption) pmsProductSpec {
	_pmsProductSpec := pmsProductSpec{}

	_pmsProductSpec.pmsProductSpecDo.UseDB(db, opts...)
	_pmsProductSpec.pmsProductSpecDo.UseModel(&model.PmsProductSpec{})

	tableName := _pmsProductSpec.pmsProductSpecDo.TableName()
	_pmsProductSpec.ALL = field.NewAsterisk(tableName)
	_pmsProductSpec.ID = field.NewInt64(tableName, "id")
	_pmsProductSpec.CategoryID = field.NewInt64(tableName, "category_id")
	_pmsProductSpec.Name = field.NewString(tableName, "name")
	_pmsProductSpec.Sort = field.NewInt32(tableName, "sort")
	_pmsProductSpec.Status = field.NewInt32(tableName, "status")
	_pmsProductSpec.CreateBy = field.NewInt64(tableName, "create_by")
	_pmsProductSpec.CreateTime = field.NewTime(tableName, "create_time")
	_pmsProductSpec.UpdateBy = field.NewInt64(tableName, "update_by")
	_pmsProductSpec.UpdateTime = field.NewTime(tableName, "update_time")
	_pmsProductSpec.IsDeleted = field.NewInt32(tableName, "is_deleted")

	_pmsProductSpec.fillFieldMap()

	return _pmsProductSpec
}

// pmsProductSpec 商品规格表
type pmsProductSpec struct {
	pmsProductSpecDo pmsProductSpecDo

	ALL        field.Asterisk
	ID         field.Int64
	CategoryID field.Int64  // 分类ID
	Name       field.String // 规格名称
	Sort       field.Int32  // 排序
	Status     field.Int32  // 状态：0->禁用；1->启用
	CreateBy   field.Int64  // 创建人ID
	CreateTime field.Time   // 创建时间
	UpdateBy   field.Int64  // 更新人ID
	UpdateTime field.Time   // 更新时间
	IsDeleted  field.Int32  // 是否删除

	fieldMap map[string]field.Expr
}

func (p pmsProductSpec) Table(newTableName string) *pmsProductSpec {
	p.pmsProductSpecDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pmsProductSpec) As(alias string) *pmsProductSpec {
	p.pmsProductSpecDo.DO = *(p.pmsProductSpecDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pmsProductSpec) updateTableName(table string) *pmsProductSpec {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.CategoryID = field.NewInt64(table, "category_id")
	p.Name = field.NewString(table, "name")
	p.Sort = field.NewInt32(table, "sort")
	p.Status = field.NewInt32(table, "status")
	p.CreateBy = field.NewInt64(table, "create_by")
	p.CreateTime = field.NewTime(table, "create_time")
	p.UpdateBy = field.NewInt64(table, "update_by")
	p.UpdateTime = field.NewTime(table, "update_time")
	p.IsDeleted = field.NewInt32(table, "is_deleted")

	p.fillFieldMap()

	return p
}

func (p *pmsProductSpec) WithContext(ctx context.Context) IPmsProductSpecDo {
	return p.pmsProductSpecDo.WithContext(ctx)
}

func (p pmsProductSpec) TableName() string { return p.pmsProductSpecDo.TableName() }

func (p pmsProductSpec) Alias() string { return p.pmsProductSpecDo.Alias() }

func (p pmsProductSpec) Columns(cols ...field.Expr) gen.Columns {
	return p.pmsProductSpecDo.Columns(cols...)
}

func (p *pmsProductSpec) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pmsProductSpec) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 10)
	p.fieldMap["id"] = p.ID
	p.fieldMap["category_id"] = p.CategoryID
	p.fieldMap["name"] = p.Name
	p.fieldMap["sort"] = p.Sort
	p.fieldMap["status"] = p.Status
	p.fieldMap["create_by"] = p.CreateBy
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["update_by"] = p.UpdateBy
	p.fieldMap["update_time"] = p.UpdateTime
	p.fieldMap["is_deleted"] = p.IsDeleted
}

func (p pmsProductSpec) clone(db *gorm.DB) pmsProductSpec {
	p.pmsProductSpecDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pmsProductSpec) replaceDB(db *gorm.DB) pmsProductSpec {
	p.pmsProductSpecDo.ReplaceDB(db)
	return p
}

type pmsProductSpecDo struct{ gen.DO }

type IPmsProductSpecDo interface {
	gen.SubQuery
	Debug() IPmsProductSpecDo
	WithContext(ctx context.Context) IPmsProductSpecDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPmsProductSpecDo
	WriteDB() IPmsProductSpecDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPmsProductSpecDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPmsProductSpecDo
	Not(conds ...gen.Condition) IPmsProductSpecDo
	Or(conds ...gen.Condition) IPmsProductSpecDo
	Select(conds ...field.Expr) IPmsProductSpecDo
	Where(conds ...gen.Condition) IPmsProductSpecDo
	Order(conds ...field.Expr) IPmsProductSpecDo
	Distinct(cols ...field.Expr) IPmsProductSpecDo
	Omit(cols ...field.Expr) IPmsProductSpecDo
	Join(table schema.Tabler, on ...field.Expr) IPmsProductSpecDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPmsProductSpecDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPmsProductSpecDo
	Group(cols ...field.Expr) IPmsProductSpecDo
	Having(conds ...gen.Condition) IPmsProductSpecDo
	Limit(limit int) IPmsProductSpecDo
	Offset(offset int) IPmsProductSpecDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsProductSpecDo
	Unscoped() IPmsProductSpecDo
	Create(values ...*model.PmsProductSpec) error
	CreateInBatches(values []*model.PmsProductSpec, batchSize int) error
	Save(values ...*model.PmsProductSpec) error
	First() (*model.PmsProductSpec, error)
	Take() (*model.PmsProductSpec, error)
	Last() (*model.PmsProductSpec, error)
	Find() ([]*model.PmsProductSpec, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsProductSpec, err error)
	FindInBatches(result *[]*model.PmsProductSpec, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PmsProductSpec) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPmsProductSpecDo
	Assign(attrs ...field.AssignExpr) IPmsProductSpecDo
	Joins(fields ...field.RelationField) IPmsProductSpecDo
	Preload(fields ...field.RelationField) IPmsProductSpecDo
	FirstOrInit() (*model.PmsProductSpec, error)
	FirstOrCreate() (*model.PmsProductSpec, error)
	FindByPage(offset int, limit int) (result []*model.PmsProductSpec, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPmsProductSpecDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pmsProductSpecDo) Debug() IPmsProductSpecDo {
	return p.withDO(p.DO.Debug())
}

func (p pmsProductSpecDo) WithContext(ctx context.Context) IPmsProductSpecDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pmsProductSpecDo) ReadDB() IPmsProductSpecDo {
	return p.Clauses(dbresolver.Read)
}

func (p pmsProductSpecDo) WriteDB() IPmsProductSpecDo {
	return p.Clauses(dbresolver.Write)
}

func (p pmsProductSpecDo) Session(config *gorm.Session) IPmsProductSpecDo {
	return p.withDO(p.DO.Session(config))
}

func (p pmsProductSpecDo) Clauses(conds ...clause.Expression) IPmsProductSpecDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pmsProductSpecDo) Returning(value interface{}, columns ...string) IPmsProductSpecDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pmsProductSpecDo) Not(conds ...gen.Condition) IPmsProductSpecDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pmsProductSpecDo) Or(conds ...gen.Condition) IPmsProductSpecDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pmsProductSpecDo) Select(conds ...field.Expr) IPmsProductSpecDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pmsProductSpecDo) Where(conds ...gen.Condition) IPmsProductSpecDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pmsProductSpecDo) Order(conds ...field.Expr) IPmsProductSpecDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pmsProductSpecDo) Distinct(cols ...field.Expr) IPmsProductSpecDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pmsProductSpecDo) Omit(cols ...field.Expr) IPmsProductSpecDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pmsProductSpecDo) Join(table schema.Tabler, on ...field.Expr) IPmsProductSpecDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pmsProductSpecDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPmsProductSpecDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pmsProductSpecDo) RightJoin(table schema.Tabler, on ...field.Expr) IPmsProductSpecDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pmsProductSpecDo) Group(cols ...field.Expr) IPmsProductSpecDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pmsProductSpecDo) Having(conds ...gen.Condition) IPmsProductSpecDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pmsProductSpecDo) Limit(limit int) IPmsProductSpecDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pmsProductSpecDo) Offset(offset int) IPmsProductSpecDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pmsProductSpecDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsProductSpecDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pmsProductSpecDo) Unscoped() IPmsProductSpecDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pmsProductSpecDo) Create(values ...*model.PmsProductSpec) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pmsProductSpecDo) CreateInBatches(values []*model.PmsProductSpec, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pmsProductSpecDo) Save(values ...*model.PmsProductSpec) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pmsProductSpecDo) First() (*model.PmsProductSpec, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductSpec), nil
	}
}

func (p pmsProductSpecDo) Take() (*model.PmsProductSpec, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductSpec), nil
	}
}

func (p pmsProductSpecDo) Last() (*model.PmsProductSpec, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductSpec), nil
	}
}

func (p pmsProductSpecDo) Find() ([]*model.PmsProductSpec, error) {
	result, err := p.DO.Find()
	return result.([]*model.PmsProductSpec), err
}

func (p pmsProductSpecDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsProductSpec, err error) {
	buf := make([]*model.PmsProductSpec, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pmsProductSpecDo) FindInBatches(result *[]*model.PmsProductSpec, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pmsProductSpecDo) Attrs(attrs ...field.AssignExpr) IPmsProductSpecDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pmsProductSpecDo) Assign(attrs ...field.AssignExpr) IPmsProductSpecDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pmsProductSpecDo) Joins(fields ...field.RelationField) IPmsProductSpecDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pmsProductSpecDo) Preload(fields ...field.RelationField) IPmsProductSpecDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pmsProductSpecDo) FirstOrInit() (*model.PmsProductSpec, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductSpec), nil
	}
}

func (p pmsProductSpecDo) FirstOrCreate() (*model.PmsProductSpec, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductSpec), nil
	}
}

func (p pmsProductSpecDo) FindByPage(offset int, limit int) (result []*model.PmsProductSpec, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pmsProductSpecDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pmsProductSpecDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pmsProductSpecDo) Delete(models ...*model.PmsProductSpec) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pmsProductSpecDo) withDO(do gen.Dao) *pmsProductSpecDo {
	p.DO = *do.(*gen.DO)
	return p
}
