// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/pms/gen/model"
)

func newPmsProductSpecValue(db *gorm.DB, opts ...gen.DOOption) pmsProductSpecValue {
	_pmsProductSpecValue := pmsProductSpecValue{}

	_pmsProductSpecValue.pmsProductSpecValueDo.UseDB(db, opts...)
	_pmsProductSpecValue.pmsProductSpecValueDo.UseModel(&model.PmsProductSpecValue{})

	tableName := _pmsProductSpecValue.pmsProductSpecValueDo.TableName()
	_pmsProductSpecValue.ALL = field.NewAsterisk(tableName)
	_pmsProductSpecValue.ID = field.NewInt64(tableName, "id")
	_pmsProductSpecValue.SpecID = field.NewInt64(tableName, "spec_id")
	_pmsProductSpecValue.Value = field.NewString(tableName, "value")
	_pmsProductSpecValue.Sort = field.NewInt32(tableName, "sort")
	_pmsProductSpecValue.Status = field.NewInt32(tableName, "status")
	_pmsProductSpecValue.CreateBy = field.NewInt64(tableName, "create_by")
	_pmsProductSpecValue.CreateTime = field.NewTime(tableName, "create_time")
	_pmsProductSpecValue.UpdateBy = field.NewInt64(tableName, "update_by")
	_pmsProductSpecValue.UpdateTime = field.NewTime(tableName, "update_time")
	_pmsProductSpecValue.IsDeleted = field.NewInt32(tableName, "is_deleted")

	_pmsProductSpecValue.fillFieldMap()

	return _pmsProductSpecValue
}

// pmsProductSpecValue 商品规格值表
type pmsProductSpecValue struct {
	pmsProductSpecValueDo pmsProductSpecValueDo

	ALL        field.Asterisk
	ID         field.Int64
	SpecID     field.Int64  // 规格ID
	Value      field.String // 规格值
	Sort       field.Int32  // 排序
	Status     field.Int32  // 状态：0->禁用；1->启用
	CreateBy   field.Int64  // 创建人ID
	CreateTime field.Time   // 创建时间
	UpdateBy   field.Int64  // 更新人ID
	UpdateTime field.Time   // 更新时间
	IsDeleted  field.Int32  // 是否删除

	fieldMap map[string]field.Expr
}

func (p pmsProductSpecValue) Table(newTableName string) *pmsProductSpecValue {
	p.pmsProductSpecValueDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pmsProductSpecValue) As(alias string) *pmsProductSpecValue {
	p.pmsProductSpecValueDo.DO = *(p.pmsProductSpecValueDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pmsProductSpecValue) updateTableName(table string) *pmsProductSpecValue {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.SpecID = field.NewInt64(table, "spec_id")
	p.Value = field.NewString(table, "value")
	p.Sort = field.NewInt32(table, "sort")
	p.Status = field.NewInt32(table, "status")
	p.CreateBy = field.NewInt64(table, "create_by")
	p.CreateTime = field.NewTime(table, "create_time")
	p.UpdateBy = field.NewInt64(table, "update_by")
	p.UpdateTime = field.NewTime(table, "update_time")
	p.IsDeleted = field.NewInt32(table, "is_deleted")

	p.fillFieldMap()

	return p
}

func (p *pmsProductSpecValue) WithContext(ctx context.Context) IPmsProductSpecValueDo {
	return p.pmsProductSpecValueDo.WithContext(ctx)
}

func (p pmsProductSpecValue) TableName() string { return p.pmsProductSpecValueDo.TableName() }

func (p pmsProductSpecValue) Alias() string { return p.pmsProductSpecValueDo.Alias() }

func (p pmsProductSpecValue) Columns(cols ...field.Expr) gen.Columns {
	return p.pmsProductSpecValueDo.Columns(cols...)
}

func (p *pmsProductSpecValue) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pmsProductSpecValue) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 10)
	p.fieldMap["id"] = p.ID
	p.fieldMap["spec_id"] = p.SpecID
	p.fieldMap["value"] = p.Value
	p.fieldMap["sort"] = p.Sort
	p.fieldMap["status"] = p.Status
	p.fieldMap["create_by"] = p.CreateBy
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["update_by"] = p.UpdateBy
	p.fieldMap["update_time"] = p.UpdateTime
	p.fieldMap["is_deleted"] = p.IsDeleted
}

func (p pmsProductSpecValue) clone(db *gorm.DB) pmsProductSpecValue {
	p.pmsProductSpecValueDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pmsProductSpecValue) replaceDB(db *gorm.DB) pmsProductSpecValue {
	p.pmsProductSpecValueDo.ReplaceDB(db)
	return p
}

type pmsProductSpecValueDo struct{ gen.DO }

type IPmsProductSpecValueDo interface {
	gen.SubQuery
	Debug() IPmsProductSpecValueDo
	WithContext(ctx context.Context) IPmsProductSpecValueDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPmsProductSpecValueDo
	WriteDB() IPmsProductSpecValueDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPmsProductSpecValueDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPmsProductSpecValueDo
	Not(conds ...gen.Condition) IPmsProductSpecValueDo
	Or(conds ...gen.Condition) IPmsProductSpecValueDo
	Select(conds ...field.Expr) IPmsProductSpecValueDo
	Where(conds ...gen.Condition) IPmsProductSpecValueDo
	Order(conds ...field.Expr) IPmsProductSpecValueDo
	Distinct(cols ...field.Expr) IPmsProductSpecValueDo
	Omit(cols ...field.Expr) IPmsProductSpecValueDo
	Join(table schema.Tabler, on ...field.Expr) IPmsProductSpecValueDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPmsProductSpecValueDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPmsProductSpecValueDo
	Group(cols ...field.Expr) IPmsProductSpecValueDo
	Having(conds ...gen.Condition) IPmsProductSpecValueDo
	Limit(limit int) IPmsProductSpecValueDo
	Offset(offset int) IPmsProductSpecValueDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsProductSpecValueDo
	Unscoped() IPmsProductSpecValueDo
	Create(values ...*model.PmsProductSpecValue) error
	CreateInBatches(values []*model.PmsProductSpecValue, batchSize int) error
	Save(values ...*model.PmsProductSpecValue) error
	First() (*model.PmsProductSpecValue, error)
	Take() (*model.PmsProductSpecValue, error)
	Last() (*model.PmsProductSpecValue, error)
	Find() ([]*model.PmsProductSpecValue, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsProductSpecValue, err error)
	FindInBatches(result *[]*model.PmsProductSpecValue, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PmsProductSpecValue) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPmsProductSpecValueDo
	Assign(attrs ...field.AssignExpr) IPmsProductSpecValueDo
	Joins(fields ...field.RelationField) IPmsProductSpecValueDo
	Preload(fields ...field.RelationField) IPmsProductSpecValueDo
	FirstOrInit() (*model.PmsProductSpecValue, error)
	FirstOrCreate() (*model.PmsProductSpecValue, error)
	FindByPage(offset int, limit int) (result []*model.PmsProductSpecValue, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPmsProductSpecValueDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pmsProductSpecValueDo) Debug() IPmsProductSpecValueDo {
	return p.withDO(p.DO.Debug())
}

func (p pmsProductSpecValueDo) WithContext(ctx context.Context) IPmsProductSpecValueDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pmsProductSpecValueDo) ReadDB() IPmsProductSpecValueDo {
	return p.Clauses(dbresolver.Read)
}

func (p pmsProductSpecValueDo) WriteDB() IPmsProductSpecValueDo {
	return p.Clauses(dbresolver.Write)
}

func (p pmsProductSpecValueDo) Session(config *gorm.Session) IPmsProductSpecValueDo {
	return p.withDO(p.DO.Session(config))
}

func (p pmsProductSpecValueDo) Clauses(conds ...clause.Expression) IPmsProductSpecValueDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pmsProductSpecValueDo) Returning(value interface{}, columns ...string) IPmsProductSpecValueDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pmsProductSpecValueDo) Not(conds ...gen.Condition) IPmsProductSpecValueDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pmsProductSpecValueDo) Or(conds ...gen.Condition) IPmsProductSpecValueDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pmsProductSpecValueDo) Select(conds ...field.Expr) IPmsProductSpecValueDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pmsProductSpecValueDo) Where(conds ...gen.Condition) IPmsProductSpecValueDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pmsProductSpecValueDo) Order(conds ...field.Expr) IPmsProductSpecValueDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pmsProductSpecValueDo) Distinct(cols ...field.Expr) IPmsProductSpecValueDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pmsProductSpecValueDo) Omit(cols ...field.Expr) IPmsProductSpecValueDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pmsProductSpecValueDo) Join(table schema.Tabler, on ...field.Expr) IPmsProductSpecValueDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pmsProductSpecValueDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPmsProductSpecValueDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pmsProductSpecValueDo) RightJoin(table schema.Tabler, on ...field.Expr) IPmsProductSpecValueDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pmsProductSpecValueDo) Group(cols ...field.Expr) IPmsProductSpecValueDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pmsProductSpecValueDo) Having(conds ...gen.Condition) IPmsProductSpecValueDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pmsProductSpecValueDo) Limit(limit int) IPmsProductSpecValueDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pmsProductSpecValueDo) Offset(offset int) IPmsProductSpecValueDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pmsProductSpecValueDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsProductSpecValueDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pmsProductSpecValueDo) Unscoped() IPmsProductSpecValueDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pmsProductSpecValueDo) Create(values ...*model.PmsProductSpecValue) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pmsProductSpecValueDo) CreateInBatches(values []*model.PmsProductSpecValue, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pmsProductSpecValueDo) Save(values ...*model.PmsProductSpecValue) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pmsProductSpecValueDo) First() (*model.PmsProductSpecValue, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductSpecValue), nil
	}
}

func (p pmsProductSpecValueDo) Take() (*model.PmsProductSpecValue, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductSpecValue), nil
	}
}

func (p pmsProductSpecValueDo) Last() (*model.PmsProductSpecValue, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductSpecValue), nil
	}
}

func (p pmsProductSpecValueDo) Find() ([]*model.PmsProductSpecValue, error) {
	result, err := p.DO.Find()
	return result.([]*model.PmsProductSpecValue), err
}

func (p pmsProductSpecValueDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsProductSpecValue, err error) {
	buf := make([]*model.PmsProductSpecValue, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pmsProductSpecValueDo) FindInBatches(result *[]*model.PmsProductSpecValue, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pmsProductSpecValueDo) Attrs(attrs ...field.AssignExpr) IPmsProductSpecValueDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pmsProductSpecValueDo) Assign(attrs ...field.AssignExpr) IPmsProductSpecValueDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pmsProductSpecValueDo) Joins(fields ...field.RelationField) IPmsProductSpecValueDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pmsProductSpecValueDo) Preload(fields ...field.RelationField) IPmsProductSpecValueDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pmsProductSpecValueDo) FirstOrInit() (*model.PmsProductSpecValue, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductSpecValue), nil
	}
}

func (p pmsProductSpecValueDo) FirstOrCreate() (*model.PmsProductSpecValue, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductSpecValue), nil
	}
}

func (p pmsProductSpecValueDo) FindByPage(offset int, limit int) (result []*model.PmsProductSpecValue, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pmsProductSpecValueDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pmsProductSpecValueDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pmsProductSpecValueDo) Delete(models ...*model.PmsProductSpecValue) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pmsProductSpecValueDo) withDO(do gen.Dao) *pmsProductSpecValueDo {
	p.DO = *do.(*gen.DO)
	return p
}
