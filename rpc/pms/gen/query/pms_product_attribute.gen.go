// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/pms/gen/model"
)

func newPmsProductAttribute(db *gorm.DB, opts ...gen.DOOption) pmsProductAttribute {
	_pmsProductAttribute := pmsProductAttribute{}

	_pmsProductAttribute.pmsProductAttributeDo.UseDB(db, opts...)
	_pmsProductAttribute.pmsProductAttributeDo.UseModel(&model.PmsProductAttribute{})

	tableName := _pmsProductAttribute.pmsProductAttributeDo.TableName()
	_pmsProductAttribute.ALL = field.NewAsterisk(tableName)
	_pmsProductAttribute.ID = field.NewInt64(tableName, "id")
	_pmsProductAttribute.GroupID = field.NewInt64(tableName, "group_id")
	_pmsProductAttribute.Name = field.NewString(tableName, "name")
	_pmsProductAttribute.InputType = field.NewInt32(tableName, "input_type")
	_pmsProductAttribute.ValueType = field.NewInt32(tableName, "value_type")
	_pmsProductAttribute.InputList = field.NewString(tableName, "input_list")
	_pmsProductAttribute.Unit = field.NewString(tableName, "unit")
	_pmsProductAttribute.IsRequired = field.NewInt32(tableName, "is_required")
	_pmsProductAttribute.IsSearchable = field.NewInt32(tableName, "is_searchable")
	_pmsProductAttribute.IsShow = field.NewInt32(tableName, "is_show")
	_pmsProductAttribute.Sort = field.NewInt32(tableName, "sort")
	_pmsProductAttribute.Status = field.NewInt32(tableName, "status")
	_pmsProductAttribute.CreateBy = field.NewInt64(tableName, "create_by")
	_pmsProductAttribute.CreateTime = field.NewTime(tableName, "create_time")
	_pmsProductAttribute.UpdateBy = field.NewInt64(tableName, "update_by")
	_pmsProductAttribute.UpdateTime = field.NewTime(tableName, "update_time")
	_pmsProductAttribute.IsDeleted = field.NewInt32(tableName, "is_deleted")

	_pmsProductAttribute.fillFieldMap()

	return _pmsProductAttribute
}

// pmsProductAttribute 商品属性表
type pmsProductAttribute struct {
	pmsProductAttributeDo pmsProductAttributeDo

	ALL          field.Asterisk
	ID           field.Int64  // 主键id
	GroupID      field.Int64  // 属性分组ID
	Name         field.String // 属性名称
	InputType    field.Int32  // 输入类型：1-手动输入，2-单选，3-多选
	ValueType    field.Int32  // 值类型：1-文本，2-数字，3-日期
	InputList    field.String // 可选值列表，用逗号分隔
	Unit         field.String // 单位
	IsRequired   field.Int32  // 是否必填
	IsSearchable field.Int32  // 是否支持搜索
	IsShow       field.Int32  // 是否显示
	Sort         field.Int32  // 排序
	Status       field.Int32  // 状态：0->禁用；1->启用
	CreateBy     field.Int64  // 创建人ID
	CreateTime   field.Time   // 创建时间
	UpdateBy     field.Int64  // 更新人ID
	UpdateTime   field.Time   // 更新时间
	IsDeleted    field.Int32  // 是否删除

	fieldMap map[string]field.Expr
}

func (p pmsProductAttribute) Table(newTableName string) *pmsProductAttribute {
	p.pmsProductAttributeDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pmsProductAttribute) As(alias string) *pmsProductAttribute {
	p.pmsProductAttributeDo.DO = *(p.pmsProductAttributeDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pmsProductAttribute) updateTableName(table string) *pmsProductAttribute {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.GroupID = field.NewInt64(table, "group_id")
	p.Name = field.NewString(table, "name")
	p.InputType = field.NewInt32(table, "input_type")
	p.ValueType = field.NewInt32(table, "value_type")
	p.InputList = field.NewString(table, "input_list")
	p.Unit = field.NewString(table, "unit")
	p.IsRequired = field.NewInt32(table, "is_required")
	p.IsSearchable = field.NewInt32(table, "is_searchable")
	p.IsShow = field.NewInt32(table, "is_show")
	p.Sort = field.NewInt32(table, "sort")
	p.Status = field.NewInt32(table, "status")
	p.CreateBy = field.NewInt64(table, "create_by")
	p.CreateTime = field.NewTime(table, "create_time")
	p.UpdateBy = field.NewInt64(table, "update_by")
	p.UpdateTime = field.NewTime(table, "update_time")
	p.IsDeleted = field.NewInt32(table, "is_deleted")

	p.fillFieldMap()

	return p
}

func (p *pmsProductAttribute) WithContext(ctx context.Context) IPmsProductAttributeDo {
	return p.pmsProductAttributeDo.WithContext(ctx)
}

func (p pmsProductAttribute) TableName() string { return p.pmsProductAttributeDo.TableName() }

func (p pmsProductAttribute) Alias() string { return p.pmsProductAttributeDo.Alias() }

func (p pmsProductAttribute) Columns(cols ...field.Expr) gen.Columns {
	return p.pmsProductAttributeDo.Columns(cols...)
}

func (p *pmsProductAttribute) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pmsProductAttribute) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 17)
	p.fieldMap["id"] = p.ID
	p.fieldMap["group_id"] = p.GroupID
	p.fieldMap["name"] = p.Name
	p.fieldMap["input_type"] = p.InputType
	p.fieldMap["value_type"] = p.ValueType
	p.fieldMap["input_list"] = p.InputList
	p.fieldMap["unit"] = p.Unit
	p.fieldMap["is_required"] = p.IsRequired
	p.fieldMap["is_searchable"] = p.IsSearchable
	p.fieldMap["is_show"] = p.IsShow
	p.fieldMap["sort"] = p.Sort
	p.fieldMap["status"] = p.Status
	p.fieldMap["create_by"] = p.CreateBy
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["update_by"] = p.UpdateBy
	p.fieldMap["update_time"] = p.UpdateTime
	p.fieldMap["is_deleted"] = p.IsDeleted
}

func (p pmsProductAttribute) clone(db *gorm.DB) pmsProductAttribute {
	p.pmsProductAttributeDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pmsProductAttribute) replaceDB(db *gorm.DB) pmsProductAttribute {
	p.pmsProductAttributeDo.ReplaceDB(db)
	return p
}

type pmsProductAttributeDo struct{ gen.DO }

type IPmsProductAttributeDo interface {
	gen.SubQuery
	Debug() IPmsProductAttributeDo
	WithContext(ctx context.Context) IPmsProductAttributeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPmsProductAttributeDo
	WriteDB() IPmsProductAttributeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPmsProductAttributeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPmsProductAttributeDo
	Not(conds ...gen.Condition) IPmsProductAttributeDo
	Or(conds ...gen.Condition) IPmsProductAttributeDo
	Select(conds ...field.Expr) IPmsProductAttributeDo
	Where(conds ...gen.Condition) IPmsProductAttributeDo
	Order(conds ...field.Expr) IPmsProductAttributeDo
	Distinct(cols ...field.Expr) IPmsProductAttributeDo
	Omit(cols ...field.Expr) IPmsProductAttributeDo
	Join(table schema.Tabler, on ...field.Expr) IPmsProductAttributeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPmsProductAttributeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPmsProductAttributeDo
	Group(cols ...field.Expr) IPmsProductAttributeDo
	Having(conds ...gen.Condition) IPmsProductAttributeDo
	Limit(limit int) IPmsProductAttributeDo
	Offset(offset int) IPmsProductAttributeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsProductAttributeDo
	Unscoped() IPmsProductAttributeDo
	Create(values ...*model.PmsProductAttribute) error
	CreateInBatches(values []*model.PmsProductAttribute, batchSize int) error
	Save(values ...*model.PmsProductAttribute) error
	First() (*model.PmsProductAttribute, error)
	Take() (*model.PmsProductAttribute, error)
	Last() (*model.PmsProductAttribute, error)
	Find() ([]*model.PmsProductAttribute, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsProductAttribute, err error)
	FindInBatches(result *[]*model.PmsProductAttribute, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PmsProductAttribute) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPmsProductAttributeDo
	Assign(attrs ...field.AssignExpr) IPmsProductAttributeDo
	Joins(fields ...field.RelationField) IPmsProductAttributeDo
	Preload(fields ...field.RelationField) IPmsProductAttributeDo
	FirstOrInit() (*model.PmsProductAttribute, error)
	FirstOrCreate() (*model.PmsProductAttribute, error)
	FindByPage(offset int, limit int) (result []*model.PmsProductAttribute, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPmsProductAttributeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pmsProductAttributeDo) Debug() IPmsProductAttributeDo {
	return p.withDO(p.DO.Debug())
}

func (p pmsProductAttributeDo) WithContext(ctx context.Context) IPmsProductAttributeDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pmsProductAttributeDo) ReadDB() IPmsProductAttributeDo {
	return p.Clauses(dbresolver.Read)
}

func (p pmsProductAttributeDo) WriteDB() IPmsProductAttributeDo {
	return p.Clauses(dbresolver.Write)
}

func (p pmsProductAttributeDo) Session(config *gorm.Session) IPmsProductAttributeDo {
	return p.withDO(p.DO.Session(config))
}

func (p pmsProductAttributeDo) Clauses(conds ...clause.Expression) IPmsProductAttributeDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pmsProductAttributeDo) Returning(value interface{}, columns ...string) IPmsProductAttributeDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pmsProductAttributeDo) Not(conds ...gen.Condition) IPmsProductAttributeDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pmsProductAttributeDo) Or(conds ...gen.Condition) IPmsProductAttributeDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pmsProductAttributeDo) Select(conds ...field.Expr) IPmsProductAttributeDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pmsProductAttributeDo) Where(conds ...gen.Condition) IPmsProductAttributeDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pmsProductAttributeDo) Order(conds ...field.Expr) IPmsProductAttributeDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pmsProductAttributeDo) Distinct(cols ...field.Expr) IPmsProductAttributeDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pmsProductAttributeDo) Omit(cols ...field.Expr) IPmsProductAttributeDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pmsProductAttributeDo) Join(table schema.Tabler, on ...field.Expr) IPmsProductAttributeDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pmsProductAttributeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPmsProductAttributeDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pmsProductAttributeDo) RightJoin(table schema.Tabler, on ...field.Expr) IPmsProductAttributeDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pmsProductAttributeDo) Group(cols ...field.Expr) IPmsProductAttributeDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pmsProductAttributeDo) Having(conds ...gen.Condition) IPmsProductAttributeDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pmsProductAttributeDo) Limit(limit int) IPmsProductAttributeDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pmsProductAttributeDo) Offset(offset int) IPmsProductAttributeDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pmsProductAttributeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsProductAttributeDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pmsProductAttributeDo) Unscoped() IPmsProductAttributeDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pmsProductAttributeDo) Create(values ...*model.PmsProductAttribute) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pmsProductAttributeDo) CreateInBatches(values []*model.PmsProductAttribute, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pmsProductAttributeDo) Save(values ...*model.PmsProductAttribute) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pmsProductAttributeDo) First() (*model.PmsProductAttribute, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductAttribute), nil
	}
}

func (p pmsProductAttributeDo) Take() (*model.PmsProductAttribute, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductAttribute), nil
	}
}

func (p pmsProductAttributeDo) Last() (*model.PmsProductAttribute, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductAttribute), nil
	}
}

func (p pmsProductAttributeDo) Find() ([]*model.PmsProductAttribute, error) {
	result, err := p.DO.Find()
	return result.([]*model.PmsProductAttribute), err
}

func (p pmsProductAttributeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsProductAttribute, err error) {
	buf := make([]*model.PmsProductAttribute, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pmsProductAttributeDo) FindInBatches(result *[]*model.PmsProductAttribute, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pmsProductAttributeDo) Attrs(attrs ...field.AssignExpr) IPmsProductAttributeDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pmsProductAttributeDo) Assign(attrs ...field.AssignExpr) IPmsProductAttributeDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pmsProductAttributeDo) Joins(fields ...field.RelationField) IPmsProductAttributeDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pmsProductAttributeDo) Preload(fields ...field.RelationField) IPmsProductAttributeDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pmsProductAttributeDo) FirstOrInit() (*model.PmsProductAttribute, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductAttribute), nil
	}
}

func (p pmsProductAttributeDo) FirstOrCreate() (*model.PmsProductAttribute, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductAttribute), nil
	}
}

func (p pmsProductAttributeDo) FindByPage(offset int, limit int) (result []*model.PmsProductAttribute, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pmsProductAttributeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pmsProductAttributeDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pmsProductAttributeDo) Delete(models ...*model.PmsProductAttribute) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pmsProductAttributeDo) withDO(do gen.Dao) *pmsProductAttributeDo {
	p.DO = *do.(*gen.DO)
	return p
}
