// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/pms/gen/model"
)

func newPmsProductAttributeGroup(db *gorm.DB, opts ...gen.DOOption) pmsProductAttributeGroup {
	_pmsProductAttributeGroup := pmsProductAttributeGroup{}

	_pmsProductAttributeGroup.pmsProductAttributeGroupDo.UseDB(db, opts...)
	_pmsProductAttributeGroup.pmsProductAttributeGroupDo.UseModel(&model.PmsProductAttributeGroup{})

	tableName := _pmsProductAttributeGroup.pmsProductAttributeGroupDo.TableName()
	_pmsProductAttributeGroup.ALL = field.NewAsterisk(tableName)
	_pmsProductAttributeGroup.ID = field.NewInt64(tableName, "id")
	_pmsProductAttributeGroup.CategoryID = field.NewInt64(tableName, "category_id")
	_pmsProductAttributeGroup.Name = field.NewString(tableName, "name")
	_pmsProductAttributeGroup.Sort = field.NewInt32(tableName, "sort")
	_pmsProductAttributeGroup.Status = field.NewInt32(tableName, "status")
	_pmsProductAttributeGroup.CreateBy = field.NewInt64(tableName, "create_by")
	_pmsProductAttributeGroup.CreateTime = field.NewTime(tableName, "create_time")
	_pmsProductAttributeGroup.UpdateBy = field.NewInt64(tableName, "update_by")
	_pmsProductAttributeGroup.UpdateTime = field.NewTime(tableName, "update_time")
	_pmsProductAttributeGroup.IsDeleted = field.NewInt32(tableName, "is_deleted")

	_pmsProductAttributeGroup.fillFieldMap()

	return _pmsProductAttributeGroup
}

// pmsProductAttributeGroup 商品属性分组表
type pmsProductAttributeGroup struct {
	pmsProductAttributeGroupDo pmsProductAttributeGroupDo

	ALL        field.Asterisk
	ID         field.Int64  // 主键id
	CategoryID field.Int64  // 分类ID
	Name       field.String // 分组名称
	Sort       field.Int32  // 排序
	Status     field.Int32  // 状态：0->禁用；1->启用
	CreateBy   field.Int64  // 创建人ID
	CreateTime field.Time   // 创建时间
	UpdateBy   field.Int64  // 更新人ID
	UpdateTime field.Time   // 更新时间
	IsDeleted  field.Int32  // 是否删除

	fieldMap map[string]field.Expr
}

func (p pmsProductAttributeGroup) Table(newTableName string) *pmsProductAttributeGroup {
	p.pmsProductAttributeGroupDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pmsProductAttributeGroup) As(alias string) *pmsProductAttributeGroup {
	p.pmsProductAttributeGroupDo.DO = *(p.pmsProductAttributeGroupDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pmsProductAttributeGroup) updateTableName(table string) *pmsProductAttributeGroup {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.CategoryID = field.NewInt64(table, "category_id")
	p.Name = field.NewString(table, "name")
	p.Sort = field.NewInt32(table, "sort")
	p.Status = field.NewInt32(table, "status")
	p.CreateBy = field.NewInt64(table, "create_by")
	p.CreateTime = field.NewTime(table, "create_time")
	p.UpdateBy = field.NewInt64(table, "update_by")
	p.UpdateTime = field.NewTime(table, "update_time")
	p.IsDeleted = field.NewInt32(table, "is_deleted")

	p.fillFieldMap()

	return p
}

func (p *pmsProductAttributeGroup) WithContext(ctx context.Context) IPmsProductAttributeGroupDo {
	return p.pmsProductAttributeGroupDo.WithContext(ctx)
}

func (p pmsProductAttributeGroup) TableName() string { return p.pmsProductAttributeGroupDo.TableName() }

func (p pmsProductAttributeGroup) Alias() string { return p.pmsProductAttributeGroupDo.Alias() }

func (p pmsProductAttributeGroup) Columns(cols ...field.Expr) gen.Columns {
	return p.pmsProductAttributeGroupDo.Columns(cols...)
}

func (p *pmsProductAttributeGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pmsProductAttributeGroup) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 10)
	p.fieldMap["id"] = p.ID
	p.fieldMap["category_id"] = p.CategoryID
	p.fieldMap["name"] = p.Name
	p.fieldMap["sort"] = p.Sort
	p.fieldMap["status"] = p.Status
	p.fieldMap["create_by"] = p.CreateBy
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["update_by"] = p.UpdateBy
	p.fieldMap["update_time"] = p.UpdateTime
	p.fieldMap["is_deleted"] = p.IsDeleted
}

func (p pmsProductAttributeGroup) clone(db *gorm.DB) pmsProductAttributeGroup {
	p.pmsProductAttributeGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pmsProductAttributeGroup) replaceDB(db *gorm.DB) pmsProductAttributeGroup {
	p.pmsProductAttributeGroupDo.ReplaceDB(db)
	return p
}

type pmsProductAttributeGroupDo struct{ gen.DO }

type IPmsProductAttributeGroupDo interface {
	gen.SubQuery
	Debug() IPmsProductAttributeGroupDo
	WithContext(ctx context.Context) IPmsProductAttributeGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPmsProductAttributeGroupDo
	WriteDB() IPmsProductAttributeGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPmsProductAttributeGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPmsProductAttributeGroupDo
	Not(conds ...gen.Condition) IPmsProductAttributeGroupDo
	Or(conds ...gen.Condition) IPmsProductAttributeGroupDo
	Select(conds ...field.Expr) IPmsProductAttributeGroupDo
	Where(conds ...gen.Condition) IPmsProductAttributeGroupDo
	Order(conds ...field.Expr) IPmsProductAttributeGroupDo
	Distinct(cols ...field.Expr) IPmsProductAttributeGroupDo
	Omit(cols ...field.Expr) IPmsProductAttributeGroupDo
	Join(table schema.Tabler, on ...field.Expr) IPmsProductAttributeGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPmsProductAttributeGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPmsProductAttributeGroupDo
	Group(cols ...field.Expr) IPmsProductAttributeGroupDo
	Having(conds ...gen.Condition) IPmsProductAttributeGroupDo
	Limit(limit int) IPmsProductAttributeGroupDo
	Offset(offset int) IPmsProductAttributeGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsProductAttributeGroupDo
	Unscoped() IPmsProductAttributeGroupDo
	Create(values ...*model.PmsProductAttributeGroup) error
	CreateInBatches(values []*model.PmsProductAttributeGroup, batchSize int) error
	Save(values ...*model.PmsProductAttributeGroup) error
	First() (*model.PmsProductAttributeGroup, error)
	Take() (*model.PmsProductAttributeGroup, error)
	Last() (*model.PmsProductAttributeGroup, error)
	Find() ([]*model.PmsProductAttributeGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsProductAttributeGroup, err error)
	FindInBatches(result *[]*model.PmsProductAttributeGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PmsProductAttributeGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPmsProductAttributeGroupDo
	Assign(attrs ...field.AssignExpr) IPmsProductAttributeGroupDo
	Joins(fields ...field.RelationField) IPmsProductAttributeGroupDo
	Preload(fields ...field.RelationField) IPmsProductAttributeGroupDo
	FirstOrInit() (*model.PmsProductAttributeGroup, error)
	FirstOrCreate() (*model.PmsProductAttributeGroup, error)
	FindByPage(offset int, limit int) (result []*model.PmsProductAttributeGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPmsProductAttributeGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pmsProductAttributeGroupDo) Debug() IPmsProductAttributeGroupDo {
	return p.withDO(p.DO.Debug())
}

func (p pmsProductAttributeGroupDo) WithContext(ctx context.Context) IPmsProductAttributeGroupDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pmsProductAttributeGroupDo) ReadDB() IPmsProductAttributeGroupDo {
	return p.Clauses(dbresolver.Read)
}

func (p pmsProductAttributeGroupDo) WriteDB() IPmsProductAttributeGroupDo {
	return p.Clauses(dbresolver.Write)
}

func (p pmsProductAttributeGroupDo) Session(config *gorm.Session) IPmsProductAttributeGroupDo {
	return p.withDO(p.DO.Session(config))
}

func (p pmsProductAttributeGroupDo) Clauses(conds ...clause.Expression) IPmsProductAttributeGroupDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pmsProductAttributeGroupDo) Returning(value interface{}, columns ...string) IPmsProductAttributeGroupDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pmsProductAttributeGroupDo) Not(conds ...gen.Condition) IPmsProductAttributeGroupDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pmsProductAttributeGroupDo) Or(conds ...gen.Condition) IPmsProductAttributeGroupDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pmsProductAttributeGroupDo) Select(conds ...field.Expr) IPmsProductAttributeGroupDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pmsProductAttributeGroupDo) Where(conds ...gen.Condition) IPmsProductAttributeGroupDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pmsProductAttributeGroupDo) Order(conds ...field.Expr) IPmsProductAttributeGroupDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pmsProductAttributeGroupDo) Distinct(cols ...field.Expr) IPmsProductAttributeGroupDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pmsProductAttributeGroupDo) Omit(cols ...field.Expr) IPmsProductAttributeGroupDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pmsProductAttributeGroupDo) Join(table schema.Tabler, on ...field.Expr) IPmsProductAttributeGroupDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pmsProductAttributeGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPmsProductAttributeGroupDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pmsProductAttributeGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) IPmsProductAttributeGroupDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pmsProductAttributeGroupDo) Group(cols ...field.Expr) IPmsProductAttributeGroupDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pmsProductAttributeGroupDo) Having(conds ...gen.Condition) IPmsProductAttributeGroupDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pmsProductAttributeGroupDo) Limit(limit int) IPmsProductAttributeGroupDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pmsProductAttributeGroupDo) Offset(offset int) IPmsProductAttributeGroupDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pmsProductAttributeGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsProductAttributeGroupDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pmsProductAttributeGroupDo) Unscoped() IPmsProductAttributeGroupDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pmsProductAttributeGroupDo) Create(values ...*model.PmsProductAttributeGroup) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pmsProductAttributeGroupDo) CreateInBatches(values []*model.PmsProductAttributeGroup, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pmsProductAttributeGroupDo) Save(values ...*model.PmsProductAttributeGroup) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pmsProductAttributeGroupDo) First() (*model.PmsProductAttributeGroup, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductAttributeGroup), nil
	}
}

func (p pmsProductAttributeGroupDo) Take() (*model.PmsProductAttributeGroup, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductAttributeGroup), nil
	}
}

func (p pmsProductAttributeGroupDo) Last() (*model.PmsProductAttributeGroup, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductAttributeGroup), nil
	}
}

func (p pmsProductAttributeGroupDo) Find() ([]*model.PmsProductAttributeGroup, error) {
	result, err := p.DO.Find()
	return result.([]*model.PmsProductAttributeGroup), err
}

func (p pmsProductAttributeGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsProductAttributeGroup, err error) {
	buf := make([]*model.PmsProductAttributeGroup, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pmsProductAttributeGroupDo) FindInBatches(result *[]*model.PmsProductAttributeGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pmsProductAttributeGroupDo) Attrs(attrs ...field.AssignExpr) IPmsProductAttributeGroupDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pmsProductAttributeGroupDo) Assign(attrs ...field.AssignExpr) IPmsProductAttributeGroupDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pmsProductAttributeGroupDo) Joins(fields ...field.RelationField) IPmsProductAttributeGroupDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pmsProductAttributeGroupDo) Preload(fields ...field.RelationField) IPmsProductAttributeGroupDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pmsProductAttributeGroupDo) FirstOrInit() (*model.PmsProductAttributeGroup, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductAttributeGroup), nil
	}
}

func (p pmsProductAttributeGroupDo) FirstOrCreate() (*model.PmsProductAttributeGroup, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductAttributeGroup), nil
	}
}

func (p pmsProductAttributeGroupDo) FindByPage(offset int, limit int) (result []*model.PmsProductAttributeGroup, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pmsProductAttributeGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pmsProductAttributeGroupDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pmsProductAttributeGroupDo) Delete(models ...*model.PmsProductAttributeGroup) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pmsProductAttributeGroupDo) withDO(do gen.Dao) *pmsProductAttributeGroupDo {
	p.DO = *do.(*gen.DO)
	return p
}
