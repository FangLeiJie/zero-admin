// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/feihua/zero-admin/rpc/pms/gen/model"
)

func newPmsProductAttributeValue(db *gorm.DB, opts ...gen.DOOption) pmsProductAttributeValue {
	_pmsProductAttributeValue := pmsProductAttributeValue{}

	_pmsProductAttributeValue.pmsProductAttributeValueDo.UseDB(db, opts...)
	_pmsProductAttributeValue.pmsProductAttributeValueDo.UseModel(&model.PmsProductAttributeValue{})

	tableName := _pmsProductAttributeValue.pmsProductAttributeValueDo.TableName()
	_pmsProductAttributeValue.ALL = field.NewAsterisk(tableName)
	_pmsProductAttributeValue.ID = field.NewInt64(tableName, "id")
	_pmsProductAttributeValue.SpuID = field.NewInt64(tableName, "spu_id")
	_pmsProductAttributeValue.AttributeID = field.NewInt64(tableName, "attribute_id")
	_pmsProductAttributeValue.Value = field.NewString(tableName, "value")
	_pmsProductAttributeValue.Status = field.NewInt32(tableName, "status")
	_pmsProductAttributeValue.CreateBy = field.NewInt64(tableName, "create_by")
	_pmsProductAttributeValue.CreateTime = field.NewTime(tableName, "create_time")
	_pmsProductAttributeValue.UpdateBy = field.NewInt64(tableName, "update_by")
	_pmsProductAttributeValue.UpdateTime = field.NewTime(tableName, "update_time")
	_pmsProductAttributeValue.IsDeleted = field.NewInt32(tableName, "is_deleted")

	_pmsProductAttributeValue.fillFieldMap()

	return _pmsProductAttributeValue
}

// pmsProductAttributeValue 商品属性值表
type pmsProductAttributeValue struct {
	pmsProductAttributeValueDo pmsProductAttributeValueDo

	ALL         field.Asterisk
	ID          field.Int64  // 主键id
	SpuID       field.Int64  // 商品SPU ID
	AttributeID field.Int64  // 属性ID
	Value       field.String // 属性值
	Status      field.Int32  // 状态：0->禁用；1->启用
	CreateBy    field.Int64  // 创建人ID
	CreateTime  field.Time   // 创建时间
	UpdateBy    field.Int64  // 更新人ID
	UpdateTime  field.Time   // 更新时间
	IsDeleted   field.Int32  // 是否删除

	fieldMap map[string]field.Expr
}

func (p pmsProductAttributeValue) Table(newTableName string) *pmsProductAttributeValue {
	p.pmsProductAttributeValueDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pmsProductAttributeValue) As(alias string) *pmsProductAttributeValue {
	p.pmsProductAttributeValueDo.DO = *(p.pmsProductAttributeValueDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pmsProductAttributeValue) updateTableName(table string) *pmsProductAttributeValue {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.SpuID = field.NewInt64(table, "spu_id")
	p.AttributeID = field.NewInt64(table, "attribute_id")
	p.Value = field.NewString(table, "value")
	p.Status = field.NewInt32(table, "status")
	p.CreateBy = field.NewInt64(table, "create_by")
	p.CreateTime = field.NewTime(table, "create_time")
	p.UpdateBy = field.NewInt64(table, "update_by")
	p.UpdateTime = field.NewTime(table, "update_time")
	p.IsDeleted = field.NewInt32(table, "is_deleted")

	p.fillFieldMap()

	return p
}

func (p *pmsProductAttributeValue) WithContext(ctx context.Context) IPmsProductAttributeValueDo {
	return p.pmsProductAttributeValueDo.WithContext(ctx)
}

func (p pmsProductAttributeValue) TableName() string { return p.pmsProductAttributeValueDo.TableName() }

func (p pmsProductAttributeValue) Alias() string { return p.pmsProductAttributeValueDo.Alias() }

func (p pmsProductAttributeValue) Columns(cols ...field.Expr) gen.Columns {
	return p.pmsProductAttributeValueDo.Columns(cols...)
}

func (p *pmsProductAttributeValue) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pmsProductAttributeValue) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 10)
	p.fieldMap["id"] = p.ID
	p.fieldMap["spu_id"] = p.SpuID
	p.fieldMap["attribute_id"] = p.AttributeID
	p.fieldMap["value"] = p.Value
	p.fieldMap["status"] = p.Status
	p.fieldMap["create_by"] = p.CreateBy
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["update_by"] = p.UpdateBy
	p.fieldMap["update_time"] = p.UpdateTime
	p.fieldMap["is_deleted"] = p.IsDeleted
}

func (p pmsProductAttributeValue) clone(db *gorm.DB) pmsProductAttributeValue {
	p.pmsProductAttributeValueDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pmsProductAttributeValue) replaceDB(db *gorm.DB) pmsProductAttributeValue {
	p.pmsProductAttributeValueDo.ReplaceDB(db)
	return p
}

type pmsProductAttributeValueDo struct{ gen.DO }

type IPmsProductAttributeValueDo interface {
	gen.SubQuery
	Debug() IPmsProductAttributeValueDo
	WithContext(ctx context.Context) IPmsProductAttributeValueDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPmsProductAttributeValueDo
	WriteDB() IPmsProductAttributeValueDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPmsProductAttributeValueDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPmsProductAttributeValueDo
	Not(conds ...gen.Condition) IPmsProductAttributeValueDo
	Or(conds ...gen.Condition) IPmsProductAttributeValueDo
	Select(conds ...field.Expr) IPmsProductAttributeValueDo
	Where(conds ...gen.Condition) IPmsProductAttributeValueDo
	Order(conds ...field.Expr) IPmsProductAttributeValueDo
	Distinct(cols ...field.Expr) IPmsProductAttributeValueDo
	Omit(cols ...field.Expr) IPmsProductAttributeValueDo
	Join(table schema.Tabler, on ...field.Expr) IPmsProductAttributeValueDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPmsProductAttributeValueDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPmsProductAttributeValueDo
	Group(cols ...field.Expr) IPmsProductAttributeValueDo
	Having(conds ...gen.Condition) IPmsProductAttributeValueDo
	Limit(limit int) IPmsProductAttributeValueDo
	Offset(offset int) IPmsProductAttributeValueDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsProductAttributeValueDo
	Unscoped() IPmsProductAttributeValueDo
	Create(values ...*model.PmsProductAttributeValue) error
	CreateInBatches(values []*model.PmsProductAttributeValue, batchSize int) error
	Save(values ...*model.PmsProductAttributeValue) error
	First() (*model.PmsProductAttributeValue, error)
	Take() (*model.PmsProductAttributeValue, error)
	Last() (*model.PmsProductAttributeValue, error)
	Find() ([]*model.PmsProductAttributeValue, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsProductAttributeValue, err error)
	FindInBatches(result *[]*model.PmsProductAttributeValue, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PmsProductAttributeValue) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPmsProductAttributeValueDo
	Assign(attrs ...field.AssignExpr) IPmsProductAttributeValueDo
	Joins(fields ...field.RelationField) IPmsProductAttributeValueDo
	Preload(fields ...field.RelationField) IPmsProductAttributeValueDo
	FirstOrInit() (*model.PmsProductAttributeValue, error)
	FirstOrCreate() (*model.PmsProductAttributeValue, error)
	FindByPage(offset int, limit int) (result []*model.PmsProductAttributeValue, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPmsProductAttributeValueDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pmsProductAttributeValueDo) Debug() IPmsProductAttributeValueDo {
	return p.withDO(p.DO.Debug())
}

func (p pmsProductAttributeValueDo) WithContext(ctx context.Context) IPmsProductAttributeValueDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pmsProductAttributeValueDo) ReadDB() IPmsProductAttributeValueDo {
	return p.Clauses(dbresolver.Read)
}

func (p pmsProductAttributeValueDo) WriteDB() IPmsProductAttributeValueDo {
	return p.Clauses(dbresolver.Write)
}

func (p pmsProductAttributeValueDo) Session(config *gorm.Session) IPmsProductAttributeValueDo {
	return p.withDO(p.DO.Session(config))
}

func (p pmsProductAttributeValueDo) Clauses(conds ...clause.Expression) IPmsProductAttributeValueDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pmsProductAttributeValueDo) Returning(value interface{}, columns ...string) IPmsProductAttributeValueDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pmsProductAttributeValueDo) Not(conds ...gen.Condition) IPmsProductAttributeValueDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pmsProductAttributeValueDo) Or(conds ...gen.Condition) IPmsProductAttributeValueDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pmsProductAttributeValueDo) Select(conds ...field.Expr) IPmsProductAttributeValueDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pmsProductAttributeValueDo) Where(conds ...gen.Condition) IPmsProductAttributeValueDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pmsProductAttributeValueDo) Order(conds ...field.Expr) IPmsProductAttributeValueDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pmsProductAttributeValueDo) Distinct(cols ...field.Expr) IPmsProductAttributeValueDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pmsProductAttributeValueDo) Omit(cols ...field.Expr) IPmsProductAttributeValueDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pmsProductAttributeValueDo) Join(table schema.Tabler, on ...field.Expr) IPmsProductAttributeValueDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pmsProductAttributeValueDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPmsProductAttributeValueDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pmsProductAttributeValueDo) RightJoin(table schema.Tabler, on ...field.Expr) IPmsProductAttributeValueDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pmsProductAttributeValueDo) Group(cols ...field.Expr) IPmsProductAttributeValueDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pmsProductAttributeValueDo) Having(conds ...gen.Condition) IPmsProductAttributeValueDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pmsProductAttributeValueDo) Limit(limit int) IPmsProductAttributeValueDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pmsProductAttributeValueDo) Offset(offset int) IPmsProductAttributeValueDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pmsProductAttributeValueDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPmsProductAttributeValueDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pmsProductAttributeValueDo) Unscoped() IPmsProductAttributeValueDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pmsProductAttributeValueDo) Create(values ...*model.PmsProductAttributeValue) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pmsProductAttributeValueDo) CreateInBatches(values []*model.PmsProductAttributeValue, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pmsProductAttributeValueDo) Save(values ...*model.PmsProductAttributeValue) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pmsProductAttributeValueDo) First() (*model.PmsProductAttributeValue, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductAttributeValue), nil
	}
}

func (p pmsProductAttributeValueDo) Take() (*model.PmsProductAttributeValue, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductAttributeValue), nil
	}
}

func (p pmsProductAttributeValueDo) Last() (*model.PmsProductAttributeValue, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductAttributeValue), nil
	}
}

func (p pmsProductAttributeValueDo) Find() ([]*model.PmsProductAttributeValue, error) {
	result, err := p.DO.Find()
	return result.([]*model.PmsProductAttributeValue), err
}

func (p pmsProductAttributeValueDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsProductAttributeValue, err error) {
	buf := make([]*model.PmsProductAttributeValue, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pmsProductAttributeValueDo) FindInBatches(result *[]*model.PmsProductAttributeValue, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pmsProductAttributeValueDo) Attrs(attrs ...field.AssignExpr) IPmsProductAttributeValueDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pmsProductAttributeValueDo) Assign(attrs ...field.AssignExpr) IPmsProductAttributeValueDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pmsProductAttributeValueDo) Joins(fields ...field.RelationField) IPmsProductAttributeValueDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pmsProductAttributeValueDo) Preload(fields ...field.RelationField) IPmsProductAttributeValueDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pmsProductAttributeValueDo) FirstOrInit() (*model.PmsProductAttributeValue, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductAttributeValue), nil
	}
}

func (p pmsProductAttributeValueDo) FirstOrCreate() (*model.PmsProductAttributeValue, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsProductAttributeValue), nil
	}
}

func (p pmsProductAttributeValueDo) FindByPage(offset int, limit int) (result []*model.PmsProductAttributeValue, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pmsProductAttributeValueDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pmsProductAttributeValueDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pmsProductAttributeValueDo) Delete(models ...*model.PmsProductAttributeValue) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pmsProductAttributeValueDo) withDO(do gen.Dao) *pmsProductAttributeValueDo {
	p.DO = *do.(*gen.DO)
	return p
}
